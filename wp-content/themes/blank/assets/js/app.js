/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/gsap/Draggable.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/Draggable.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Draggable\": () => (/* binding */ Draggable),\n/* harmony export */   \"default\": () => (/* binding */ Draggable)\n/* harmony export */ });\n/* harmony import */ var _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/matrix.js */ \"./node_modules/gsap/utils/matrix.js\");\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*!\n * Draggable 3.11.3\n * https://greensock.com\n *\n * @license Copyright 2008-2022, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n */\n\n/* eslint-disable */\n\n\nvar gsap,\n    _win,\n    _doc,\n    _docElement,\n    _body,\n    _tempDiv,\n    _placeholderDiv,\n    _coreInitted,\n    _checkPrefix,\n    _toArray,\n    _supportsPassive,\n    _isTouchDevice,\n    _touchEventLookup,\n    _isMultiTouching,\n    _isAndroid,\n    InertiaPlugin,\n    _defaultCursor,\n    _supportsPointer,\n    _dragCount = 0,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _isObject = function _isObject(value) {\n  return typeof value === \"object\";\n},\n    _isUndefined = function _isUndefined(value) {\n  return typeof value === \"undefined\";\n},\n    _emptyFunc = function _emptyFunc() {\n  return false;\n},\n    _transformProp = \"transform\",\n    _transformOriginProp = \"transformOrigin\",\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000;\n},\n    _isArray = Array.isArray,\n    _createElement = function _createElement(type, ns) {\n  var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n\n  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n},\n    _RAD2DEG = 180 / Math.PI,\n    _bigNum = 1e20,\n    _identityMatrix = new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D(),\n    _getTime = Date.now || function () {\n  return new Date().getTime();\n},\n    _renderQueue = [],\n    _lookup = {},\n    //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.\n_lookupCount = 0,\n    _clickableTagExp = /^(?:a|input|textarea|button|select)$/i,\n    _lastDragTime = 0,\n    _temp1 = {},\n    // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.\n_windowProxy = {},\n    //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.\n_copy = function _copy(obj, factor) {\n  var copy = {},\n      p;\n\n  for (p in obj) {\n    copy[p] = factor ? obj[p] * factor : obj[p];\n  }\n\n  return copy;\n},\n    _extend = function _extend(obj, defaults) {\n  for (var p in defaults) {\n    if (!(p in obj)) {\n      obj[p] = defaults[p];\n    }\n  }\n\n  return obj;\n},\n    _setTouchActionForAllDescendants = function _setTouchActionForAllDescendants(elements, value) {\n  var i = elements.length,\n      children;\n\n  while (i--) {\n    value ? elements[i].style.touchAction = value : elements[i].style.removeProperty(\"touch-action\");\n    children = elements[i].children;\n    children && children.length && _setTouchActionForAllDescendants(children, value);\n  }\n},\n    _renderQueueTick = function _renderQueueTick() {\n  return _renderQueue.forEach(function (func) {\n    return func();\n  });\n},\n    _addToRenderQueue = function _addToRenderQueue(func) {\n  _renderQueue.push(func);\n\n  if (_renderQueue.length === 1) {\n    gsap.ticker.add(_renderQueueTick);\n  }\n},\n    _renderQueueTimeout = function _renderQueueTimeout() {\n  return !_renderQueue.length && gsap.ticker.remove(_renderQueueTick);\n},\n    _removeFromRenderQueue = function _removeFromRenderQueue(func) {\n  var i = _renderQueue.length;\n\n  while (i--) {\n    if (_renderQueue[i] === func) {\n      _renderQueue.splice(i, 1);\n    }\n  }\n\n  gsap.to(_renderQueueTimeout, {\n    overwrite: true,\n    delay: 15,\n    duration: 0,\n    onComplete: _renderQueueTimeout,\n    data: \"_draggable\"\n  }); //remove the \"tick\" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).\n},\n    _setDefaults = function _setDefaults(obj, defaults) {\n  for (var p in defaults) {\n    if (!(p in obj)) {\n      obj[p] = defaults[p];\n    }\n  }\n\n  return obj;\n},\n    _addListener = function _addListener(element, type, func, capture) {\n  if (element.addEventListener) {\n    var touchType = _touchEventLookup[type];\n    capture = capture || (_supportsPassive ? {\n      passive: false\n    } : null);\n    element.addEventListener(touchType || type, func, capture);\n    touchType && type !== touchType && element.addEventListener(type, func, capture); //some browsers actually support both, so must we. But pointer events cover all.\n  }\n},\n    _removeListener = function _removeListener(element, type, func) {\n  if (element.removeEventListener) {\n    var touchType = _touchEventLookup[type];\n    element.removeEventListener(touchType || type, func);\n    touchType && type !== touchType && element.removeEventListener(type, func);\n  }\n},\n    _preventDefault = function _preventDefault(event) {\n  event.preventDefault && event.preventDefault();\n  event.preventManipulation && event.preventManipulation(); //for some Microsoft browsers\n},\n    _hasTouchID = function _hasTouchID(list, ID) {\n  var i = list.length;\n\n  while (i--) {\n    if (list[i].identifier === ID) {\n      return true;\n    }\n  }\n},\n    _onMultiTouchDocumentEnd = function _onMultiTouchDocumentEnd(event) {\n  _isMultiTouching = event.touches && _dragCount < event.touches.length;\n\n  _removeListener(event.target, \"touchend\", _onMultiTouchDocumentEnd);\n},\n    _onMultiTouchDocument = function _onMultiTouchDocument(event) {\n  _isMultiTouching = event.touches && _dragCount < event.touches.length;\n\n  _addListener(event.target, \"touchend\", _onMultiTouchDocumentEnd);\n},\n    _getDocScrollTop = function _getDocScrollTop(doc) {\n  return _win.pageYOffset || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0;\n},\n    _getDocScrollLeft = function _getDocScrollLeft(doc) {\n  return _win.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0;\n},\n    _addScrollListener = function _addScrollListener(e, callback) {\n  _addListener(e, \"scroll\", callback);\n\n  if (!_isRoot(e.parentNode)) {\n    _addScrollListener(e.parentNode, callback);\n  }\n},\n    _removeScrollListener = function _removeScrollListener(e, callback) {\n  _removeListener(e, \"scroll\", callback);\n\n  if (!_isRoot(e.parentNode)) {\n    _removeScrollListener(e.parentNode, callback);\n  }\n},\n    _isRoot = function _isRoot(e) {\n  return !!(!e || e === _docElement || e.nodeType === 9 || e === _doc.body || e === _win || !e.nodeType || !e.parentNode);\n},\n    _getMaxScroll = function _getMaxScroll(element, axis) {\n  var dim = axis === \"x\" ? \"Width\" : \"Height\",\n      scroll = \"scroll\" + dim,\n      client = \"client\" + dim;\n  return Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], _body[scroll]) - (_win[\"inner\" + dim] || _docElement[client] || _body[client]) : element[scroll] - element[client]);\n},\n    _recordMaxScrolls = function _recordMaxScrolls(e, skipCurrent) {\n  //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.\n  var x = _getMaxScroll(e, \"x\"),\n      y = _getMaxScroll(e, \"y\");\n\n  if (_isRoot(e)) {\n    e = _windowProxy;\n  } else {\n    _recordMaxScrolls(e.parentNode, skipCurrent);\n  }\n\n  e._gsMaxScrollX = x;\n  e._gsMaxScrollY = y;\n\n  if (!skipCurrent) {\n    e._gsScrollX = e.scrollLeft || 0;\n    e._gsScrollY = e.scrollTop || 0;\n  }\n},\n    _setStyle = function _setStyle(element, property, value) {\n  var style = element.style;\n\n  if (!style) {\n    return;\n  }\n\n  if (_isUndefined(style[property])) {\n    property = _checkPrefix(property, element) || property;\n  }\n\n  if (value == null) {\n    style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n  } else {\n    style[property] = value;\n  }\n},\n    _getComputedStyle = function _getComputedStyle(element) {\n  return _win.getComputedStyle(element instanceof Element ? element : element.host || (element.parentNode || {}).host || element);\n},\n    //the \"host\" stuff helps to accommodate ShadowDom objects.\n_tempRect = {},\n    //reuse to reduce garbage collection tasks\n_parseRect = function _parseRect(e) {\n  //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties\n  if (e === _win) {\n    _tempRect.left = _tempRect.top = 0;\n    _tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _body.clientWidth || 0;\n    _tempRect.height = _tempRect.bottom = (e.innerHeight || 0) - 20 < _docElement.clientHeight ? _docElement.clientHeight : e.innerHeight || _body.clientHeight || 0;\n    return _tempRect;\n  }\n\n  var doc = e.ownerDocument || _doc,\n      r = !_isUndefined(e.pageX) ? {\n    left: e.pageX - _getDocScrollLeft(doc),\n    top: e.pageY - _getDocScrollTop(doc),\n    right: e.pageX - _getDocScrollLeft(doc) + 1,\n    bottom: e.pageY - _getDocScrollTop(doc) + 1\n  } : !e.nodeType && !_isUndefined(e.left) && !_isUndefined(e.top) ? e : _toArray(e)[0].getBoundingClientRect();\n\n  if (_isUndefined(r.right) && !_isUndefined(r.width)) {\n    r.right = r.left + r.width;\n    r.bottom = r.top + r.height;\n  } else if (_isUndefined(r.width)) {\n    //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.\n    r = {\n      width: r.right - r.left,\n      height: r.bottom - r.top,\n      right: r.right,\n      left: r.left,\n      bottom: r.bottom,\n      top: r.top\n    };\n  }\n\n  return r;\n},\n    _dispatchEvent = function _dispatchEvent(target, type, callbackName) {\n  var vars = target.vars,\n      callback = vars[callbackName],\n      listeners = target._listeners[type],\n      result;\n\n  if (_isFunction(callback)) {\n    result = callback.apply(vars.callbackScope || target, vars[callbackName + \"Params\"] || [target.pointerEvent]);\n  }\n\n  if (listeners && target.dispatchEvent(type) === false) {\n    result = false;\n  }\n\n  return result;\n},\n    _getBounds = function _getBounds(target, context) {\n  //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.\n  var e = _toArray(target)[0],\n      top,\n      left,\n      offset;\n\n  if (!e.nodeType && e !== _win) {\n    if (!_isUndefined(target.left)) {\n      offset = {\n        x: 0,\n        y: 0\n      }; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin\n\n      return {\n        left: target.left - offset.x,\n        top: target.top - offset.y,\n        width: target.width,\n        height: target.height\n      };\n    }\n\n    left = target.min || target.minX || target.minRotation || 0;\n    top = target.min || target.minY || 0;\n    return {\n      left: left,\n      top: top,\n      width: (target.max || target.maxX || target.maxRotation || 0) - left,\n      height: (target.max || target.maxY || 0) - top\n    };\n  }\n\n  return _getElementBounds(e, context);\n},\n    _point1 = {},\n    //we reuse to minimize garbage collection tasks.\n_getElementBounds = function _getElementBounds(element, context) {\n  context = _toArray(context)[0];\n  var isSVG = element.getBBox && element.ownerSVGElement,\n      doc = element.ownerDocument || _doc,\n      left,\n      right,\n      top,\n      bottom,\n      matrix,\n      p1,\n      p2,\n      p3,\n      p4,\n      bbox,\n      width,\n      height,\n      cs;\n\n  if (element === _win) {\n    top = _getDocScrollTop(doc);\n    left = _getDocScrollLeft(doc);\n    right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);\n    bottom = top + ((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.\n  } else if (context === _win || _isUndefined(context)) {\n    return element.getBoundingClientRect();\n  } else {\n    left = top = 0;\n\n    if (isSVG) {\n      bbox = element.getBBox();\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      if (element.viewBox && (bbox = element.viewBox.baseVal)) {\n        left = bbox.x || 0;\n        top = bbox.y || 0;\n        width = bbox.width;\n        height = bbox.height;\n      }\n\n      if (!width) {\n        cs = _getComputedStyle(element);\n        bbox = cs.boxSizing === \"border-box\";\n        width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));\n        height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));\n      }\n    }\n\n    right = width;\n    bottom = height;\n  }\n\n  if (element === context) {\n    return {\n      left: left,\n      top: top,\n      width: right - left,\n      height: bottom - top\n    };\n  }\n\n  matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(context, true).multiply((0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(element));\n  p1 = matrix.apply({\n    x: left,\n    y: top\n  });\n  p2 = matrix.apply({\n    x: right,\n    y: top\n  });\n  p3 = matrix.apply({\n    x: right,\n    y: bottom\n  });\n  p4 = matrix.apply({\n    x: left,\n    y: bottom\n  });\n  left = Math.min(p1.x, p2.x, p3.x, p4.x);\n  top = Math.min(p1.y, p2.y, p3.y, p4.y);\n  return {\n    left: left,\n    top: top,\n    width: Math.max(p1.x, p2.x, p3.x, p4.x) - left,\n    height: Math.max(p1.y, p2.y, p3.y, p4.y) - top\n  };\n},\n    _parseInertia = function _parseInertia(draggable, snap, max, min, factor, forceZeroVelocity) {\n  var vars = {},\n      a,\n      i,\n      l;\n\n  if (snap) {\n    if (factor !== 1 && snap instanceof Array) {\n      //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.\n      vars.end = a = [];\n      l = snap.length;\n\n      if (_isObject(snap[0])) {\n        //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.\n        for (i = 0; i < l; i++) {\n          a[i] = _copy(snap[i], factor);\n        }\n      } else {\n        for (i = 0; i < l; i++) {\n          a[i] = snap[i] * factor;\n        }\n      }\n\n      max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if \"snap:[-$('#menu').width(), 0]\" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.\n\n      min -= 1.1;\n    } else if (_isFunction(snap)) {\n      vars.end = function (value) {\n        var result = snap.call(draggable, value),\n            copy,\n            p;\n\n        if (factor !== 1) {\n          if (_isObject(result)) {\n            copy = {};\n\n            for (p in result) {\n              copy[p] = result[p] * factor;\n            }\n\n            result = copy;\n          } else {\n            result *= factor;\n          }\n        }\n\n        return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.\n      };\n    } else {\n      vars.end = snap;\n    }\n  }\n\n  if (max || max === 0) {\n    vars.max = max;\n  }\n\n  if (min || min === 0) {\n    vars.min = min;\n  }\n\n  if (forceZeroVelocity) {\n    vars.velocity = 0;\n  }\n\n  return vars;\n},\n    _isClickable = function _isClickable(element) {\n  //sometimes it's convenient to mark an element as clickable by adding a data-clickable=\"true\" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has an onclick or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).\n  var data;\n  return !element || !element.getAttribute || element === _body ? false : (data = element.getAttribute(\"data-clickable\")) === \"true\" || data !== \"false\" && (element.onclick || _clickableTagExp.test(element.nodeName + \"\") || element.getAttribute(\"contentEditable\") === \"true\") ? true : _isClickable(element.parentNode);\n},\n    _setSelectable = function _setSelectable(elements, selectable) {\n  var i = elements.length,\n      e;\n\n  while (i--) {\n    e = elements[i];\n    e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;\n    gsap.set(e, {\n      lazy: true,\n      userSelect: selectable ? \"text\" : \"none\"\n    });\n  }\n},\n    _isFixed = function _isFixed(element) {\n  if (_getComputedStyle(element).position === \"fixed\") {\n    return true;\n  }\n\n  element = element.parentNode;\n\n  if (element && element.nodeType === 1) {\n    // avoid document fragments which will throw an error.\n    return _isFixed(element);\n  }\n},\n    _supports3D,\n    _addPaddingBR,\n    //The ScrollProxy class wraps an element's contents into another div (we call it \"content\") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.\nScrollProxy = function ScrollProxy(element, vars) {\n  element = gsap.utils.toArray(element)[0];\n  vars = vars || {};\n  var content = document.createElement(\"div\"),\n      style = content.style,\n      node = element.firstChild,\n      offsetTop = 0,\n      offsetLeft = 0,\n      prevTop = element.scrollTop,\n      prevLeft = element.scrollLeft,\n      scrollWidth = element.scrollWidth,\n      scrollHeight = element.scrollHeight,\n      extraPadRight = 0,\n      maxLeft = 0,\n      maxTop = 0,\n      elementWidth,\n      elementHeight,\n      contentHeight,\n      nextNode,\n      transformStart,\n      transformEnd;\n\n  if (_supports3D && vars.force3D !== false) {\n    transformStart = \"translate3d(\";\n    transformEnd = \"px,0px)\";\n  } else if (_transformProp) {\n    transformStart = \"translate(\";\n    transformEnd = \"px)\";\n  }\n\n  this.scrollTop = function (value, force) {\n    if (!arguments.length) {\n      return -this.top();\n    }\n\n    this.top(-value, force);\n  };\n\n  this.scrollLeft = function (value, force) {\n    if (!arguments.length) {\n      return -this.left();\n    }\n\n    this.left(-value, force);\n  };\n\n  this.left = function (value, force) {\n    if (!arguments.length) {\n      return -(element.scrollLeft + offsetLeft);\n    }\n\n    var dif = element.scrollLeft - prevLeft,\n        oldOffset = offsetLeft;\n\n    if ((dif > 2 || dif < -2) && !force) {\n      //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n      prevLeft = element.scrollLeft;\n      gsap.killTweensOf(this, {\n        left: 1,\n        scrollLeft: 1\n      });\n      this.left(-prevLeft);\n\n      if (vars.onKill) {\n        vars.onKill();\n      }\n\n      return;\n    }\n\n    value = -value; //invert because scrolling works in the opposite direction\n\n    if (value < 0) {\n      offsetLeft = value - 0.5 | 0;\n      value = 0;\n    } else if (value > maxLeft) {\n      offsetLeft = value - maxLeft | 0;\n      value = maxLeft;\n    } else {\n      offsetLeft = 0;\n    }\n\n    if (offsetLeft || oldOffset) {\n      if (!this._skip) {\n        style[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n      }\n\n      if (offsetLeft + extraPadRight >= 0) {\n        style.paddingRight = offsetLeft + extraPadRight + \"px\";\n      }\n    }\n\n    element.scrollLeft = value | 0;\n    prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.\n  };\n\n  this.top = function (value, force) {\n    if (!arguments.length) {\n      return -(element.scrollTop + offsetTop);\n    }\n\n    var dif = element.scrollTop - prevTop,\n        oldOffset = offsetTop;\n\n    if ((dif > 2 || dif < -2) && !force) {\n      //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n      prevTop = element.scrollTop;\n      gsap.killTweensOf(this, {\n        top: 1,\n        scrollTop: 1\n      });\n      this.top(-prevTop);\n\n      if (vars.onKill) {\n        vars.onKill();\n      }\n\n      return;\n    }\n\n    value = -value; //invert because scrolling works in the opposite direction\n\n    if (value < 0) {\n      offsetTop = value - 0.5 | 0;\n      value = 0;\n    } else if (value > maxTop) {\n      offsetTop = value - maxTop | 0;\n      value = maxTop;\n    } else {\n      offsetTop = 0;\n    }\n\n    if (offsetTop || oldOffset) {\n      if (!this._skip) {\n        style[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n      }\n    }\n\n    element.scrollTop = value | 0;\n    prevTop = element.scrollTop;\n  };\n\n  this.maxScrollTop = function () {\n    return maxTop;\n  };\n\n  this.maxScrollLeft = function () {\n    return maxLeft;\n  };\n\n  this.disable = function () {\n    node = content.firstChild;\n\n    while (node) {\n      nextNode = node.nextSibling;\n      element.appendChild(node);\n      node = nextNode;\n    }\n\n    if (element === content.parentNode) {\n      //in case disable() is called when it's already disabled.\n      element.removeChild(content);\n    }\n  };\n\n  this.enable = function () {\n    node = element.firstChild;\n\n    if (node === content) {\n      return;\n    }\n\n    while (node) {\n      nextNode = node.nextSibling;\n      content.appendChild(node);\n      node = nextNode;\n    }\n\n    element.appendChild(content);\n    this.calibrate();\n  };\n\n  this.calibrate = function (force) {\n    var widthMatches = element.clientWidth === elementWidth,\n        cs,\n        x,\n        y;\n    prevTop = element.scrollTop;\n    prevLeft = element.scrollLeft;\n\n    if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {\n      return; //no need to recalculate things if the width and height haven't changed.\n    }\n\n    if (offsetTop || offsetLeft) {\n      x = this.left();\n      y = this.top();\n      this.left(-element.scrollLeft);\n      this.top(-element.scrollTop);\n    }\n\n    cs = _getComputedStyle(element); //first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)\n\n    if (!widthMatches || force) {\n      style.display = \"block\";\n      style.width = \"auto\";\n      style.paddingRight = \"0px\";\n      extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth); //if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.\n\n      if (extraPadRight) {\n        extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);\n      }\n    }\n\n    style.display = \"inline-block\";\n    style.position = \"relative\";\n    style.overflow = \"visible\";\n    style.verticalAlign = \"top\";\n    style.boxSizing = \"content-box\";\n    style.width = \"100%\";\n    style.paddingRight = extraPadRight + \"px\"; //some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error\n\n    if (_addPaddingBR) {\n      style.paddingBottom = cs.paddingBottom;\n    }\n\n    elementWidth = element.clientWidth;\n    elementHeight = element.clientHeight;\n    scrollWidth = element.scrollWidth;\n    scrollHeight = element.scrollHeight;\n    maxLeft = element.scrollWidth - elementWidth;\n    maxTop = element.scrollHeight - elementHeight;\n    contentHeight = content.offsetHeight;\n    style.display = \"block\";\n\n    if (x || y) {\n      this.left(x);\n      this.top(y);\n    }\n  };\n\n  this.content = content;\n  this.element = element;\n  this._skip = false;\n  this.enable();\n},\n    _initCore = function _initCore(required) {\n  if (_windowExists() && document.body) {\n    var nav = window && window.navigator;\n    _win = window;\n    _doc = document;\n    _docElement = _doc.documentElement;\n    _body = _doc.body;\n    _tempDiv = _createElement(\"div\");\n    _supportsPointer = !!window.PointerEvent;\n    _placeholderDiv = _createElement(\"div\");\n    _placeholderDiv.style.cssText = \"visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab\";\n    _defaultCursor = _placeholderDiv.style.cursor === \"grab\" ? \"grab\" : \"move\";\n    _isAndroid = nav && nav.userAgent.toLowerCase().indexOf(\"android\") !== -1; //Android handles touch events in an odd way and it's virtually impossible to \"feature test\" so we resort to UA sniffing\n\n    _isTouchDevice = \"ontouchstart\" in _docElement && \"orientation\" in _win || nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0);\n\n    _addPaddingBR = function () {\n      //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).\n      var div = _createElement(\"div\"),\n          child = _createElement(\"div\"),\n          childStyle = child.style,\n          parent = _body,\n          val;\n\n      childStyle.display = \"inline-block\";\n      childStyle.position = \"relative\";\n      div.style.cssText = \"width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden\";\n      div.appendChild(child);\n      parent.appendChild(div);\n      val = child.offsetHeight + 18 > div.scrollHeight; //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.\n\n      parent.removeChild(div);\n      return val;\n    }();\n\n    _touchEventLookup = function (types) {\n      //we create an object that makes it easy to translate touch event types into their \"pointer\" counterparts if we're in a browser that uses those instead. Like IE10 uses \"MSPointerDown\" instead of \"touchstart\", for example.\n      var standard = types.split(\",\"),\n          converted = (\"onpointerdown\" in _tempDiv ? \"pointerdown,pointermove,pointerup,pointercancel\" : \"onmspointerdown\" in _tempDiv ? \"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel\" : types).split(\",\"),\n          obj = {},\n          i = 4;\n\n      while (--i > -1) {\n        obj[standard[i]] = converted[i];\n        obj[converted[i]] = standard[i];\n      } //to avoid problems in iOS 9, test to see if the browser supports the \"passive\" option on addEventListener().\n\n\n      try {\n        _docElement.addEventListener(\"test\", null, Object.defineProperty({}, \"passive\", {\n          get: function get() {\n            _supportsPassive = 1;\n          }\n        }));\n      } catch (e) {}\n\n      return obj;\n    }(\"touchstart,touchmove,touchend,touchcancel\");\n\n    _addListener(_doc, \"touchcancel\", _emptyFunc); //some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document. Very strange indeed.\n\n\n    _addListener(_win, \"touchmove\", _emptyFunc); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.\n\n\n    _body && _body.addEventListener(\"touchstart\", _emptyFunc); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\n    _addListener(_doc, \"contextmenu\", function () {\n      for (var p in _lookup) {\n        if (_lookup[p].isPressed) {\n          _lookup[p].endDrag();\n        }\n      }\n    });\n\n    gsap = _coreInitted = _getGSAP();\n  }\n\n  if (gsap) {\n    InertiaPlugin = gsap.plugins.inertia;\n    _checkPrefix = gsap.utils.checkPrefix;\n    _transformProp = _checkPrefix(_transformProp);\n    _transformOriginProp = _checkPrefix(_transformOriginProp);\n    _toArray = gsap.utils.toArray;\n    _supports3D = !!_checkPrefix(\"perspective\");\n  } else if (required) {\n    console.warn(\"Please gsap.registerPlugin(Draggable)\");\n  }\n};\n\nvar EventDispatcher = /*#__PURE__*/function () {\n  function EventDispatcher(target) {\n    this._listeners = {};\n    this.target = target || this;\n  }\n\n  var _proto = EventDispatcher.prototype;\n\n  _proto.addEventListener = function addEventListener(type, callback) {\n    var list = this._listeners[type] || (this._listeners[type] = []);\n\n    if (!~list.indexOf(callback)) {\n      list.push(callback);\n    }\n  };\n\n  _proto.removeEventListener = function removeEventListener(type, callback) {\n    var list = this._listeners[type],\n        i = list && list.indexOf(callback);\n    i >= 0 && list.splice(i, 1);\n  };\n\n  _proto.dispatchEvent = function dispatchEvent(type) {\n    var _this = this;\n\n    var result;\n    (this._listeners[type] || []).forEach(function (callback) {\n      return callback.call(_this, {\n        type: type,\n        target: _this.target\n      }) === false && (result = false);\n    });\n    return result; //if any of the callbacks return false, pass that along.\n  };\n\n  return EventDispatcher;\n}();\n\nvar Draggable = /*#__PURE__*/function (_EventDispatcher) {\n  _inheritsLoose(Draggable, _EventDispatcher);\n\n  function Draggable(target, vars) {\n    var _this2;\n\n    _this2 = _EventDispatcher.call(this) || this;\n    _coreInitted || _initCore(1);\n    target = _toArray(target)[0]; //in case the target is a selector object or selector text\n\n    if (!InertiaPlugin) {\n      InertiaPlugin = gsap.plugins.inertia;\n    }\n\n    _this2.vars = vars = _copy(vars || {});\n    _this2.target = target;\n    _this2.x = _this2.y = _this2.rotation = 0;\n    _this2.dragResistance = parseFloat(vars.dragResistance) || 0;\n    _this2.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;\n    _this2.lockAxis = vars.lockAxis;\n    _this2.autoScroll = vars.autoScroll || 0;\n    _this2.lockedAxis = null;\n    _this2.allowEventDefault = !!vars.allowEventDefault;\n    gsap.getProperty(target, \"x\"); // to ensure that transforms are instantiated.\n\n    var type = (vars.type || \"x,y\").toLowerCase(),\n        xyMode = ~type.indexOf(\"x\") || ~type.indexOf(\"y\"),\n        rotationMode = type.indexOf(\"rotation\") !== -1,\n        xProp = rotationMode ? \"rotation\" : xyMode ? \"x\" : \"left\",\n        yProp = xyMode ? \"y\" : \"top\",\n        allowX = !!(~type.indexOf(\"x\") || ~type.indexOf(\"left\") || type === \"scroll\"),\n        allowY = !!(~type.indexOf(\"y\") || ~type.indexOf(\"top\") || type === \"scroll\"),\n        minimumMovement = vars.minimumMovement || 2,\n        self = _assertThisInitialized(_this2),\n        triggers = _toArray(vars.trigger || vars.handle || target),\n        killProps = {},\n        dragEndTime = 0,\n        checkAutoScrollBounds = false,\n        autoScrollMarginTop = vars.autoScrollMarginTop || 40,\n        autoScrollMarginRight = vars.autoScrollMarginRight || 40,\n        autoScrollMarginBottom = vars.autoScrollMarginBottom || 40,\n        autoScrollMarginLeft = vars.autoScrollMarginLeft || 40,\n        isClickable = vars.clickableTest || _isClickable,\n        clickTime = 0,\n        gsCache = target._gsap || gsap.core.getCache(target),\n        isFixed = _isFixed(target),\n        getPropAsNum = function getPropAsNum(property, unit) {\n      return parseFloat(gsCache.get(target, property, unit));\n    },\n        ownerDoc = target.ownerDocument || _doc,\n        enabled,\n        scrollProxy,\n        startPointerX,\n        startPointerY,\n        startElementX,\n        startElementY,\n        hasBounds,\n        hasDragCallback,\n        hasMoveCallback,\n        maxX,\n        minX,\n        maxY,\n        minY,\n        touch,\n        touchID,\n        rotationOrigin,\n        dirty,\n        old,\n        snapX,\n        snapY,\n        snapXY,\n        isClicking,\n        touchEventTarget,\n        matrix,\n        interrupted,\n        allowNativeTouchScrolling,\n        touchDragAxis,\n        isDispatching,\n        clickDispatch,\n        trustedClickDispatch,\n        isPreventingDefault,\n        innerMatrix,\n        dragged,\n        onContextMenu = function onContextMenu(e) {\n      //used to prevent long-touch from triggering a context menu.\n      // (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.\n      _preventDefault(e);\n\n      e.stopImmediatePropagation && e.stopImmediatePropagation();\n      return false;\n    },\n        //this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the \"mousemove\" or \"touchmove\" event handler which may get called many times inbetween refreshes.\n    render = function render(suppressEvents) {\n      if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {\n        var e = target,\n            autoScrollFactor = self.autoScroll * 15,\n            //multiplying by 15 just gives us a better \"feel\" speed-wise.\n        parent,\n            isRoot,\n            rect,\n            pointerX,\n            pointerY,\n            changeX,\n            changeY,\n            gap;\n        checkAutoScrollBounds = false;\n        _windowProxy.scrollTop = _win.pageYOffset != null ? _win.pageYOffset : ownerDoc.documentElement.scrollTop != null ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop;\n        _windowProxy.scrollLeft = _win.pageXOffset != null ? _win.pageXOffset : ownerDoc.documentElement.scrollLeft != null ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft;\n        pointerX = self.pointerX - _windowProxy.scrollLeft;\n        pointerY = self.pointerY - _windowProxy.scrollTop;\n\n        while (e && !isRoot) {\n          //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.\n          isRoot = _isRoot(e.parentNode);\n          parent = isRoot ? _windowProxy : e.parentNode;\n          rect = isRoot ? {\n            bottom: Math.max(_docElement.clientHeight, _win.innerHeight || 0),\n            right: Math.max(_docElement.clientWidth, _win.innerWidth || 0),\n            left: 0,\n            top: 0\n          } : parent.getBoundingClientRect();\n          changeX = changeY = 0;\n\n          if (allowY) {\n            gap = parent._gsMaxScrollY - parent.scrollTop;\n\n            if (gap < 0) {\n              changeY = gap;\n            } else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {\n              checkAutoScrollBounds = true;\n              changeY = Math.min(gap, autoScrollFactor * (1 - Math.max(0, rect.bottom - pointerY) / autoScrollMarginBottom) | 0);\n            } else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {\n              checkAutoScrollBounds = true;\n              changeY = -Math.min(parent.scrollTop, autoScrollFactor * (1 - Math.max(0, pointerY - rect.top) / autoScrollMarginTop) | 0);\n            }\n\n            if (changeY) {\n              parent.scrollTop += changeY;\n            }\n          }\n\n          if (allowX) {\n            gap = parent._gsMaxScrollX - parent.scrollLeft;\n\n            if (gap < 0) {\n              changeX = gap;\n            } else if (pointerX > rect.right - autoScrollMarginRight && gap) {\n              checkAutoScrollBounds = true;\n              changeX = Math.min(gap, autoScrollFactor * (1 - Math.max(0, rect.right - pointerX) / autoScrollMarginRight) | 0);\n            } else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {\n              checkAutoScrollBounds = true;\n              changeX = -Math.min(parent.scrollLeft, autoScrollFactor * (1 - Math.max(0, pointerX - rect.left) / autoScrollMarginLeft) | 0);\n            }\n\n            if (changeX) {\n              parent.scrollLeft += changeX;\n            }\n          }\n\n          if (isRoot && (changeX || changeY)) {\n            _win.scrollTo(parent.scrollLeft, parent.scrollTop);\n\n            setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);\n          }\n\n          e = parent;\n        }\n      }\n\n      if (dirty) {\n        var x = self.x,\n            y = self.y;\n\n        if (rotationMode) {\n          self.deltaX = x - parseFloat(gsCache.rotation);\n          self.rotation = x;\n          gsCache.rotation = x + \"deg\";\n          gsCache.renderTransform(1, gsCache);\n        } else {\n          if (scrollProxy) {\n            if (allowY) {\n              self.deltaY = y - scrollProxy.top();\n              scrollProxy.top(y);\n            }\n\n            if (allowX) {\n              self.deltaX = x - scrollProxy.left();\n              scrollProxy.left(x);\n            }\n          } else if (xyMode) {\n            if (allowY) {\n              self.deltaY = y - parseFloat(gsCache.y);\n              gsCache.y = y + \"px\";\n            }\n\n            if (allowX) {\n              self.deltaX = x - parseFloat(gsCache.x);\n              gsCache.x = x + \"px\";\n            }\n\n            gsCache.renderTransform(1, gsCache);\n          } else {\n            if (allowY) {\n              self.deltaY = y - parseFloat(target.style.top || 0);\n              target.style.top = y + \"px\";\n            }\n\n            if (allowX) {\n              self.deltaX = x - parseFloat(target.style.left || 0);\n              target.style.left = x + \"px\";\n            }\n          }\n        }\n\n        if (hasDragCallback && !suppressEvents && !isDispatching) {\n          isDispatching = true; //in case onDrag has an update() call (avoid endless loop)\n\n          if (_dispatchEvent(self, \"drag\", \"onDrag\") === false) {\n            if (allowX) {\n              self.x -= self.deltaX;\n            }\n\n            if (allowY) {\n              self.y -= self.deltaY;\n            }\n\n            render(true);\n          }\n\n          isDispatching = false;\n        }\n      }\n\n      dirty = false;\n    },\n        //copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.\n    syncXY = function syncXY(skipOnUpdate, skipSnap) {\n      var x = self.x,\n          y = self.y,\n          snappedValue,\n          cs;\n\n      if (!target._gsap) {\n        //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).\n        gsCache = gsap.core.getCache(target);\n      }\n\n      gsCache.uncache && gsap.getProperty(target, \"x\"); // trigger a re-cache\n\n      if (xyMode) {\n        self.x = parseFloat(gsCache.x);\n        self.y = parseFloat(gsCache.y);\n      } else if (rotationMode) {\n        self.x = self.rotation = parseFloat(gsCache.rotation);\n      } else if (scrollProxy) {\n        self.y = scrollProxy.top();\n        self.x = scrollProxy.left();\n      } else {\n        self.y = parseFloat(target.style.top || (cs = _getComputedStyle(target)) && cs.top) || 0;\n        self.x = parseFloat(target.style.left || (cs || {}).left) || 0;\n      }\n\n      if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {\n        if (snapXY) {\n          _temp1.x = self.x;\n          _temp1.y = self.y;\n          snappedValue = snapXY(_temp1);\n\n          if (snappedValue.x !== self.x) {\n            self.x = snappedValue.x;\n            dirty = true;\n          }\n\n          if (snappedValue.y !== self.y) {\n            self.y = snappedValue.y;\n            dirty = true;\n          }\n        }\n\n        if (snapX) {\n          snappedValue = snapX(self.x);\n\n          if (snappedValue !== self.x) {\n            self.x = snappedValue;\n\n            if (rotationMode) {\n              self.rotation = snappedValue;\n            }\n\n            dirty = true;\n          }\n        }\n\n        if (snapY) {\n          snappedValue = snapY(self.y);\n\n          if (snappedValue !== self.y) {\n            self.y = snappedValue;\n          }\n\n          dirty = true;\n        }\n      }\n\n      dirty && render(true);\n\n      if (!skipOnUpdate) {\n        self.deltaX = self.x - x;\n        self.deltaY = self.y - y;\n\n        _dispatchEvent(self, \"throwupdate\", \"onThrowUpdate\");\n      }\n    },\n        buildSnapFunc = function buildSnapFunc(snap, min, max, factor) {\n      if (min == null) {\n        min = -_bigNum;\n      }\n\n      if (max == null) {\n        max = _bigNum;\n      }\n\n      if (_isFunction(snap)) {\n        return function (n) {\n          var edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n\n          return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : n < min ? min + (n - min) * edgeTolerance : n) * factor) * factor;\n        };\n      }\n\n      if (_isArray(snap)) {\n        return function (n) {\n          var i = snap.length,\n              closest = 0,\n              absDif = _bigNum,\n              val,\n              dif;\n\n          while (--i > -1) {\n            val = snap[i];\n            dif = val - n;\n\n            if (dif < 0) {\n              dif = -dif;\n            }\n\n            if (dif < absDif && val >= min && val <= max) {\n              closest = i;\n              absDif = dif;\n            }\n          }\n\n          return snap[closest];\n        };\n      }\n\n      return isNaN(snap) ? function (n) {\n        return n;\n      } : function () {\n        return snap * factor;\n      };\n    },\n        buildPointSnapFunc = function buildPointSnapFunc(snap, minX, maxX, minY, maxY, radius, factor) {\n      radius = radius && radius < _bigNum ? radius * radius : _bigNum; //so we don't have to Math.sqrt() in the functions. Performance optimization.\n\n      if (_isFunction(snap)) {\n        return function (point) {\n          var edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,\n              x = point.x,\n              y = point.y,\n              result,\n              dx,\n              dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n\n          point.x = x = x > maxX ? maxX + (x - maxX) * edgeTolerance : x < minX ? minX + (x - minX) * edgeTolerance : x;\n          point.y = y = y > maxY ? maxY + (y - maxY) * edgeTolerance : y < minY ? minY + (y - minY) * edgeTolerance : y;\n          result = snap.call(self, point);\n\n          if (result !== point) {\n            point.x = result.x;\n            point.y = result.y;\n          }\n\n          if (factor !== 1) {\n            point.x *= factor;\n            point.y *= factor;\n          }\n\n          if (radius < _bigNum) {\n            dx = point.x - x;\n            dy = point.y - y;\n\n            if (dx * dx + dy * dy > radius) {\n              point.x = x;\n              point.y = y;\n            }\n          }\n\n          return point;\n        };\n      }\n\n      if (_isArray(snap)) {\n        return function (p) {\n          var i = snap.length,\n              closest = 0,\n              minDist = _bigNum,\n              x,\n              y,\n              point,\n              dist;\n\n          while (--i > -1) {\n            point = snap[i];\n            x = point.x - p.x;\n            y = point.y - p.y;\n            dist = x * x + y * y;\n\n            if (dist < minDist) {\n              closest = i;\n              minDist = dist;\n            }\n          }\n\n          return minDist <= radius ? snap[closest] : p;\n        };\n      }\n\n      return function (n) {\n        return n;\n      };\n    },\n        calculateBounds = function calculateBounds() {\n      var bounds, targetBounds, snap, snapIsRaw;\n      hasBounds = false;\n\n      if (scrollProxy) {\n        scrollProxy.calibrate();\n        self.minX = minX = -scrollProxy.maxScrollLeft();\n        self.minY = minY = -scrollProxy.maxScrollTop();\n        self.maxX = maxX = self.maxY = maxY = 0;\n        hasBounds = true;\n      } else if (!!vars.bounds) {\n        bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}\n\n        if (rotationMode) {\n          self.minX = minX = bounds.left;\n          self.maxX = maxX = bounds.left + bounds.width;\n          self.minY = minY = self.maxY = maxY = 0;\n        } else if (!_isUndefined(vars.bounds.maxX) || !_isUndefined(vars.bounds.maxY)) {\n          bounds = vars.bounds;\n          self.minX = minX = bounds.minX;\n          self.minY = minY = bounds.minY;\n          self.maxX = maxX = bounds.maxX;\n          self.maxY = maxY = bounds.maxY;\n        } else {\n          targetBounds = _getBounds(target, target.parentNode);\n          self.minX = minX = Math.round(getPropAsNum(xProp, \"px\") + bounds.left - targetBounds.left);\n          self.minY = minY = Math.round(getPropAsNum(yProp, \"px\") + bounds.top - targetBounds.top);\n          self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));\n          self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));\n        }\n\n        if (minX > maxX) {\n          self.minX = maxX;\n          self.maxX = maxX = minX;\n          minX = self.minX;\n        }\n\n        if (minY > maxY) {\n          self.minY = maxY;\n          self.maxY = maxY = minY;\n          minY = self.minY;\n        }\n\n        if (rotationMode) {\n          self.minRotation = minX;\n          self.maxRotation = maxX;\n        }\n\n        hasBounds = true;\n      }\n\n      if (vars.liveSnap) {\n        snap = vars.liveSnap === true ? vars.snap || {} : vars.liveSnap;\n        snapIsRaw = _isArray(snap) || _isFunction(snap);\n\n        if (rotationMode) {\n          snapX = buildSnapFunc(snapIsRaw ? snap : snap.rotation, minX, maxX, 1);\n          snapY = null;\n        } else {\n          if (snap.points) {\n            snapXY = buildPointSnapFunc(snapIsRaw ? snap : snap.points, minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);\n          } else {\n            if (allowX) {\n              snapX = buildSnapFunc(snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft, minX, maxX, scrollProxy ? -1 : 1);\n            }\n\n            if (allowY) {\n              snapY = buildSnapFunc(snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop, minY, maxY, scrollProxy ? -1 : 1);\n            }\n          }\n        }\n      }\n    },\n        onThrowComplete = function onThrowComplete() {\n      self.isThrowing = false;\n\n      _dispatchEvent(self, \"throwcomplete\", \"onThrowComplete\");\n    },\n        onThrowInterrupt = function onThrowInterrupt() {\n      self.isThrowing = false;\n    },\n        animate = function animate(inertia, forceZeroVelocity) {\n      var snap, snapIsRaw, tween, overshootTolerance;\n\n      if (inertia && InertiaPlugin) {\n        if (inertia === true) {\n          snap = vars.snap || vars.liveSnap || {};\n          snapIsRaw = _isArray(snap) || _isFunction(snap);\n          inertia = {\n            resistance: (vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)\n          };\n\n          if (rotationMode) {\n            inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);\n          } else {\n            if (allowX) {\n              inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || self.lockedAxis === \"x\");\n            }\n\n            if (allowY) {\n              inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || self.lockedAxis === \"y\");\n            }\n\n            if (snap.points || _isArray(snap) && _isObject(snap[0])) {\n              inertia.linkedProps = xProp + \",\" + yProp;\n              inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a \"radius\" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that \"skipSnap\" parameter is true for syncXY.\n            }\n          }\n        }\n\n        self.isThrowing = true;\n        overshootTolerance = !isNaN(vars.overshootTolerance) ? vars.overshootTolerance : vars.edgeResistance === 1 ? 0 : 1 - self.edgeResistance + 0.2;\n\n        if (!inertia.duration) {\n          inertia.duration = {\n            max: Math.max(vars.minDuration || 0, \"maxDuration\" in vars ? vars.maxDuration : 2),\n            min: !isNaN(vars.minDuration) ? vars.minDuration : overshootTolerance === 0 || _isObject(inertia) && inertia.resistance > 1000 ? 0 : 0.5,\n            overshoot: overshootTolerance\n          };\n        }\n\n        self.tween = tween = gsap.to(scrollProxy || target, {\n          inertia: inertia,\n          data: \"_draggable\",\n          onComplete: onThrowComplete,\n          onInterrupt: onThrowInterrupt,\n          onUpdate: vars.fastMode ? _dispatchEvent : syncXY,\n          onUpdateParams: vars.fastMode ? [self, \"onthrowupdate\", \"onThrowUpdate\"] : snap && snap.radius ? [false, true] : []\n        });\n\n        if (!vars.fastMode) {\n          if (scrollProxy) {\n            scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n          }\n\n          tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.\n\n          syncXY(true, true);\n          self.endX = self.x;\n          self.endY = self.y;\n\n          if (rotationMode) {\n            self.endRotation = self.x;\n          }\n\n          tween.play(0);\n          syncXY(true, true);\n\n          if (scrollProxy) {\n            scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n          }\n        }\n      } else if (hasBounds) {\n        self.applyBounds();\n      }\n    },\n        updateMatrix = function updateMatrix(shiftStart) {\n      var start = matrix,\n          p;\n      matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target.parentNode, true);\n\n      if (shiftStart && self.isPressed && !matrix.equals(start || new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D())) {\n        //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.\n        p = start.inverse().apply({\n          x: startPointerX,\n          y: startPointerY\n        });\n        matrix.apply(p, p);\n        startPointerX = p.x;\n        startPointerY = p.y;\n      }\n\n      if (matrix.equals(_identityMatrix)) {\n        //if there are no transforms, we can optimize performance by not factoring in the matrix\n        matrix = null;\n      }\n    },\n        recordStartPositions = function recordStartPositions() {\n      var edgeTolerance = 1 - self.edgeResistance,\n          offsetX = isFixed ? _getDocScrollLeft(ownerDoc) : 0,\n          offsetY = isFixed ? _getDocScrollTop(ownerDoc) : 0,\n          parsedOrigin,\n          x,\n          y;\n\n      if (xyMode) {\n        // in case the user set it as a different unit, like animating the x to \"100%\". We must convert it back to px!\n        gsCache.x = getPropAsNum(xProp, \"px\") + \"px\";\n        gsCache.y = getPropAsNum(yProp, \"px\") + \"px\";\n        gsCache.renderTransform();\n      }\n\n      updateMatrix(false);\n      _point1.x = self.pointerX - offsetX;\n      _point1.y = self.pointerY - offsetY;\n      matrix && matrix.apply(_point1, _point1);\n      startPointerX = _point1.x; //translate to local coordinate system\n\n      startPointerY = _point1.y;\n\n      if (dirty) {\n        setPointerPosition(self.pointerX, self.pointerY);\n        render(true);\n      }\n\n      innerMatrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target);\n\n      if (scrollProxy) {\n        calculateBounds();\n        startElementY = scrollProxy.top();\n        startElementX = scrollProxy.left();\n      } else {\n        //if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.\n        if (isTweening()) {\n          syncXY(true, true);\n          calculateBounds();\n        } else {\n          self.applyBounds();\n        }\n\n        if (rotationMode) {\n          parsedOrigin = target.ownerSVGElement ? [gsCache.xOrigin - target.getBBox().x, gsCache.yOrigin - target.getBBox().y] : (_getComputedStyle(target)[_transformOriginProp] || \"0 0\").split(\" \");\n          rotationOrigin = self.rotationOrigin = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target).apply({\n            x: parseFloat(parsedOrigin[0]) || 0,\n            y: parseFloat(parsedOrigin[1]) || 0\n          });\n          syncXY(true, true);\n          x = self.pointerX - rotationOrigin.x - offsetX;\n          y = rotationOrigin.y - self.pointerY + offsetY;\n          startElementX = self.x; //starting rotation (x always refers to rotation in type:\"rotation\", measured in degrees)\n\n          startElementY = self.y = Math.atan2(y, x) * _RAD2DEG;\n        } else {\n          //parent = !isFixed && target.parentNode;\n          //startScrollTop = parent ? parent.scrollTop || 0 : 0;\n          //startScrollLeft = parent ? parent.scrollLeft || 0 : 0;\n          startElementY = getPropAsNum(yProp, \"px\"); //record the starting top and left values so that we can just add the mouse's movement to them later.\n\n          startElementX = getPropAsNum(xProp, \"px\");\n        }\n      }\n\n      if (hasBounds && edgeTolerance) {\n        if (startElementX > maxX) {\n          startElementX = maxX + (startElementX - maxX) / edgeTolerance;\n        } else if (startElementX < minX) {\n          startElementX = minX - (minX - startElementX) / edgeTolerance;\n        }\n\n        if (!rotationMode) {\n          if (startElementY > maxY) {\n            startElementY = maxY + (startElementY - maxY) / edgeTolerance;\n          } else if (startElementY < minY) {\n            startElementY = minY - (minY - startElementY) / edgeTolerance;\n          }\n        }\n      }\n\n      self.startX = startElementX = _round(startElementX);\n      self.startY = startElementY = _round(startElementY);\n    },\n        isTweening = function isTweening() {\n      return self.tween && self.tween.isActive();\n    },\n        removePlaceholder = function removePlaceholder() {\n      if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) {\n        //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.\n        _placeholderDiv.parentNode.removeChild(_placeholderDiv);\n      }\n    },\n        //called when the mouse is pressed (or touch starts)\n    onPress = function onPress(e, force) {\n      var i;\n\n      if (!enabled || self.isPressed || !e || (e.type === \"mousedown\" || e.type === \"pointerdown\") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type]) {\n        //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick \"click\" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      interrupted = isTweening();\n      dragged = false; // we need to track whether or not it was dragged in this interaction so that if, for example, the user calls .endDrag() to FORCE it to stop and then they keep the mouse pressed down and eventually release, that would normally cause an onClick but we have to skip it in that case if there was dragging that occurred.\n\n      self.pointerEvent = e;\n\n      if (_touchEventLookup[e.type]) {\n        //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.\n        touchEventTarget = ~e.type.indexOf(\"touch\") ? e.currentTarget || e.target : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be \"MSPointerDown\" or \"pointerdown\".\n\n        _addListener(touchEventTarget, \"touchend\", onRelease);\n\n        _addListener(touchEventTarget, \"touchmove\", onMove); // possible future change if PointerEvents are more standardized: https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture\n\n\n        _addListener(touchEventTarget, \"touchcancel\", onRelease);\n\n        _addListener(ownerDoc, \"touchstart\", _onMultiTouchDocument);\n      } else {\n        touchEventTarget = null;\n\n        _addListener(ownerDoc, \"mousemove\", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.\n\n      }\n\n      touchDragAxis = null;\n\n      if (!_supportsPointer || !touchEventTarget) {\n        _addListener(ownerDoc, \"mouseup\", onRelease);\n\n        e && e.target && _addListener(e.target, \"mouseup\", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable=\"true\"\n      }\n\n      isClicking = isClickable.call(self, e.target) && vars.dragClickables === false && !force;\n\n      if (isClicking) {\n        _addListener(e.target, \"change\", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a \"change\" event instead.\n\n\n        _dispatchEvent(self, \"pressInit\", \"onPressInit\");\n\n        _dispatchEvent(self, \"press\", \"onPress\");\n\n        _setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable=\"true\" (otherwise user couldn't drag to select text)\n\n\n        isPreventingDefault = false;\n        return;\n      }\n\n      allowNativeTouchScrolling = !touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2) ? false : allowX ? \"y\" : \"x\"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.\n\n      isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;\n\n      if (isPreventingDefault) {\n        _preventDefault(e);\n\n        _addListener(_win, \"touchforcechange\", _preventDefault); //works around safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\n      }\n\n      if (e.changedTouches) {\n        //touch events store the data slightly differently\n        e = touch = e.changedTouches[0];\n        touchID = e.identifier;\n      } else if (e.pointerId) {\n        touchID = e.pointerId; //for some Microsoft browsers\n      } else {\n        touch = touchID = null;\n      }\n\n      _dragCount++;\n\n      _addToRenderQueue(render); //causes the Draggable to render on each \"tick\" of gsap.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)\n\n\n      startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove\n\n      startPointerX = self.pointerX = e.pageX;\n\n      _dispatchEvent(self, \"pressInit\", \"onPressInit\");\n\n      if (allowNativeTouchScrolling || self.autoScroll) {\n        _recordMaxScrolls(target.parentNode);\n      }\n\n      if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) {\n        //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.\n        _placeholderDiv.style.width = target.parentNode.scrollWidth + \"px\";\n        target.parentNode.appendChild(_placeholderDiv);\n      }\n\n      recordStartPositions();\n      self.tween && self.tween.kill();\n      self.isThrowing = false;\n      gsap.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.\n\n      scrollProxy && gsap.killTweensOf(target, {\n        scrollTo: 1\n      }, true); //just in case the original target's scroll position is being tweened somewhere else.\n\n      self.tween = self.lockedAxis = null;\n\n      if (vars.zIndexBoost || !rotationMode && !scrollProxy && vars.zIndexBoost !== false) {\n        target.style.zIndex = Draggable.zIndex++;\n      }\n\n      self.isPressed = true;\n      hasDragCallback = !!(vars.onDrag || self._listeners.drag);\n      hasMoveCallback = !!(vars.onMove || self._listeners.move);\n\n      if (vars.cursor !== false || vars.activeCursor) {\n        i = triggers.length;\n\n        while (--i > -1) {\n          gsap.set(triggers[i], {\n            cursor: vars.activeCursor || vars.cursor || (_defaultCursor === \"grab\" ? \"grabbing\" : _defaultCursor)\n          });\n        }\n      }\n\n      _dispatchEvent(self, \"press\", \"onPress\");\n    },\n        //called every time the mouse/touch moves\n    onMove = function onMove(e) {\n      var originalEvent = e,\n          touches,\n          pointerX,\n          pointerY,\n          i,\n          dx,\n          dy;\n\n      if (!enabled || _isMultiTouching || !self.isPressed || !e) {\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      self.pointerEvent = e;\n      touches = e.changedTouches;\n\n      if (touches) {\n        //touch events store the data slightly differently\n        e = touches[0];\n\n        if (e !== touch && e.identifier !== touchID) {\n          //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n          i = touches.length;\n\n          while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {} // Some Android devices dispatch a touchstart AND pointerdown initially, and then only pointermove thus the touchID may not match because it was grabbed from the touchstart event whereas the pointer event is the one that the browser dispatches for move, so if the event target matches this Draggable's target, let it through.\n\n\n          if (i < 0) {\n            return;\n          }\n        }\n      } else if (e.pointerId && touchID && e.pointerId !== touchID) {\n        //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n        return;\n      }\n\n      if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) {\n        //Android browsers force us to decide on the first \"touchmove\" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a \"touchcancel\" will be fired and then no \"touchmove\" or \"touchend\" will fire during the scrolling (no good).\n        _point1.x = e.pageX - (isFixed ? _getDocScrollLeft(ownerDoc) : 0);\n        _point1.y = e.pageY - (isFixed ? _getDocScrollTop(ownerDoc) : 0);\n        matrix && matrix.apply(_point1, _point1);\n        pointerX = _point1.x;\n        pointerY = _point1.y;\n        dx = Math.abs(pointerX - startPointerX);\n        dy = Math.abs(pointerY - startPointerY);\n\n        if (dx !== dy && (dx > minimumMovement || dy > minimumMovement) || _isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n          touchDragAxis = dx > dy && allowX ? \"x\" : \"y\";\n\n          if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {\n            _addListener(_win, \"touchforcechange\", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari\n\n          }\n\n          if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {\n            self.lockedAxis = touchDragAxis === \"x\" ? \"y\" : \"x\";\n            _isFunction(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);\n          }\n\n          if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n            onRelease(originalEvent);\n            return;\n          }\n        }\n      }\n\n      if (!self.allowEventDefault && (!allowNativeTouchScrolling || touchDragAxis && allowNativeTouchScrolling !== touchDragAxis) && originalEvent.cancelable !== false) {\n        _preventDefault(originalEvent);\n\n        isPreventingDefault = true;\n      } else if (isPreventingDefault) {\n        isPreventingDefault = false;\n      }\n\n      if (self.autoScroll) {\n        checkAutoScrollBounds = true;\n      }\n\n      setPointerPosition(e.pageX, e.pageY, hasMoveCallback);\n    },\n        setPointerPosition = function setPointerPosition(pointerX, pointerY, invokeOnMove) {\n      var dragTolerance = 1 - self.dragResistance,\n          edgeTolerance = 1 - self.edgeResistance,\n          prevPointerX = self.pointerX,\n          prevPointerY = self.pointerY,\n          prevStartElementY = startElementY,\n          prevX = self.x,\n          prevY = self.y,\n          prevEndX = self.endX,\n          prevEndY = self.endY,\n          prevEndRotation = self.endRotation,\n          prevDirty = dirty,\n          xChange,\n          yChange,\n          x,\n          y,\n          dif,\n          temp;\n      self.pointerX = pointerX;\n      self.pointerY = pointerY;\n\n      if (isFixed) {\n        pointerX -= _getDocScrollLeft(ownerDoc);\n        pointerY -= _getDocScrollTop(ownerDoc);\n      }\n\n      if (rotationMode) {\n        y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;\n        dif = self.y - y;\n\n        if (dif > 180) {\n          startElementY -= 360;\n          self.y = y;\n        } else if (dif < -180) {\n          startElementY += 360;\n          self.y = y;\n        }\n\n        if (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {\n          self.y = y;\n          x = startElementX + (startElementY - y) * dragTolerance;\n        } else {\n          x = startElementX;\n        }\n      } else {\n        if (matrix) {\n          temp = pointerX * matrix.a + pointerY * matrix.c + matrix.e;\n          pointerY = pointerX * matrix.b + pointerY * matrix.d + matrix.f;\n          pointerX = temp;\n        }\n\n        yChange = pointerY - startPointerY;\n        xChange = pointerX - startPointerX;\n\n        if (yChange < minimumMovement && yChange > -minimumMovement) {\n          yChange = 0;\n        }\n\n        if (xChange < minimumMovement && xChange > -minimumMovement) {\n          xChange = 0;\n        }\n\n        if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {\n          temp = self.lockedAxis;\n\n          if (!temp) {\n            self.lockedAxis = temp = allowX && Math.abs(xChange) > Math.abs(yChange) ? \"y\" : allowY ? \"x\" : null;\n\n            if (temp && _isFunction(self.vars.onLockAxis)) {\n              self.vars.onLockAxis.call(self, self.pointerEvent);\n            }\n          }\n\n          if (temp === \"y\") {\n            yChange = 0;\n          } else if (temp === \"x\") {\n            xChange = 0;\n          }\n        }\n\n        x = _round(startElementX + xChange * dragTolerance);\n        y = _round(startElementY + yChange * dragTolerance);\n      }\n\n      if ((snapX || snapY || snapXY) && (self.x !== x || self.y !== y && !rotationMode)) {\n        if (snapXY) {\n          _temp1.x = x;\n          _temp1.y = y;\n          temp = snapXY(_temp1);\n          x = _round(temp.x);\n          y = _round(temp.y);\n        }\n\n        if (snapX) {\n          x = _round(snapX(x));\n        }\n\n        if (snapY) {\n          y = _round(snapY(y));\n        }\n      }\n\n      if (hasBounds) {\n        if (x > maxX) {\n          x = maxX + Math.round((x - maxX) * edgeTolerance);\n        } else if (x < minX) {\n          x = minX + Math.round((x - minX) * edgeTolerance);\n        }\n\n        if (!rotationMode) {\n          if (y > maxY) {\n            y = Math.round(maxY + (y - maxY) * edgeTolerance);\n          } else if (y < minY) {\n            y = Math.round(minY + (y - minY) * edgeTolerance);\n          }\n        }\n      }\n\n      if (self.x !== x || self.y !== y && !rotationMode) {\n        if (rotationMode) {\n          self.endRotation = self.x = self.endX = x;\n          dirty = true;\n        } else {\n          if (allowY) {\n            self.y = self.endY = y;\n            dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a \"tick\" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)\n          }\n\n          if (allowX) {\n            self.x = self.endX = x;\n            dirty = true;\n          }\n        }\n\n        if (!invokeOnMove || _dispatchEvent(self, \"move\", \"onMove\") !== false) {\n          if (!self.isDragging && self.isPressed) {\n            self.isDragging = dragged = true;\n\n            _dispatchEvent(self, \"dragstart\", \"onDragStart\");\n          }\n        } else {\n          //revert because the onMove returned false!\n          self.pointerX = prevPointerX;\n          self.pointerY = prevPointerY;\n          startElementY = prevStartElementY;\n          self.x = prevX;\n          self.y = prevY;\n          self.endX = prevEndX;\n          self.endY = prevEndY;\n          self.endRotation = prevEndRotation;\n          dirty = prevDirty;\n        }\n      }\n    },\n        //called when the mouse/touch is released\n    onRelease = function onRelease(e, force) {\n      if (!enabled || !self.isPressed || e && touchID != null && !force && (e.pointerId && e.pointerId !== touchID && e.target !== target || e.changedTouches && !_hasTouchID(e.changedTouches, touchID))) {\n        //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      self.isPressed = false;\n      var originalEvent = e,\n          wasDragging = self.isDragging,\n          isContextMenuRelease = self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2),\n          placeholderDelayedCall = gsap.delayedCall(0.001, removePlaceholder),\n          touches,\n          i,\n          syntheticEvent,\n          eventTarget,\n          syntheticClick;\n\n      if (touchEventTarget) {\n        _removeListener(touchEventTarget, \"touchend\", onRelease);\n\n        _removeListener(touchEventTarget, \"touchmove\", onMove);\n\n        _removeListener(touchEventTarget, \"touchcancel\", onRelease);\n\n        _removeListener(ownerDoc, \"touchstart\", _onMultiTouchDocument);\n      } else {\n        _removeListener(ownerDoc, \"mousemove\", onMove);\n      }\n\n      _removeListener(_win, \"touchforcechange\", _preventDefault);\n\n      if (!_supportsPointer || !touchEventTarget) {\n        _removeListener(ownerDoc, \"mouseup\", onRelease);\n\n        e && e.target && _removeListener(e.target, \"mouseup\", onRelease);\n      }\n\n      dirty = false;\n\n      if (wasDragging) {\n        dragEndTime = _lastDragTime = _getTime();\n        self.isDragging = false;\n      }\n\n      _removeFromRenderQueue(render);\n\n      if (isClicking && !isContextMenuRelease) {\n        if (e) {\n          _removeListener(e.target, \"change\", onRelease);\n\n          self.pointerEvent = originalEvent;\n        }\n\n        _setSelectable(triggers, false);\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n\n        _dispatchEvent(self, \"click\", \"onClick\");\n\n        isClicking = false;\n        return;\n      }\n\n      i = triggers.length;\n\n      while (--i > -1) {\n        _setStyle(triggers[i], \"cursor\", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));\n      }\n\n      _dragCount--;\n\n      if (e) {\n        touches = e.changedTouches;\n\n        if (touches) {\n          //touch events store the data slightly differently\n          e = touches[0];\n\n          if (e !== touch && e.identifier !== touchID) {\n            //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n            i = touches.length;\n\n            while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {}\n\n            if (i < 0 && !force) {\n              return;\n            }\n          }\n        }\n\n        self.pointerEvent = originalEvent;\n        self.pointerX = e.pageX;\n        self.pointerY = e.pageY;\n      }\n\n      if (isContextMenuRelease && originalEvent) {\n        _preventDefault(originalEvent);\n\n        isPreventingDefault = true;\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n      } else if (originalEvent && !wasDragging) {\n        isPreventingDefault = false;\n\n        if (interrupted && (vars.snap || vars.bounds)) {\n          //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)\n          animate(vars.inertia || vars.throwProps);\n        }\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n\n        if ((!_isAndroid || originalEvent.type !== \"touchmove\") && originalEvent.type.indexOf(\"cancel\") === -1) {\n          //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a \"click\".\n          _dispatchEvent(self, \"click\", \"onClick\");\n\n          if (_getTime() - clickTime < 300) {\n            _dispatchEvent(self, \"doubleclick\", \"onDoubleClick\");\n          }\n\n          eventTarget = originalEvent.target || target; //old IE uses srcElement\n\n          clickTime = _getTime();\n\n          syntheticClick = function syntheticClick() {\n            // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular \"click\" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the \"real\"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the \"real\" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.\n            if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {\n              if (eventTarget.click) {\n                //some browsers (like mobile Safari) don't properly trigger the click event\n                eventTarget.click();\n              } else if (ownerDoc.createEvent) {\n                syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);\n                eventTarget.dispatchEvent(syntheticEvent);\n              }\n            }\n          };\n\n          if (!_isAndroid && !originalEvent.defaultPrevented) {\n            //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.\n            gsap.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the \"click\" event with \"capture\" false which solved the video-click-to-play issue, but it would allow the \"click\" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's \"trusted\".\n          }\n        }\n      } else {\n        animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or InertiaPlugin isn't loaded.\n\n        if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || touchDragAxis && allowNativeTouchScrolling === touchDragAxis) && originalEvent.cancelable !== false) {\n          isPreventingDefault = true;\n\n          _preventDefault(originalEvent);\n        } else {\n          isPreventingDefault = false;\n        }\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n      }\n\n      isTweening() && placeholderDelayedCall.duration(self.tween.duration()); //sync the timing so that the placeholder DIV gets\n\n      wasDragging && _dispatchEvent(self, \"dragend\", \"onDragEnd\");\n      return true;\n    },\n        updateScroll = function updateScroll(e) {\n      if (e && self.isDragging && !scrollProxy) {\n        var parent = e.target || target.parentNode,\n            deltaX = parent.scrollLeft - parent._gsScrollX,\n            deltaY = parent.scrollTop - parent._gsScrollY;\n\n        if (deltaX || deltaY) {\n          if (matrix) {\n            startPointerX -= deltaX * matrix.a + deltaY * matrix.c;\n            startPointerY -= deltaY * matrix.d + deltaX * matrix.b;\n          } else {\n            startPointerX -= deltaX;\n            startPointerY -= deltaY;\n          }\n\n          parent._gsScrollX += deltaX;\n          parent._gsScrollY += deltaY;\n          setPointerPosition(self.pointerX, self.pointerY);\n        }\n      }\n    },\n        onClick = function onClick(e) {\n      //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.\n      var time = _getTime(),\n          recentlyClicked = time - clickTime < 100,\n          recentlyDragged = time - dragEndTime < 50,\n          alreadyDispatched = recentlyClicked && clickDispatch === clickTime,\n          defaultPrevented = self.pointerEvent && self.pointerEvent.defaultPrevented,\n          alreadyDispatchedTrusted = recentlyClicked && trustedClickDispatch === clickTime,\n          trusted = e.isTrusted || e.isTrusted == null && recentlyClicked && alreadyDispatched; //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic \"click\" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?\n\n\n      if ((alreadyDispatched || recentlyDragged && self.vars.suppressClickOnDrag !== false) && e.stopImmediatePropagation) {\n        e.stopImmediatePropagation();\n      }\n\n      if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || trusted && !alreadyDispatchedTrusted)) {\n        //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)\n        if (trusted && alreadyDispatched) {\n          trustedClickDispatch = clickTime;\n        }\n\n        clickDispatch = clickTime;\n        return;\n      }\n\n      if (self.isPressed || recentlyDragged || recentlyClicked) {\n        if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {\n          _preventDefault(e);\n        }\n      }\n\n      if (!recentlyClicked && !recentlyDragged && !dragged) {\n        // for script-triggered event dispatches, like element.click()\n        e && e.target && (self.pointerEvent = e);\n\n        _dispatchEvent(self, \"click\", \"onClick\");\n      }\n    },\n        localizePoint = function localizePoint(p) {\n      return matrix ? {\n        x: p.x * matrix.a + p.y * matrix.c + matrix.e,\n        y: p.x * matrix.b + p.y * matrix.d + matrix.f\n      } : {\n        x: p.x,\n        y: p.y\n      };\n    };\n\n    old = Draggable.get(target);\n    old && old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)\n    //give the user access to start/stop dragging...\n\n    _this2.startDrag = function (event, align) {\n      var r1, r2, p1, p2;\n      onPress(event || self.pointerEvent, true); //if the pointer isn't on top of the element, adjust things accordingly\n\n      if (align && !self.hitTest(event || self.pointerEvent)) {\n        r1 = _parseRect(event || self.pointerEvent);\n        r2 = _parseRect(target);\n        p1 = localizePoint({\n          x: r1.left + r1.width / 2,\n          y: r1.top + r1.height / 2\n        });\n        p2 = localizePoint({\n          x: r2.left + r2.width / 2,\n          y: r2.top + r2.height / 2\n        });\n        startPointerX -= p1.x - p2.x;\n        startPointerY -= p1.y - p2.y;\n      }\n\n      if (!self.isDragging) {\n        self.isDragging = dragged = true;\n\n        _dispatchEvent(self, \"dragstart\", \"onDragStart\");\n      }\n    };\n\n    _this2.drag = onMove;\n\n    _this2.endDrag = function (e) {\n      return onRelease(e || self.pointerEvent, true);\n    };\n\n    _this2.timeSinceDrag = function () {\n      return self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;\n    };\n\n    _this2.timeSinceClick = function () {\n      return (_getTime() - clickTime) / 1000;\n    };\n\n    _this2.hitTest = function (target, threshold) {\n      return Draggable.hitTest(self.target, target, threshold);\n    };\n\n    _this2.getDirection = function (from, diagonalThreshold) {\n      //from can be \"start\" (default), \"velocity\", or an element\n      var mode = from === \"velocity\" && InertiaPlugin ? from : _isObject(from) && !rotationMode ? \"element\" : \"start\",\n          xChange,\n          yChange,\n          ratio,\n          direction,\n          r1,\n          r2;\n\n      if (mode === \"element\") {\n        r1 = _parseRect(self.target);\n        r2 = _parseRect(from);\n      }\n\n      xChange = mode === \"start\" ? self.x - startElementX : mode === \"velocity\" ? InertiaPlugin.getVelocity(target, xProp) : r1.left + r1.width / 2 - (r2.left + r2.width / 2);\n\n      if (rotationMode) {\n        return xChange < 0 ? \"counter-clockwise\" : \"clockwise\";\n      } else {\n        diagonalThreshold = diagonalThreshold || 2;\n        yChange = mode === \"start\" ? self.y - startElementY : mode === \"velocity\" ? InertiaPlugin.getVelocity(target, yProp) : r1.top + r1.height / 2 - (r2.top + r2.height / 2);\n        ratio = Math.abs(xChange / yChange);\n        direction = ratio < 1 / diagonalThreshold ? \"\" : xChange < 0 ? \"left\" : \"right\";\n\n        if (ratio < diagonalThreshold) {\n          if (direction !== \"\") {\n            direction += \"-\";\n          }\n\n          direction += yChange < 0 ? \"up\" : \"down\";\n        }\n      }\n\n      return direction;\n    };\n\n    _this2.applyBounds = function (newBounds, sticky) {\n      var x, y, forceZeroVelocity, e, parent, isRoot;\n\n      if (newBounds && vars.bounds !== newBounds) {\n        vars.bounds = newBounds;\n        return self.update(true, sticky);\n      }\n\n      syncXY(true);\n      calculateBounds();\n\n      if (hasBounds && !isTweening()) {\n        x = self.x;\n        y = self.y;\n\n        if (x > maxX) {\n          x = maxX;\n        } else if (x < minX) {\n          x = minX;\n        }\n\n        if (y > maxY) {\n          y = maxY;\n        } else if (y < minY) {\n          y = minY;\n        }\n\n        if (self.x !== x || self.y !== y) {\n          forceZeroVelocity = true;\n          self.x = self.endX = x;\n\n          if (rotationMode) {\n            self.endRotation = x;\n          } else {\n            self.y = self.endY = y;\n          }\n\n          dirty = true;\n          render(true);\n\n          if (self.autoScroll && !self.isDragging) {\n            _recordMaxScrolls(target.parentNode);\n\n            e = target;\n            _windowProxy.scrollTop = _win.pageYOffset != null ? _win.pageYOffset : ownerDoc.documentElement.scrollTop != null ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop;\n            _windowProxy.scrollLeft = _win.pageXOffset != null ? _win.pageXOffset : ownerDoc.documentElement.scrollLeft != null ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft;\n\n            while (e && !isRoot) {\n              //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.\n              isRoot = _isRoot(e.parentNode);\n              parent = isRoot ? _windowProxy : e.parentNode;\n\n              if (allowY && parent.scrollTop > parent._gsMaxScrollY) {\n                parent.scrollTop = parent._gsMaxScrollY;\n              }\n\n              if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {\n                parent.scrollLeft = parent._gsMaxScrollX;\n              }\n\n              e = parent;\n            }\n          }\n        }\n\n        if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {\n          animate(vars.inertia || vars.throwProps, forceZeroVelocity);\n        }\n      }\n\n      return self;\n    };\n\n    _this2.update = function (applyBounds, sticky, ignoreExternalChanges) {\n      if (sticky && self.isPressed) {\n        // in case the element was repositioned in the document flow, thus its x/y may be identical but its position is actually quite different.\n        var m = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target),\n            p = innerMatrix.apply({\n          x: self.x - startElementX,\n          y: self.y - startElementY\n        }),\n            m2 = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target.parentNode, true);\n        m2.apply({\n          x: m.e - p.x,\n          y: m.f - p.y\n        }, p);\n        self.x -= p.x - m2.e;\n        self.y -= p.y - m2.f;\n        render(true);\n        recordStartPositions();\n      }\n\n      var x = self.x,\n          y = self.y;\n      updateMatrix(!sticky);\n\n      if (applyBounds) {\n        self.applyBounds();\n      } else {\n        dirty && ignoreExternalChanges && render(true);\n        syncXY(true);\n      }\n\n      if (sticky) {\n        setPointerPosition(self.pointerX, self.pointerY);\n        dirty && render(true);\n      }\n\n      if (self.isPressed && !sticky && (allowX && Math.abs(x - self.x) > 0.01 || allowY && Math.abs(y - self.y) > 0.01 && !rotationMode)) {\n        recordStartPositions();\n      }\n\n      if (self.autoScroll) {\n        _recordMaxScrolls(target.parentNode, self.isDragging);\n\n        checkAutoScrollBounds = self.isDragging;\n        render(true); //in case reparenting occurred.\n\n        _removeScrollListener(target, updateScroll);\n\n        _addScrollListener(target, updateScroll);\n      }\n\n      return self;\n    };\n\n    _this2.enable = function (type) {\n      var setVars = {\n        lazy: true\n      },\n          id,\n          i,\n          trigger;\n\n      if (vars.cursor !== false) {\n        setVars.cursor = vars.cursor || _defaultCursor;\n      }\n\n      if (gsap.utils.checkPrefix(\"touchCallout\")) {\n        setVars.touchCallout = \"none\";\n      }\n\n      if (type !== \"soft\") {\n        _setTouchActionForAllDescendants(triggers, allowX === allowY ? \"none\" : vars.allowNativeTouchScrolling && target.scrollHeight === target.clientHeight === (target.scrollWidth === target.clientHeight) || vars.allowEventDefault ? \"manipulation\" : allowX ? \"pan-y\" : \"pan-x\"); // Some browsers like Internet Explorer will fire a pointercancel event when the user attempts to drag when touchAction is \"manipulate\" because it's perceived as a pan. If the element has scrollable content in only one direction, we should use pan-x or pan-y accordingly so that the pointercancel doesn't prevent dragging.\n\n\n        i = triggers.length;\n\n        while (--i > -1) {\n          trigger = triggers[i];\n          _supportsPointer || _addListener(trigger, \"mousedown\", onPress);\n\n          _addListener(trigger, \"touchstart\", onPress);\n\n          _addListener(trigger, \"click\", onClick, true); // note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.\n\n\n          gsap.set(trigger, setVars);\n\n          if (trigger.getBBox && trigger.ownerSVGElement && allowX !== allowY) {\n            // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.\n            gsap.set(trigger.ownerSVGElement, {\n              touchAction: vars.allowNativeTouchScrolling || vars.allowEventDefault ? \"manipulation\" : allowX ? \"pan-y\" : \"pan-x\"\n            });\n          }\n\n          vars.allowContextMenu || _addListener(trigger, \"contextmenu\", onContextMenu);\n        }\n\n        _setSelectable(triggers, false);\n      }\n\n      _addScrollListener(target, updateScroll);\n\n      enabled = true;\n\n      if (InertiaPlugin && type !== \"soft\") {\n        InertiaPlugin.track(scrollProxy || target, xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\");\n      }\n\n      target._gsDragID = id = \"d\" + _lookupCount++;\n      _lookup[id] = self;\n\n      if (scrollProxy) {\n        scrollProxy.enable();\n        scrollProxy.element._gsDragID = id;\n      }\n\n      (vars.bounds || rotationMode) && recordStartPositions();\n      vars.bounds && self.applyBounds();\n      return self;\n    };\n\n    _this2.disable = function (type) {\n      var dragging = self.isDragging,\n          i = triggers.length,\n          trigger;\n\n      while (--i > -1) {\n        _setStyle(triggers[i], \"cursor\", null);\n      }\n\n      if (type !== \"soft\") {\n        _setTouchActionForAllDescendants(triggers, null);\n\n        i = triggers.length;\n\n        while (--i > -1) {\n          trigger = triggers[i];\n\n          _setStyle(trigger, \"touchCallout\", null);\n\n          _removeListener(trigger, \"mousedown\", onPress);\n\n          _removeListener(trigger, \"touchstart\", onPress);\n\n          _removeListener(trigger, \"click\", onClick);\n\n          _removeListener(trigger, \"contextmenu\", onContextMenu);\n        }\n\n        _setSelectable(triggers, true);\n\n        if (touchEventTarget) {\n          _removeListener(touchEventTarget, \"touchcancel\", onRelease);\n\n          _removeListener(touchEventTarget, \"touchend\", onRelease);\n\n          _removeListener(touchEventTarget, \"touchmove\", onMove);\n        }\n\n        _removeListener(ownerDoc, \"mouseup\", onRelease);\n\n        _removeListener(ownerDoc, \"mousemove\", onMove);\n      }\n\n      _removeScrollListener(target, updateScroll);\n\n      enabled = false;\n      InertiaPlugin && type !== \"soft\" && InertiaPlugin.untrack(scrollProxy || target, xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\");\n      scrollProxy && scrollProxy.disable();\n\n      _removeFromRenderQueue(render);\n\n      self.isDragging = self.isPressed = isClicking = false;\n      dragging && _dispatchEvent(self, \"dragend\", \"onDragEnd\");\n      return self;\n    };\n\n    _this2.enabled = function (value, type) {\n      return arguments.length ? value ? self.enable(type) : self.disable(type) : enabled;\n    };\n\n    _this2.kill = function () {\n      self.isThrowing = false;\n      self.tween && self.tween.kill();\n      self.disable();\n      gsap.set(triggers, {\n        clearProps: \"userSelect\"\n      });\n      delete _lookup[target._gsDragID];\n      return self;\n    };\n\n    if (~type.indexOf(\"scroll\")) {\n      scrollProxy = _this2.scrollProxy = new ScrollProxy(target, _extend({\n        onKill: function onKill() {\n          //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the \"mouseup\" properly when users drag the scrollbar of an element, so this works around that issue.\n          self.isPressed && onRelease(null);\n        }\n      }, vars)); //a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to \"hidden\" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)\n\n      target.style.overflowY = allowY && !_isTouchDevice ? \"auto\" : \"hidden\";\n      target.style.overflowX = allowX && !_isTouchDevice ? \"auto\" : \"hidden\";\n      target = scrollProxy.content;\n    }\n\n    if (rotationMode) {\n      killProps.rotation = 1;\n    } else {\n      if (allowX) {\n        killProps[xProp] = 1;\n      }\n\n      if (allowY) {\n        killProps[yProp] = 1;\n      }\n    }\n\n    gsCache.force3D = \"force3D\" in vars ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.\n\n    _this2.enable();\n\n    return _this2;\n  }\n\n  Draggable.register = function register(core) {\n    gsap = core;\n\n    _initCore();\n  };\n\n  Draggable.create = function create(targets, vars) {\n    _coreInitted || _initCore(true);\n    return _toArray(targets).map(function (target) {\n      return new Draggable(target, vars);\n    });\n  };\n\n  Draggable.get = function get(target) {\n    return _lookup[(_toArray(target)[0] || {})._gsDragID];\n  };\n\n  Draggable.timeSinceDrag = function timeSinceDrag() {\n    return (_getTime() - _lastDragTime) / 1000;\n  };\n\n  Draggable.hitTest = function hitTest(obj1, obj2, threshold) {\n    if (obj1 === obj2) {\n      return false;\n    }\n\n    var r1 = _parseRect(obj1),\n        r2 = _parseRect(obj2),\n        top = r1.top,\n        left = r1.left,\n        right = r1.right,\n        bottom = r1.bottom,\n        width = r1.width,\n        height = r1.height,\n        isOutside = r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top,\n        overlap,\n        area,\n        isRatio;\n\n    if (isOutside || !threshold) {\n      return !isOutside;\n    }\n\n    isRatio = (threshold + \"\").indexOf(\"%\") !== -1;\n    threshold = parseFloat(threshold) || 0;\n    overlap = {\n      left: Math.max(left, r2.left),\n      top: Math.max(top, r2.top)\n    };\n    overlap.width = Math.min(right, r2.right) - overlap.left;\n    overlap.height = Math.min(bottom, r2.bottom) - overlap.top;\n\n    if (overlap.width < 0 || overlap.height < 0) {\n      return false;\n    }\n\n    if (isRatio) {\n      threshold *= 0.01;\n      area = overlap.width * overlap.height;\n      return area >= width * height * threshold || area >= r2.width * r2.height * threshold;\n    }\n\n    return overlap.width > threshold && overlap.height > threshold;\n  };\n\n  return Draggable;\n}(EventDispatcher);\n\n_setDefaults(Draggable.prototype, {\n  pointerX: 0,\n  pointerY: 0,\n  startX: 0,\n  startY: 0,\n  deltaX: 0,\n  deltaY: 0,\n  isDragging: false,\n  isPressed: false\n});\n\nDraggable.zIndex = 1000;\nDraggable.version = \"3.11.3\";\n_getGSAP() && gsap.registerPlugin(Draggable);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gsap/Draggable.js\n");

/***/ }),

/***/ "./node_modules/gsap/Flip.js":
/*!***********************************!*\
  !*** ./node_modules/gsap/Flip.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Flip\": () => (/* binding */ Flip),\n/* harmony export */   \"default\": () => (/* binding */ Flip)\n/* harmony export */ });\n/* harmony import */ var _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/matrix.js */ \"./node_modules/gsap/utils/matrix.js\");\n/*!\n * Flip 3.11.3\n * https://greensock.com\n *\n * @license Copyright 2008-2022, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\n\n\nvar _id = 1,\n    _toArray,\n    gsap,\n    _batch,\n    _batchAction,\n    _body,\n    _closestTenth,\n    _forEachBatch = function _forEachBatch(batch, name) {\n  return batch.actions.forEach(function (a) {\n    return a.vars[name] && a.vars[name](a);\n  });\n},\n    _batchLookup = {},\n    _RAD2DEG = 180 / Math.PI,\n    _DEG2RAD = Math.PI / 180,\n    _emptyObj = {},\n    _dashedNameLookup = {},\n    _memoizedRemoveProps = {},\n    _listToArray = function _listToArray(list) {\n  return typeof list === \"string\" ? list.split(\" \").join(\"\").split(\",\") : list;\n},\n    // removes extra spaces contaminating the names, returns an Array.\n_callbacks = _listToArray(\"onStart,onUpdate,onComplete,onReverseComplete,onInterrupt\"),\n    _removeProps = _listToArray(\"transform,transformOrigin,width,height,position,top,left,opacity,zIndex,maxWidth,maxHeight,minWidth,minHeight\"),\n    _getEl = function _getEl(target) {\n  return _toArray(target)[0] || console.warn(\"Element not found:\", target);\n},\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000 || 0;\n},\n    _toggleClass = function _toggleClass(targets, className, action) {\n  return targets.forEach(function (el) {\n    return el.classList[action](className);\n  });\n},\n    _reserved = {\n  zIndex: 1,\n  kill: 1,\n  simple: 1,\n  spin: 1,\n  clearProps: 1,\n  targets: 1,\n  toggleClass: 1,\n  onComplete: 1,\n  onUpdate: 1,\n  onInterrupt: 1,\n  onStart: 1,\n  delay: 1,\n  repeat: 1,\n  repeatDelay: 1,\n  yoyo: 1,\n  scale: 1,\n  fade: 1,\n  absolute: 1,\n  props: 1,\n  onEnter: 1,\n  onLeave: 1,\n  custom: 1,\n  paused: 1,\n  nested: 1,\n  prune: 1,\n  absoluteOnLeave: 1\n},\n    _fitReserved = {\n  zIndex: 1,\n  simple: 1,\n  clearProps: 1,\n  scale: 1,\n  absolute: 1,\n  fitChild: 1,\n  getVars: 1,\n  props: 1\n},\n    _camelToDashed = function _camelToDashed(p) {\n  return p.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n},\n    _copy = function _copy(obj, exclude) {\n  var result = {},\n      p;\n\n  for (p in obj) {\n    exclude[p] || (result[p] = obj[p]);\n  }\n\n  return result;\n},\n    _memoizedProps = {},\n    _memoizeProps = function _memoizeProps(props) {\n  var p = _memoizedProps[props] = _listToArray(props);\n\n  _memoizedRemoveProps[props] = p.concat(_removeProps);\n  return p;\n},\n    _getInverseGlobalMatrix = function _getInverseGlobalMatrix(el) {\n  // integrates caching for improved performance\n  var cache = el._gsap || gsap.core.getCache(el);\n\n  if (cache.gmCache === gsap.ticker.frame) {\n    return cache.gMatrix;\n  }\n\n  cache.gmCache = gsap.ticker.frame;\n  return cache.gMatrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(el, true, false, true);\n},\n    _getDOMDepth = function _getDOMDepth(el, invert, level) {\n  if (level === void 0) {\n    level = 0;\n  }\n\n  // In invert is true, the sibling depth is increments of 1, and parent/nesting depth is increments of 1000. This lets us order elements in an Array to reflect document flow.\n  var parent = el.parentNode,\n      inc = 1000 * Math.pow(10, level) * (invert ? -1 : 1),\n      l = invert ? -inc * 900 : 0;\n\n  while (el) {\n    l += inc;\n    el = el.previousSibling;\n  }\n\n  return parent ? l + _getDOMDepth(parent, invert, level + 1) : l;\n},\n    _orderByDOMDepth = function _orderByDOMDepth(comps, invert, isElStates) {\n  comps.forEach(function (comp) {\n    return comp.d = _getDOMDepth(isElStates ? comp.element : comp.t, invert);\n  });\n  comps.sort(function (c1, c2) {\n    return c1.d - c2.d;\n  });\n  return comps;\n},\n    _recordInlineStyles = function _recordInlineStyles(elState, props) {\n  // records the current inline CSS properties into an Array in alternating name/value pairs that's stored in a \"css\" property on the state object so that we can revert later.\n  var style = elState.element.style,\n      a = elState.css = elState.css || [],\n      i = props.length,\n      p,\n      v;\n\n  while (i--) {\n    p = props[i];\n    v = style[p] || style.getPropertyValue(p);\n    a.push(v ? p : _dashedNameLookup[p] || (_dashedNameLookup[p] = _camelToDashed(p)), v);\n  }\n\n  return style;\n},\n    _applyInlineStyles = function _applyInlineStyles(state) {\n  var css = state.css,\n      style = state.element.style,\n      i = 0;\n  state.cache.uncache = 1;\n\n  for (; i < css.length; i += 2) {\n    css[i + 1] ? style[css[i]] = css[i + 1] : style.removeProperty(css[i]);\n  }\n},\n    _setFinalStates = function _setFinalStates(comps, onlyTransforms) {\n  comps.forEach(function (c) {\n    return c.a.cache.uncache = 1;\n  });\n  onlyTransforms || comps.finalStates.forEach(_applyInlineStyles);\n},\n    _absoluteProps = \"paddingTop,paddingRight,paddingBottom,paddingLeft,gridArea,transition\".split(\",\"),\n    // properties that we must record just\n_makeAbsolute = function _makeAbsolute(elState, fallbackNode, ignoreBatch) {\n  var element = elState.element,\n      width = elState.width,\n      height = elState.height,\n      uncache = elState.uncache,\n      getProp = elState.getProp,\n      style = element.style,\n      i = 4,\n      result,\n      displayIsNone,\n      cs;\n  typeof fallbackNode !== \"object\" && (fallbackNode = elState);\n\n  if (_batch && ignoreBatch !== 1) {\n    _batch._abs.push({\n      t: element,\n      b: elState,\n      a: elState,\n      sd: 0\n    });\n\n    _batch._final.push(function () {\n      return (elState.cache.uncache = 1) && _applyInlineStyles(elState);\n    });\n\n    return element;\n  }\n\n  displayIsNone = getProp(\"display\") === \"none\";\n\n  if (!elState.isVisible || displayIsNone) {\n    displayIsNone && (_recordInlineStyles(elState, [\"display\"]).display = fallbackNode.display);\n    elState.matrix = fallbackNode.matrix;\n    elState.width = width = elState.width || fallbackNode.width;\n    elState.height = height = elState.height || fallbackNode.height;\n  }\n\n  _recordInlineStyles(elState, _absoluteProps);\n\n  cs = window.getComputedStyle(element);\n\n  while (i--) {\n    style[_absoluteProps[i]] = cs[_absoluteProps[i]]; // record paddings as px-based because if removed from grid, percentage-based ones could be altered.\n  }\n\n  style.gridArea = \"1 / 1 / 1 / 1\";\n  style.transition = \"none\";\n  style.position = \"absolute\";\n  style.width = width + \"px\";\n  style.height = height + \"px\";\n  style.top || (style.top = \"0px\");\n  style.left || (style.left = \"0px\");\n\n  if (uncache) {\n    result = new ElementState(element);\n  } else {\n    // better performance\n    result = _copy(elState, _emptyObj);\n    result.position = \"absolute\";\n\n    if (elState.simple) {\n      var bounds = element.getBoundingClientRect();\n      result.matrix = new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D(1, 0, 0, 1, bounds.left + (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getDocScrollLeft)(), bounds.top + (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getDocScrollTop)());\n    } else {\n      result.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(element, false, false, true);\n    }\n  }\n\n  result = _fit(result, elState, true);\n  elState.x = _closestTenth(result.x, 0.01);\n  elState.y = _closestTenth(result.y, 0.01);\n  return element;\n},\n    _filterComps = function _filterComps(comps, targets) {\n  if (targets !== true) {\n    targets = _toArray(targets);\n    comps = comps.filter(function (c) {\n      if (targets.indexOf((c.sd < 0 ? c.b : c.a).element) !== -1) {\n        return true;\n      } else {\n        c.t._gsap.renderTransform(1); // we must force transforms to render on anything that isn't being made position: absolute, otherwise the absolute position happens and then when animation begins it applies transforms which can create a new stacking context, throwing off positioning!\n\n\n        if (c.b.isVisible) {\n          c.t.style.width = c.b.width + \"px\"; // otherwise things can collapse when contents are made position: absolute.\n\n          c.t.style.height = c.b.height + \"px\";\n        }\n      }\n    });\n  }\n\n  return comps;\n},\n    _makeCompsAbsolute = function _makeCompsAbsolute(comps) {\n  return _orderByDOMDepth(comps, true).forEach(function (c) {\n    return (c.a.isVisible || c.b.isVisible) && _makeAbsolute(c.sd < 0 ? c.b : c.a, c.b, 1);\n  });\n},\n    _findElStateInState = function _findElStateInState(state, other) {\n  return other && state.idLookup[_parseElementState(other).id] || state.elementStates[0];\n},\n    _parseElementState = function _parseElementState(elOrNode, props, simple, other) {\n  return elOrNode instanceof ElementState ? elOrNode : elOrNode instanceof FlipState ? _findElStateInState(elOrNode, other) : new ElementState(typeof elOrNode === \"string\" ? _getEl(elOrNode) || console.warn(elOrNode + \" not found\") : elOrNode, props, simple);\n},\n    _recordProps = function _recordProps(elState, props) {\n  var getProp = gsap.getProperty(elState.element, null, \"native\"),\n      obj = elState.props = {},\n      i = props.length;\n\n  while (i--) {\n    obj[props[i]] = (getProp(props[i]) + \"\").trim();\n  }\n\n  obj.zIndex && (obj.zIndex = parseFloat(obj.zIndex) || 0);\n  return elState;\n},\n    _applyProps = function _applyProps(element, props) {\n  var style = element.style || element,\n      // could pass in a vars object.\n  p;\n\n  for (p in props) {\n    style[p] = props[p];\n  }\n},\n    _getID = function _getID(el) {\n  var id = el.getAttribute(\"data-flip-id\");\n  id || el.setAttribute(\"data-flip-id\", id = \"auto-\" + _id++);\n  return id;\n},\n    _elementsFromElementStates = function _elementsFromElementStates(elStates) {\n  return elStates.map(function (elState) {\n    return elState.element;\n  });\n},\n    _handleCallback = function _handleCallback(callback, elStates, tl) {\n  return callback && elStates.length && tl.add(callback(_elementsFromElementStates(elStates), tl, new FlipState(elStates, 0, true)), 0);\n},\n    _fit = function _fit(fromState, toState, scale, applyProps, fitChild, vars) {\n  var element = fromState.element,\n      cache = fromState.cache,\n      parent = fromState.parent,\n      x = fromState.x,\n      y = fromState.y,\n      width = toState.width,\n      height = toState.height,\n      scaleX = toState.scaleX,\n      scaleY = toState.scaleY,\n      rotation = toState.rotation,\n      bounds = toState.bounds,\n      cssText = vars && element.style.cssText,\n      transform = vars && element.getBBox && element.getAttribute(\"transform\"),\n      dimensionState = fromState,\n      _toState$matrix = toState.matrix,\n      e = _toState$matrix.e,\n      f = _toState$matrix.f,\n      deep = fromState.bounds.width !== bounds.width || fromState.bounds.height !== bounds.height || fromState.scaleX !== scaleX || fromState.scaleY !== scaleY || fromState.rotation !== rotation,\n      simple = !deep && fromState.simple && toState.simple && !fitChild,\n      skewX,\n      fromPoint,\n      toPoint,\n      getProp,\n      parentMatrix,\n      matrix,\n      bbox;\n\n  if (simple || !parent) {\n    scaleX = scaleY = 1;\n    rotation = skewX = 0;\n  } else {\n    parentMatrix = _getInverseGlobalMatrix(parent);\n    matrix = parentMatrix.clone().multiply(toState.ctm ? toState.matrix.clone().multiply(toState.ctm) : toState.matrix); // root SVG elements have a ctm that we must factor out (for example, viewBox:\"0 0 94 94\" with a width of 200px would scale the internals by 2.127 but when we're matching the size of the root <svg> element itself, that scaling shouldn't factor in!)\n\n    rotation = _round(Math.atan2(matrix.b, matrix.a) * _RAD2DEG);\n    skewX = _round(Math.atan2(matrix.c, matrix.d) * _RAD2DEG + rotation) % 360; // in very rare cases, minor rounding might end up with 360 which should be 0.\n\n    scaleX = Math.sqrt(Math.pow(matrix.a, 2) + Math.pow(matrix.b, 2));\n    scaleY = Math.sqrt(Math.pow(matrix.c, 2) + Math.pow(matrix.d, 2)) * Math.cos(skewX * _DEG2RAD);\n\n    if (fitChild) {\n      fitChild = _toArray(fitChild)[0];\n      getProp = gsap.getProperty(fitChild);\n      bbox = fitChild.getBBox && typeof fitChild.getBBox === \"function\" && fitChild.getBBox();\n      dimensionState = {\n        scaleX: getProp(\"scaleX\"),\n        scaleY: getProp(\"scaleY\"),\n        width: bbox ? bbox.width : Math.ceil(parseFloat(getProp(\"width\", \"px\"))),\n        height: bbox ? bbox.height : parseFloat(getProp(\"height\", \"px\"))\n      };\n    }\n\n    cache.rotation = rotation + \"deg\";\n    cache.skewX = skewX + \"deg\";\n  }\n\n  if (scale) {\n    scaleX *= width === dimensionState.width || !dimensionState.width ? 1 : width / dimensionState.width; // note if widths are both 0, we should make scaleX 1 - some elements have box-sizing that incorporates padding, etc. and we don't want it to collapse in that case.\n\n    scaleY *= height === dimensionState.height || !dimensionState.height ? 1 : height / dimensionState.height;\n    cache.scaleX = scaleX;\n    cache.scaleY = scaleY;\n  } else {\n    width = _closestTenth(width * scaleX / dimensionState.scaleX, 0);\n    height = _closestTenth(height * scaleY / dimensionState.scaleY, 0);\n    element.style.width = width + \"px\";\n    element.style.height = height + \"px\";\n  } // if (fromState.isFixed) { // commented out because it's now taken care of in getGlobalMatrix() with a flag at the end.\n  // \te -= _getDocScrollLeft();\n  // \tf -= _getDocScrollTop();\n  // }\n\n\n  applyProps && _applyProps(element, toState.props);\n\n  if (simple || !parent) {\n    x += e - fromState.matrix.e;\n    y += f - fromState.matrix.f;\n  } else if (deep || parent !== toState.parent) {\n    cache.renderTransform(1, cache);\n    matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(fitChild || element, false, false, true);\n    fromPoint = parentMatrix.apply({\n      x: matrix.e,\n      y: matrix.f\n    });\n    toPoint = parentMatrix.apply({\n      x: e,\n      y: f\n    });\n    x += toPoint.x - fromPoint.x;\n    y += toPoint.y - fromPoint.y;\n  } else {\n    // use a faster/cheaper algorithm if we're just moving x/y\n    parentMatrix.e = parentMatrix.f = 0;\n    toPoint = parentMatrix.apply({\n      x: e - fromState.matrix.e,\n      y: f - fromState.matrix.f\n    });\n    x += toPoint.x;\n    y += toPoint.y;\n  }\n\n  x = _closestTenth(x, 0.02);\n  y = _closestTenth(y, 0.02);\n\n  if (vars && !(vars instanceof ElementState)) {\n    // revert\n    element.style.cssText = cssText;\n    element.getBBox && element.setAttribute(\"transform\", transform || \"\");\n    cache.uncache = 1;\n  } else {\n    // or apply the transform immediately\n    cache.x = x + \"px\";\n    cache.y = y + \"px\";\n    cache.renderTransform(1, cache);\n  }\n\n  if (vars) {\n    vars.x = x;\n    vars.y = y;\n    vars.rotation = rotation;\n    vars.skewX = skewX;\n\n    if (scale) {\n      vars.scaleX = scaleX;\n      vars.scaleY = scaleY;\n    } else {\n      vars.width = width;\n      vars.height = height;\n    }\n  }\n\n  return vars || cache;\n},\n    _parseState = function _parseState(targetsOrState, vars) {\n  return targetsOrState instanceof FlipState ? targetsOrState : new FlipState(targetsOrState, vars);\n},\n    _getChangingElState = function _getChangingElState(toState, fromState, id) {\n  var to1 = toState.idLookup[id],\n      to2 = toState.alt[id];\n  return to2.isVisible && (!(fromState.getElementState(to2.element) || to2).isVisible || !to1.isVisible) ? to2 : to1;\n},\n    _bodyMetrics = [],\n    _bodyProps = \"width,height,overflowX,overflowY\".split(\",\"),\n    _bodyLocked,\n    _lockBodyScroll = function _lockBodyScroll(lock) {\n  // if there's no scrollbar, we should lock that so that measurements don't get affected by temporary repositioning, like if something is centered in the window.\n  if (lock !== _bodyLocked) {\n    var s = _body.style,\n        w = _body.clientWidth === window.outerWidth,\n        h = _body.clientHeight === window.outerHeight,\n        i = 4;\n\n    if (lock && (w || h)) {\n      while (i--) {\n        _bodyMetrics[i] = s[_bodyProps[i]];\n      }\n\n      if (w) {\n        s.width = _body.clientWidth + \"px\";\n        s.overflowY = \"hidden\";\n      }\n\n      if (h) {\n        s.height = _body.clientHeight + \"px\";\n        s.overflowX = \"hidden\";\n      }\n\n      _bodyLocked = lock;\n    } else if (_bodyLocked) {\n      while (i--) {\n        _bodyMetrics[i] ? s[_bodyProps[i]] = _bodyMetrics[i] : s.removeProperty(_camelToDashed(_bodyProps[i]));\n      }\n\n      _bodyLocked = lock;\n    }\n  }\n},\n    _fromTo = function _fromTo(fromState, toState, vars, relative) {\n  // relative is -1 if \"from()\", and 1 if \"to()\"\n  fromState instanceof FlipState && toState instanceof FlipState || console.warn(\"Not a valid state object.\");\n  vars = vars || {};\n\n  var _vars = vars,\n      clearProps = _vars.clearProps,\n      onEnter = _vars.onEnter,\n      onLeave = _vars.onLeave,\n      absolute = _vars.absolute,\n      absoluteOnLeave = _vars.absoluteOnLeave,\n      custom = _vars.custom,\n      delay = _vars.delay,\n      paused = _vars.paused,\n      repeat = _vars.repeat,\n      repeatDelay = _vars.repeatDelay,\n      yoyo = _vars.yoyo,\n      toggleClass = _vars.toggleClass,\n      nested = _vars.nested,\n      _zIndex = _vars.zIndex,\n      scale = _vars.scale,\n      fade = _vars.fade,\n      stagger = _vars.stagger,\n      spin = _vars.spin,\n      prune = _vars.prune,\n      props = (\"props\" in vars ? vars : fromState).props,\n      tweenVars = _copy(vars, _reserved),\n      animation = gsap.timeline({\n    delay: delay,\n    paused: paused,\n    repeat: repeat,\n    repeatDelay: repeatDelay,\n    yoyo: yoyo,\n    data: \"isFlip\"\n  }),\n      remainingProps = tweenVars,\n      entering = [],\n      leaving = [],\n      comps = [],\n      swapOutTargets = [],\n      spinNum = spin === true ? 1 : spin || 0,\n      spinFunc = typeof spin === \"function\" ? spin : function () {\n    return spinNum;\n  },\n      interrupted = fromState.interrupted || toState.interrupted,\n      addFunc = animation[relative !== 1 ? \"to\" : \"from\"],\n      v,\n      p,\n      endTime,\n      i,\n      el,\n      comp,\n      state,\n      targets,\n      finalStates,\n      fromNode,\n      toNode,\n      run,\n      a,\n      b; //relative || (toState = (new FlipState(toState.targets, {props: props})).fit(toState, scale));\n\n\n  for (p in toState.idLookup) {\n    toNode = !toState.alt[p] ? toState.idLookup[p] : _getChangingElState(toState, fromState, p);\n    el = toNode.element;\n    fromNode = fromState.idLookup[p];\n    fromState.alt[p] && el === fromNode.element && (fromState.alt[p].isVisible || !toNode.isVisible) && (fromNode = fromState.alt[p]);\n\n    if (fromNode) {\n      comp = {\n        t: el,\n        b: fromNode,\n        a: toNode,\n        sd: fromNode.element === el ? 0 : toNode.isVisible ? 1 : -1\n      };\n      comps.push(comp);\n\n      if (comp.sd) {\n        if (comp.sd < 0) {\n          comp.b = toNode;\n          comp.a = fromNode;\n        } // for swapping elements that got interrupted, we must re-record the inline styles to ensure they're not tainted. Remember, .batch() permits getState() not to force in-progress flips to their end state.\n\n\n        interrupted && _recordInlineStyles(comp.b, props ? _memoizedRemoveProps[props] : _removeProps);\n        fade && comps.push(comp.swap = {\n          t: fromNode.element,\n          b: comp.b,\n          a: comp.a,\n          sd: -comp.sd,\n          swap: comp\n        });\n      }\n\n      el._flip = fromNode.element._flip = _batch ? _batch.timeline : animation;\n    } else if (toNode.isVisible) {\n      comps.push({\n        t: el,\n        b: _copy(toNode, {\n          isVisible: 1\n        }),\n        a: toNode,\n        sd: 0,\n        entering: 1\n      }); // to include it in the \"entering\" Array and do absolute positioning if necessary\n\n      el._flip = _batch ? _batch.timeline : animation;\n    }\n  }\n\n  props && (_memoizedProps[props] || _memoizeProps(props)).forEach(function (p) {\n    return tweenVars[p] = function (i) {\n      return comps[i].a.props[p];\n    };\n  });\n  comps.finalStates = finalStates = [];\n\n  run = function run() {\n    _orderByDOMDepth(comps);\n\n    _lockBodyScroll(true); // otherwise, measurements may get thrown off when things get fit.\n    // TODO: cache the matrix, especially for parent because it'll probably get reused quite a bit, but lock it to a particular cycle(?).\n\n\n    for (i = 0; i < comps.length; i++) {\n      comp = comps[i];\n      a = comp.a;\n      b = comp.b;\n\n      if (prune && !a.isDifferent(b) && !comp.entering) {\n        // only flip if things changed! Don't omit it from comps initially because that'd prevent the element from being positioned absolutely (if necessary)\n        comps.splice(i--, 1);\n      } else {\n        el = comp.t;\n        nested && !(comp.sd < 0) && i && (a.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(el, false, false, true)); // moving a parent affects the position of children\n\n        if (b.isVisible && a.isVisible) {\n          if (comp.sd < 0) {\n            // swapping OUT (swap direction of -1 is out)\n            state = new ElementState(el, props, fromState.simple);\n\n            _fit(state, a, scale, 0, 0, state);\n\n            state.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(el, false, false, true);\n            state.css = comp.b.css;\n            comp.a = a = state;\n            fade && (el.style.opacity = interrupted ? b.opacity : a.opacity);\n            stagger && swapOutTargets.push(el);\n          } else if (comp.sd > 0 && fade) {\n            // swapping IN (swap direction of 1 is in)\n            el.style.opacity = interrupted ? a.opacity - b.opacity : \"0\";\n          }\n\n          _fit(a, b, scale, props);\n        } else if (b.isVisible !== a.isVisible) {\n          // either entering or leaving (one side is invisible)\n          if (!b.isVisible) {\n            // entering\n            a.isVisible && entering.push(a);\n            comps.splice(i--, 1);\n          } else if (!a.isVisible) {\n            // leaving\n            b.css = a.css;\n            leaving.push(b);\n            comps.splice(i--, 1);\n            absolute && nested && _fit(a, b, scale, props);\n          }\n        }\n\n        if (!scale) {\n          el.style.maxWidth = Math.max(a.width, b.width) + \"px\";\n          el.style.maxHeight = Math.max(a.height, b.height) + \"px\";\n          el.style.minWidth = Math.min(a.width, b.width) + \"px\";\n          el.style.minHeight = Math.min(a.height, b.height) + \"px\";\n        }\n\n        nested && toggleClass && el.classList.add(toggleClass);\n      }\n\n      finalStates.push(a);\n    }\n\n    var classTargets;\n\n    if (toggleClass) {\n      classTargets = finalStates.map(function (s) {\n        return s.element;\n      });\n      nested && classTargets.forEach(function (e) {\n        return e.classList.remove(toggleClass);\n      }); // there could be a delay, so don't leave the classes applied (we'll do it in a timeline callback)\n    }\n\n    _lockBodyScroll(false);\n\n    if (scale) {\n      tweenVars.scaleX = function (i) {\n        return comps[i].a.scaleX;\n      };\n\n      tweenVars.scaleY = function (i) {\n        return comps[i].a.scaleY;\n      };\n    } else {\n      tweenVars.width = function (i) {\n        return comps[i].a.width + \"px\";\n      };\n\n      tweenVars.height = function (i) {\n        return comps[i].a.height + \"px\";\n      };\n\n      tweenVars.autoRound = vars.autoRound || false;\n    }\n\n    tweenVars.x = function (i) {\n      return comps[i].a.x + \"px\";\n    };\n\n    tweenVars.y = function (i) {\n      return comps[i].a.y + \"px\";\n    };\n\n    tweenVars.rotation = function (i) {\n      return comps[i].a.rotation + (spin ? spinFunc(i, targets[i], targets) * 360 : 0);\n    };\n\n    tweenVars.skewX = function (i) {\n      return comps[i].a.skewX;\n    };\n\n    targets = comps.map(function (c) {\n      return c.t;\n    });\n\n    if (_zIndex || _zIndex === 0) {\n      tweenVars.modifiers = {\n        zIndex: function zIndex() {\n          return _zIndex;\n        }\n      };\n      tweenVars.zIndex = _zIndex;\n      tweenVars.immediateRender = vars.immediateRender !== false;\n    }\n\n    fade && (tweenVars.opacity = function (i) {\n      return comps[i].sd < 0 ? 0 : comps[i].sd > 0 ? comps[i].a.opacity : \"+=0\";\n    });\n\n    if (swapOutTargets.length) {\n      stagger = gsap.utils.distribute(stagger);\n      var dummyArray = targets.slice(swapOutTargets.length);\n\n      tweenVars.stagger = function (i, el) {\n        return stagger(~swapOutTargets.indexOf(el) ? targets.indexOf(comps[i].swap.t) : i, el, dummyArray);\n      };\n    } // // for testing...\n    // gsap.delayedCall(vars.data ? 50 : 1, function() {\n    // \tanimation.eventCallback(\"onComplete\", () => _setFinalStates(comps, !clearProps));\n    // \taddFunc.call(animation, targets, tweenVars, 0).play();\n    // });\n    // return;\n\n\n    _callbacks.forEach(function (name) {\n      return vars[name] && animation.eventCallback(name, vars[name], vars[name + \"Params\"]);\n    }); // apply callbacks to the timeline, not tweens (because \"custom\" timing can make multiple tweens)\n\n\n    if (custom && targets.length) {\n      // bust out the custom properties as their own tweens so they can use different eases, durations, etc.\n      remainingProps = _copy(tweenVars, _reserved);\n\n      if (\"scale\" in custom) {\n        custom.scaleX = custom.scaleY = custom.scale;\n        delete custom.scale;\n      }\n\n      for (p in custom) {\n        v = _copy(custom[p], _fitReserved);\n        v[p] = tweenVars[p];\n        !(\"duration\" in v) && \"duration\" in tweenVars && (v.duration = tweenVars.duration);\n        v.stagger = tweenVars.stagger;\n        addFunc.call(animation, targets, v, 0);\n        delete remainingProps[p];\n      }\n    }\n\n    if (targets.length || leaving.length || entering.length) {\n      toggleClass && animation.add(function () {\n        return _toggleClass(classTargets, toggleClass, animation._zTime < 0 ? \"remove\" : \"add\");\n      }, 0) && !paused && _toggleClass(classTargets, toggleClass, \"add\");\n      targets.length && addFunc.call(animation, targets, remainingProps, 0);\n    }\n\n    _handleCallback(onEnter, entering, animation);\n\n    _handleCallback(onLeave, leaving, animation);\n\n    var batchTl = _batch && _batch.timeline;\n\n    if (batchTl) {\n      batchTl.add(animation, 0);\n\n      _batch._final.push(function () {\n        return _setFinalStates(comps, !clearProps);\n      });\n    }\n\n    endTime = animation.duration();\n    animation.call(function () {\n      var forward = animation.time() >= endTime;\n      forward && !batchTl && _setFinalStates(comps, !clearProps);\n      toggleClass && _toggleClass(classTargets, toggleClass, forward ? \"remove\" : \"add\");\n    });\n  };\n\n  absoluteOnLeave && (absolute = comps.filter(function (comp) {\n    return !comp.sd && !comp.a.isVisible && comp.b.isVisible;\n  }).map(function (comp) {\n    return comp.a.element;\n  }));\n\n  if (_batch) {\n    var _batch$_abs;\n\n    absolute && (_batch$_abs = _batch._abs).push.apply(_batch$_abs, _filterComps(comps, absolute));\n\n    _batch._run.push(run);\n  } else {\n    absolute && _makeCompsAbsolute(_filterComps(comps, absolute)); // when making absolute, we must go in a very particular order so that document flow changes don't affect things. Don't make it visible if both the before and after states are invisible! There's no point, and it could make things appear visible during the flip that shouldn't be.\n\n    run();\n  }\n\n  var anim = _batch ? _batch.timeline : animation;\n\n  anim.revert = function () {\n    return _killFlip(anim, 1);\n  }; // a Flip timeline should behave very different when reverting - it should actually jump to the end so that styles get cleared out.\n\n\n  return anim;\n},\n    _interrupt = function _interrupt(tl) {\n  tl.vars.onInterrupt && tl.vars.onInterrupt.apply(tl, tl.vars.onInterruptParams || []);\n  tl.getChildren(true, false, true).forEach(_interrupt);\n},\n    _killFlip = function _killFlip(tl, action) {\n  // action: 0 = nothing, 1 = complete, 2 = only kill (don't complete)\n  if (tl && tl.progress() < 1 && !tl.paused()) {\n    if (action) {\n      _interrupt(tl);\n\n      action < 2 && tl.progress(1); // we should also kill it in case it was added to a parent timeline.\n\n      tl.kill();\n    }\n\n    return true;\n  }\n},\n    _createLookup = function _createLookup(state) {\n  var lookup = state.idLookup = {},\n      alt = state.alt = {},\n      elStates = state.elementStates,\n      i = elStates.length,\n      elState;\n\n  while (i--) {\n    elState = elStates[i];\n    lookup[elState.id] ? alt[elState.id] = elState : lookup[elState.id] = elState;\n  }\n};\n\nvar FlipState = /*#__PURE__*/function () {\n  function FlipState(targets, vars, targetsAreElementStates) {\n    this.props = vars && vars.props;\n    this.simple = !!(vars && vars.simple);\n\n    if (targetsAreElementStates) {\n      this.targets = _elementsFromElementStates(targets);\n      this.elementStates = targets;\n\n      _createLookup(this);\n    } else {\n      this.targets = _toArray(targets);\n      var soft = vars && (vars.kill === false || vars.batch && !vars.kill);\n      _batch && !soft && _batch._kill.push(this);\n      this.update(soft || !!_batch); // when batching, don't force in-progress flips to their end; we need to do that AFTER all getStates() are called.\n    }\n  }\n\n  var _proto = FlipState.prototype;\n\n  _proto.update = function update(soft) {\n    var _this = this;\n\n    this.elementStates = this.targets.map(function (el) {\n      return new ElementState(el, _this.props, _this.simple);\n    });\n\n    _createLookup(this);\n\n    this.interrupt(soft);\n    this.recordInlineStyles();\n    return this;\n  };\n\n  _proto.clear = function clear() {\n    this.targets.length = this.elementStates.length = 0;\n\n    _createLookup(this);\n\n    return this;\n  };\n\n  _proto.fit = function fit(state, scale, nested) {\n    var elStatesInOrder = _orderByDOMDepth(this.elementStates.slice(0), false, true),\n        toElStates = (state || this).idLookup,\n        i = 0,\n        fromNode,\n        toNode;\n\n    for (; i < elStatesInOrder.length; i++) {\n      fromNode = elStatesInOrder[i];\n      nested && (fromNode.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(fromNode.element, false, false, true)); // moving a parent affects the position of children\n\n      toNode = toElStates[fromNode.id];\n      toNode && _fit(fromNode, toNode, scale, true, 0, fromNode);\n      fromNode.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(fromNode.element, false, false, true);\n    }\n\n    return this;\n  };\n\n  _proto.getProperty = function getProperty(element, property) {\n    var es = this.getElementState(element) || _emptyObj;\n\n    return (property in es ? es : es.props || _emptyObj)[property];\n  };\n\n  _proto.add = function add(state) {\n    var i = state.targets.length,\n        lookup = this.idLookup,\n        alt = this.alt,\n        index,\n        es,\n        es2;\n\n    while (i--) {\n      es = state.elementStates[i];\n      es2 = lookup[es.id];\n\n      if (es2 && (es.element === es2.element || alt[es.id] && alt[es.id].element === es.element)) {\n        // if the flip id is already in this FlipState, replace it!\n        index = this.elementStates.indexOf(es.element === es2.element ? es2 : alt[es.id]);\n        this.targets.splice(index, 1, state.targets[i]);\n        this.elementStates.splice(index, 1, es);\n      } else {\n        this.targets.push(state.targets[i]);\n        this.elementStates.push(es);\n      }\n    }\n\n    state.interrupted && (this.interrupted = true);\n    state.simple || (this.simple = false);\n\n    _createLookup(this);\n\n    return this;\n  };\n\n  _proto.compare = function compare(state) {\n    var l1 = state.idLookup,\n        l2 = this.idLookup,\n        unchanged = [],\n        changed = [],\n        enter = [],\n        leave = [],\n        targets = [],\n        a1 = state.alt,\n        a2 = this.alt,\n        place = function place(s1, s2, el) {\n      return (s1.isVisible !== s2.isVisible ? s1.isVisible ? enter : leave : s1.isVisible ? changed : unchanged).push(el) && targets.push(el);\n    },\n        placeIfDoesNotExist = function placeIfDoesNotExist(s1, s2, el) {\n      return targets.indexOf(el) < 0 && place(s1, s2, el);\n    },\n        s1,\n        s2,\n        p,\n        el,\n        s1Alt,\n        s2Alt,\n        c1,\n        c2;\n\n    for (p in l1) {\n      s1Alt = a1[p];\n      s2Alt = a2[p];\n      s1 = !s1Alt ? l1[p] : _getChangingElState(state, this, p);\n      el = s1.element;\n      s2 = l2[p];\n\n      if (s2Alt) {\n        c2 = s2.isVisible || !s2Alt.isVisible && el === s2.element ? s2 : s2Alt;\n        c1 = s1Alt && !s1.isVisible && !s1Alt.isVisible && c2.element === s1Alt.element ? s1Alt : s1; //c1.element !== c2.element && c1.element === s2.element && (c2 = s2);\n\n        if (c1.isVisible && c2.isVisible && c1.element !== c2.element) {\n          // swapping, so force into \"changed\" array\n          (c1.isDifferent(c2) ? changed : unchanged).push(c1.element, c2.element);\n          targets.push(c1.element, c2.element);\n        } else {\n          place(c1, c2, c1.element);\n        }\n\n        s1Alt && c1.element === s1Alt.element && (s1Alt = l1[p]);\n        placeIfDoesNotExist(c1.element !== s2.element && s1Alt ? s1Alt : c1, s2, s2.element);\n        placeIfDoesNotExist(s1Alt && s1Alt.element === s2Alt.element ? s1Alt : c1, s2Alt, s2Alt.element);\n        s1Alt && placeIfDoesNotExist(s1Alt, s2Alt.element === s1Alt.element ? s2Alt : s2, s1Alt.element);\n      } else {\n        !s2 ? enter.push(el) : !s2.isDifferent(s1) ? unchanged.push(el) : place(s1, s2, el);\n        s1Alt && placeIfDoesNotExist(s1Alt, s2, s1Alt.element);\n      }\n    }\n\n    for (p in l2) {\n      if (!l1[p]) {\n        leave.push(l2[p].element);\n        a2[p] && leave.push(a2[p].element);\n      }\n    }\n\n    return {\n      changed: changed,\n      unchanged: unchanged,\n      enter: enter,\n      leave: leave\n    };\n  };\n\n  _proto.recordInlineStyles = function recordInlineStyles() {\n    var props = _memoizedRemoveProps[this.props] || _removeProps,\n        i = this.elementStates.length;\n\n    while (i--) {\n      _recordInlineStyles(this.elementStates[i], props);\n    }\n  };\n\n  _proto.interrupt = function interrupt(soft) {\n    var _this2 = this;\n\n    // soft = DON'T force in-progress flip animations to completion (like when running a batch, we can't immediately kill flips when getting states because it could contaminate positioning and other .getState() calls that will run in the batch (we kill AFTER all the .getState() calls complete).\n    var timelines = [];\n    this.targets.forEach(function (t) {\n      var tl = t._flip,\n          foundInProgress = _killFlip(tl, soft ? 0 : 1);\n\n      soft && foundInProgress && timelines.indexOf(tl) < 0 && tl.add(function () {\n        return _this2.updateVisibility();\n      });\n      foundInProgress && timelines.push(tl);\n    });\n    !soft && timelines.length && this.updateVisibility(); // if we found an in-progress Flip animation, we must record all the values in their current state at that point BUT we should update the isVisible value AFTER pushing that flip to completion so that elements that are entering or leaving will populate those Arrays properly.\n\n    this.interrupted || (this.interrupted = !!timelines.length);\n  };\n\n  _proto.updateVisibility = function updateVisibility() {\n    this.elementStates.forEach(function (es) {\n      var b = es.element.getBoundingClientRect();\n      es.isVisible = !!(b.width || b.height || b.top || b.left);\n      es.uncache = 1;\n    });\n  };\n\n  _proto.getElementState = function getElementState(element) {\n    return this.elementStates[this.targets.indexOf(_getEl(element))];\n  };\n\n  _proto.makeAbsolute = function makeAbsolute() {\n    return _orderByDOMDepth(this.elementStates.slice(0), true, true).map(_makeAbsolute);\n  };\n\n  return FlipState;\n}();\n\nvar ElementState = /*#__PURE__*/function () {\n  function ElementState(element, props, simple) {\n    this.element = element;\n    this.update(props, simple);\n  }\n\n  var _proto2 = ElementState.prototype;\n\n  _proto2.isDifferent = function isDifferent(state) {\n    var b1 = this.bounds,\n        b2 = state.bounds;\n    return b1.top !== b2.top || b1.left !== b2.left || b1.width !== b2.width || b1.height !== b2.height || !this.matrix.equals(state.matrix) || this.opacity !== state.opacity || this.props && state.props && JSON.stringify(this.props) !== JSON.stringify(state.props);\n  };\n\n  _proto2.update = function update(props, simple) {\n    var self = this,\n        element = self.element,\n        getProp = gsap.getProperty(element),\n        cache = gsap.core.getCache(element),\n        bounds = element.getBoundingClientRect(),\n        bbox = element.getBBox && typeof element.getBBox === \"function\" && element.nodeName.toLowerCase() !== \"svg\" && element.getBBox(),\n        m = simple ? new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D(1, 0, 0, 1, bounds.left + (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getDocScrollLeft)(), bounds.top + (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getDocScrollTop)()) : (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(element, false, false, true);\n    self.getProp = getProp;\n    self.element = element;\n    self.id = _getID(element);\n    self.matrix = m;\n    self.cache = cache;\n    self.bounds = bounds;\n    self.isVisible = !!(bounds.width || bounds.height || bounds.left || bounds.top);\n    self.display = getProp(\"display\");\n    self.position = getProp(\"position\");\n    self.parent = element.parentNode;\n    self.x = getProp(\"x\");\n    self.y = getProp(\"y\");\n    self.scaleX = cache.scaleX;\n    self.scaleY = cache.scaleY;\n    self.rotation = getProp(\"rotation\");\n    self.skewX = getProp(\"skewX\");\n    self.opacity = getProp(\"opacity\");\n    self.width = bbox ? bbox.width : _closestTenth(getProp(\"width\", \"px\"), 0.04); // round up to the closest 0.1 so that text doesn't wrap.\n\n    self.height = bbox ? bbox.height : _closestTenth(getProp(\"height\", \"px\"), 0.04);\n    props && _recordProps(self, _memoizedProps[props] || _memoizeProps(props));\n    self.ctm = element.getCTM && element.nodeName.toLowerCase() === \"svg\" && (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getCTM)(element).inverse();\n    self.simple = simple || _round(m.a) === 1 && !_round(m.b) && !_round(m.c) && _round(m.d) === 1; // allows us to speed through some other tasks if it's not scale/rotated\n\n    self.uncache = 0;\n  };\n\n  return ElementState;\n}();\n\nvar FlipAction = /*#__PURE__*/function () {\n  function FlipAction(vars, batch) {\n    this.vars = vars;\n    this.batch = batch;\n    this.states = [];\n    this.timeline = batch.timeline;\n  }\n\n  var _proto3 = FlipAction.prototype;\n\n  _proto3.getStateById = function getStateById(id) {\n    var i = this.states.length;\n\n    while (i--) {\n      if (this.states[i].idLookup[id]) {\n        return this.states[i];\n      }\n    }\n  };\n\n  _proto3.kill = function kill() {\n    this.batch.remove(this);\n  };\n\n  return FlipAction;\n}();\n\nvar FlipBatch = /*#__PURE__*/function () {\n  function FlipBatch(id) {\n    this.id = id;\n    this.actions = [];\n    this._kill = [];\n    this._final = [];\n    this._abs = [];\n    this._run = [];\n    this.data = {};\n    this.state = new FlipState();\n    this.timeline = gsap.timeline();\n  }\n\n  var _proto4 = FlipBatch.prototype;\n\n  _proto4.add = function add(config) {\n    var result = this.actions.filter(function (action) {\n      return action.vars === config;\n    });\n\n    if (result.length) {\n      return result[0];\n    }\n\n    result = new FlipAction(typeof config === \"function\" ? {\n      animate: config\n    } : config, this);\n    this.actions.push(result);\n    return result;\n  };\n\n  _proto4.remove = function remove(action) {\n    var i = this.actions.indexOf(action);\n    i >= 0 && this.actions.splice(i, 1);\n    return this;\n  };\n\n  _proto4.getState = function getState(merge) {\n    var _this3 = this;\n\n    var prevBatch = _batch,\n        prevAction = _batchAction;\n    _batch = this;\n    this.state.clear();\n    this._kill.length = 0;\n    this.actions.forEach(function (action) {\n      if (action.vars.getState) {\n        action.states.length = 0;\n        _batchAction = action;\n        action.state = action.vars.getState(action);\n      }\n\n      merge && action.states.forEach(function (s) {\n        return _this3.state.add(s);\n      });\n    });\n    _batchAction = prevAction;\n    _batch = prevBatch;\n    this.killConflicts();\n    return this;\n  };\n\n  _proto4.animate = function animate() {\n    var _this4 = this;\n\n    var prevBatch = _batch,\n        tl = this.timeline,\n        i = this.actions.length,\n        finalStates,\n        endTime;\n    _batch = this;\n    tl.clear();\n    this._abs.length = this._final.length = this._run.length = 0;\n    this.actions.forEach(function (a) {\n      a.vars.animate && a.vars.animate(a);\n      var onEnter = a.vars.onEnter,\n          onLeave = a.vars.onLeave,\n          targets = a.targets,\n          s,\n          result;\n\n      if (targets && targets.length && (onEnter || onLeave)) {\n        s = new FlipState();\n        a.states.forEach(function (state) {\n          return s.add(state);\n        });\n        result = s.compare(Flip.getState(targets));\n        result.enter.length && onEnter && onEnter(result.enter);\n        result.leave.length && onLeave && onLeave(result.leave);\n      }\n    });\n\n    _makeCompsAbsolute(this._abs);\n\n    this._run.forEach(function (f) {\n      return f();\n    });\n\n    endTime = tl.duration();\n    finalStates = this._final.slice(0);\n    tl.add(function () {\n      if (endTime <= tl.time()) {\n        // only call if moving forward in the timeline (in case it's nested in a timeline that gets reversed)\n        finalStates.forEach(function (f) {\n          return f();\n        });\n\n        _forEachBatch(_this4, \"onComplete\");\n      }\n    });\n    _batch = prevBatch;\n\n    while (i--) {\n      this.actions[i].vars.once && this.actions[i].kill();\n    }\n\n    _forEachBatch(this, \"onStart\");\n\n    tl.restart();\n    return this;\n  };\n\n  _proto4.loadState = function loadState(done) {\n    done || (done = function done() {\n      return 0;\n    });\n    var queue = [];\n    this.actions.forEach(function (c) {\n      if (c.vars.loadState) {\n        var i,\n            f = function f(targets) {\n          targets && (c.targets = targets);\n          i = queue.indexOf(f);\n\n          if (~i) {\n            queue.splice(i, 1);\n            queue.length || done();\n          }\n        };\n\n        queue.push(f);\n        c.vars.loadState(f);\n      }\n    });\n    queue.length || done();\n    return this;\n  };\n\n  _proto4.setState = function setState() {\n    this.actions.forEach(function (c) {\n      return c.targets = c.vars.setState && c.vars.setState(c);\n    });\n    return this;\n  };\n\n  _proto4.killConflicts = function killConflicts(soft) {\n    this.state.interrupt(soft);\n\n    this._kill.forEach(function (state) {\n      return state.interrupt(soft);\n    });\n\n    return this;\n  };\n\n  _proto4.run = function run(skipGetState, merge) {\n    var _this5 = this;\n\n    if (this !== _batch) {\n      skipGetState || this.getState(merge);\n      this.loadState(function () {\n        if (!_this5._killed) {\n          _this5.setState();\n\n          _this5.animate();\n        }\n      });\n    }\n\n    return this;\n  };\n\n  _proto4.clear = function clear(stateOnly) {\n    this.state.clear();\n    stateOnly || (this.actions.length = 0);\n  };\n\n  _proto4.getStateById = function getStateById(id) {\n    var i = this.actions.length,\n        s;\n\n    while (i--) {\n      s = this.actions[i].getStateById(id);\n\n      if (s) {\n        return s;\n      }\n    }\n\n    return this.state.idLookup[id] && this.state;\n  };\n\n  _proto4.kill = function kill() {\n    this._killed = 1;\n    this.clear();\n    delete _batchLookup[this.id];\n  };\n\n  return FlipBatch;\n}();\n\nvar Flip = /*#__PURE__*/function () {\n  function Flip() {}\n\n  Flip.getState = function getState(targets, vars) {\n    var state = _parseState(targets, vars);\n\n    _batchAction && _batchAction.states.push(state);\n    vars && vars.batch && Flip.batch(vars.batch).state.add(state);\n    return state;\n  };\n\n  Flip.from = function from(state, vars) {\n    vars = vars || {};\n    \"clearProps\" in vars || (vars.clearProps = true);\n    return _fromTo(state, _parseState(vars.targets || state.targets, {\n      props: vars.props || state.props,\n      simple: vars.simple,\n      kill: !!vars.kill\n    }), vars, -1);\n  };\n\n  Flip.to = function to(state, vars) {\n    return _fromTo(state, _parseState(vars.targets || state.targets, {\n      props: vars.props || state.props,\n      simple: vars.simple,\n      kill: !!vars.kill\n    }), vars, 1);\n  };\n\n  Flip.fromTo = function fromTo(fromState, toState, vars) {\n    return _fromTo(fromState, toState, vars);\n  };\n\n  Flip.fit = function fit(fromEl, toEl, vars) {\n    var v = vars ? _copy(vars, _fitReserved) : {},\n        _ref = vars || v,\n        absolute = _ref.absolute,\n        scale = _ref.scale,\n        getVars = _ref.getVars,\n        props = _ref.props,\n        runBackwards = _ref.runBackwards,\n        onComplete = _ref.onComplete,\n        simple = _ref.simple,\n        fitChild = vars && vars.fitChild && _getEl(vars.fitChild),\n        before = _parseElementState(toEl, props, simple, fromEl),\n        after = _parseElementState(fromEl, 0, simple, before),\n        inlineProps = props ? _memoizedRemoveProps[props] : _removeProps;\n\n    props && _applyProps(v, before.props);\n\n    if (runBackwards) {\n      _recordInlineStyles(after, inlineProps);\n\n      \"immediateRender\" in v || (v.immediateRender = true);\n\n      v.onComplete = function () {\n        _applyInlineStyles(after);\n\n        onComplete && onComplete.apply(this, arguments);\n      };\n    }\n\n    absolute && _makeAbsolute(after, before);\n    v = _fit(after, before, scale || fitChild, props, fitChild, v.duration || getVars ? v : 0);\n    return getVars ? v : v.duration ? gsap.to(after.element, v) : null;\n  };\n\n  Flip.makeAbsolute = function makeAbsolute(targetsOrStates, vars) {\n    return (targetsOrStates instanceof FlipState ? targetsOrStates : new FlipState(targetsOrStates, vars)).makeAbsolute();\n  };\n\n  Flip.batch = function batch(id) {\n    id || (id = \"default\");\n    return _batchLookup[id] || (_batchLookup[id] = new FlipBatch(id));\n  };\n\n  Flip.killFlipsOf = function killFlipsOf(targets, complete) {\n    (targets instanceof FlipState ? targets.targets : _toArray(targets)).forEach(function (t) {\n      return t && _killFlip(t._flip, complete !== false ? 1 : 2);\n    });\n  };\n\n  Flip.isFlipping = function isFlipping(target) {\n    var f = Flip.getByTarget(target);\n    return !!f && f.isActive();\n  };\n\n  Flip.getByTarget = function getByTarget(target) {\n    return (_getEl(target) || _emptyObj)._flip;\n  };\n\n  Flip.getElementState = function getElementState(target, props) {\n    return new ElementState(_getEl(target), props);\n  };\n\n  Flip.convertCoordinates = function convertCoordinates(fromElement, toElement, point) {\n    var m = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(toElement, true, true).multiply((0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(fromElement));\n    return point ? m.apply(point) : m;\n  };\n\n  Flip.register = function register(core) {\n    _body = typeof document !== \"undefined\" && document.body;\n\n    if (_body) {\n      gsap = core;\n\n      (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._setDoc)(_body);\n\n      _toArray = gsap.utils.toArray;\n      var snap = gsap.utils.snap(0.1);\n\n      _closestTenth = function _closestTenth(value, add) {\n        return snap(parseFloat(value) + add);\n      };\n    }\n  };\n\n  return Flip;\n}();\nFlip.version = \"3.11.3\"; // function whenImagesLoad(el, func) {\n// \tlet pending = [],\n// \t\tonLoad = e => {\n// \t\t\tpending.splice(pending.indexOf(e.target), 1);\n// \t\t\te.target.removeEventListener(\"load\", onLoad);\n// \t\t\tpending.length || func();\n// \t\t};\n// \tgsap.utils.toArray(el.tagName.toLowerCase() === \"img\" ? el : el.querySelectorAll(\"img\")).forEach(img => img.complete || img.addEventListener(\"load\", onLoad) || pending.push(img));\n// \tpending.length || func();\n// }\n\ntypeof window !== \"undefined\" && window.gsap && window.gsap.registerPlugin(Flip);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gsap/Flip.js\n");

/***/ }),

/***/ "./node_modules/gsap/Observer.js":
/*!***************************************!*\
  !*** ./node_modules/gsap/Observer.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Observer\": () => (/* binding */ Observer),\n/* harmony export */   \"_getProxyProp\": () => (/* binding */ _getProxyProp),\n/* harmony export */   \"_getScrollFunc\": () => (/* binding */ _getScrollFunc),\n/* harmony export */   \"_getTarget\": () => (/* binding */ _getTarget),\n/* harmony export */   \"_getVelocityProp\": () => (/* binding */ _getVelocityProp),\n/* harmony export */   \"_horizontal\": () => (/* binding */ _horizontal),\n/* harmony export */   \"_isViewport\": () => (/* binding */ _isViewport),\n/* harmony export */   \"_proxies\": () => (/* binding */ _proxies),\n/* harmony export */   \"_scrollers\": () => (/* binding */ _scrollers),\n/* harmony export */   \"_vertical\": () => (/* binding */ _vertical),\n/* harmony export */   \"default\": () => (/* binding */ Observer)\n/* harmony export */ });\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*!\n * Observer 3.11.3\n * https://greensock.com\n *\n * @license Copyright 2008-2022, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _coreInitted,\n    _clamp,\n    _win,\n    _doc,\n    _docEl,\n    _body,\n    _isTouch,\n    _pointerType,\n    ScrollTrigger,\n    _root,\n    _normalizer,\n    _eventTypes,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _passThrough = function _passThrough(p) {\n  return p;\n},\n    _startup = 1,\n    _observers = [],\n    _scrollers = [],\n    _proxies = [],\n    _getTime = Date.now,\n    _bridge = function _bridge(name, value) {\n  return value;\n},\n    _integrate = function _integrate() {\n  var core = ScrollTrigger.core,\n      data = core.bridge || {},\n      scrollers = core._scrollers,\n      proxies = core._proxies;\n  scrollers.push.apply(scrollers, _scrollers);\n  proxies.push.apply(proxies, _proxies);\n  _scrollers = scrollers;\n  _proxies = proxies;\n\n  _bridge = function _bridge(name, value) {\n    return data[name](value);\n  };\n},\n    _getProxyProp = function _getProxyProp(element, property) {\n  return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];\n},\n    _isViewport = function _isViewport(el) {\n  return !!~_root.indexOf(el);\n},\n    _addListener = function _addListener(element, type, func, nonPassive, capture) {\n  return element.addEventListener(type, func, {\n    passive: !nonPassive,\n    capture: !!capture\n  });\n},\n    _removeListener = function _removeListener(element, type, func, capture) {\n  return element.removeEventListener(type, func, !!capture);\n},\n    _scrollLeft = \"scrollLeft\",\n    _scrollTop = \"scrollTop\",\n    _onScroll = function _onScroll() {\n  return _normalizer && _normalizer.isPressed || _scrollers.cache++;\n},\n    _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {\n  var cachingFunc = function cachingFunc(value) {\n    // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a \"scroll\" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when \"soft\" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)\n    if (value || value === 0) {\n      _startup && (_win.history.scrollRestoration = \"manual\"); // otherwise the new position will get overwritten by the browser onload.\n\n      var isNormalizing = _normalizer && _normalizer.isPressed;\n      value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!\n\n      f(value);\n      cachingFunc.cacheID = _scrollers.cache;\n      isNormalizing && _bridge(\"ss\", value); // set scroll (notify ScrollTrigger so it can dispatch a \"scrollStart\" event if necessary\n    } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge(\"ref\")) {\n      cachingFunc.cacheID = _scrollers.cache;\n      cachingFunc.v = f();\n    }\n\n    return cachingFunc.v + cachingFunc.offset;\n  };\n\n  cachingFunc.offset = 0;\n  return f && cachingFunc;\n},\n    _horizontal = {\n  s: _scrollLeft,\n  p: \"left\",\n  p2: \"Left\",\n  os: \"right\",\n  os2: \"Right\",\n  d: \"width\",\n  d2: \"Width\",\n  a: \"x\",\n  sc: _scrollCacheFunc(function (value) {\n    return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;\n  })\n},\n    _vertical = {\n  s: _scrollTop,\n  p: \"top\",\n  p2: \"Top\",\n  os: \"bottom\",\n  os2: \"Bottom\",\n  d: \"height\",\n  d2: \"Height\",\n  a: \"y\",\n  op: _horizontal,\n  sc: _scrollCacheFunc(function (value) {\n    return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;\n  })\n},\n    _getTarget = function _getTarget(t) {\n  return gsap.utils.toArray(t)[0] || (typeof t === \"string\" && gsap.config().nullTargetWarn !== false ? console.warn(\"Element not found:\", t) : null);\n},\n    _getScrollFunc = function _getScrollFunc(element, _ref) {\n  var s = _ref.s,\n      sc = _ref.sc;\n  // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a \".rec\" property in order to revert to that after refreshing to ensure things don't shift around.\n  _isViewport(element) && (element = _doc.scrollingElement || _docEl);\n\n  var i = _scrollers.indexOf(element),\n      offset = sc === _vertical.sc ? 1 : 2;\n\n  !~i && (i = _scrollers.push(element) - 1);\n  _scrollers[i + offset] || element.addEventListener(\"scroll\", _onScroll); // clear the cache when a scroll occurs\n\n  var prev = _scrollers[i + offset],\n      func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {\n    return arguments.length ? element[s] = value : element[s];\n  })));\n  func.target = element;\n  prev || (func.smooth = gsap.getProperty(element, \"scrollBehavior\") === \"smooth\"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.\n\n  return func;\n},\n    _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {\n  var v1 = value,\n      v2 = value,\n      t1 = _getTime(),\n      t2 = t1,\n      min = minTimeRefresh || 50,\n      dropToZeroTime = Math.max(500, min * 3),\n      update = function update(value, force) {\n    var t = _getTime();\n\n    if (force || t - t1 > min) {\n      v2 = v1;\n      v1 = value;\n      t2 = t1;\n      t1 = t;\n    } else if (useDelta) {\n      v1 += value;\n    } else {\n      // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.\n      v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);\n    }\n  },\n      reset = function reset() {\n    v2 = v1 = useDelta ? 0 : v1;\n    t2 = t1 = 0;\n  },\n      getVelocity = function getVelocity(latestValue) {\n    var tOld = t2,\n        vOld = v2,\n        t = _getTime();\n\n    (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);\n    return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;\n  };\n\n  return {\n    update: update,\n    reset: reset,\n    getVelocity: getVelocity\n  };\n},\n    _getEvent = function _getEvent(e, preventDefault) {\n  preventDefault && !e._gsapAllow && e.preventDefault();\n  return e.changedTouches ? e.changedTouches[0] : e;\n},\n    _getAbsoluteMax = function _getAbsoluteMax(a) {\n  var max = Math.max.apply(Math, a),\n      min = Math.min.apply(Math, a);\n  return Math.abs(max) >= Math.abs(min) ? max : min;\n},\n    _setScrollTrigger = function _setScrollTrigger() {\n  ScrollTrigger = gsap.core.globals().ScrollTrigger;\n  ScrollTrigger && ScrollTrigger.core && _integrate();\n},\n    _initCore = function _initCore(core) {\n  gsap = core || _getGSAP();\n\n  if (gsap && typeof document !== \"undefined\" && document.body) {\n    _win = window;\n    _doc = document;\n    _docEl = _doc.documentElement;\n    _body = _doc.body;\n    _root = [_win, _doc, _docEl, _body];\n    _clamp = gsap.utils.clamp;\n    _pointerType = \"onpointerenter\" in _body ? \"pointer\" : \"mouse\"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.\n\n    _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia(\"(hover: none), (pointer: coarse)\").matches ? 1 : \"ontouchstart\" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;\n    _eventTypes = Observer.eventTypes = (\"ontouchstart\" in _docEl ? \"touchstart,touchmove,touchcancel,touchend\" : !(\"onpointerdown\" in _docEl) ? \"mousedown,mousemove,mouseup,mouseup\" : \"pointerdown,pointermove,pointercancel,pointerup\").split(\",\");\n    setTimeout(function () {\n      return _startup = 0;\n    }, 500);\n\n    _setScrollTrigger();\n\n    _coreInitted = 1;\n  }\n\n  return _coreInitted;\n};\n\n_horizontal.op = _vertical;\n_scrollers.cache = 0;\nvar Observer = /*#__PURE__*/function () {\n  function Observer(vars) {\n    this.init(vars);\n  }\n\n  var _proto = Observer.prototype;\n\n  _proto.init = function init(vars) {\n    _coreInitted || _initCore(gsap) || console.warn(\"Please gsap.registerPlugin(Observer)\");\n    ScrollTrigger || _setScrollTrigger();\n    var tolerance = vars.tolerance,\n        dragMinimum = vars.dragMinimum,\n        type = vars.type,\n        target = vars.target,\n        lineHeight = vars.lineHeight,\n        debounce = vars.debounce,\n        preventDefault = vars.preventDefault,\n        onStop = vars.onStop,\n        onStopDelay = vars.onStopDelay,\n        ignore = vars.ignore,\n        wheelSpeed = vars.wheelSpeed,\n        event = vars.event,\n        onDragStart = vars.onDragStart,\n        onDragEnd = vars.onDragEnd,\n        onDrag = vars.onDrag,\n        onPress = vars.onPress,\n        onRelease = vars.onRelease,\n        onRight = vars.onRight,\n        onLeft = vars.onLeft,\n        onUp = vars.onUp,\n        onDown = vars.onDown,\n        onChangeX = vars.onChangeX,\n        onChangeY = vars.onChangeY,\n        onChange = vars.onChange,\n        onToggleX = vars.onToggleX,\n        onToggleY = vars.onToggleY,\n        onHover = vars.onHover,\n        onHoverEnd = vars.onHoverEnd,\n        onMove = vars.onMove,\n        ignoreCheck = vars.ignoreCheck,\n        isNormalizer = vars.isNormalizer,\n        onGestureStart = vars.onGestureStart,\n        onGestureEnd = vars.onGestureEnd,\n        onWheel = vars.onWheel,\n        onEnable = vars.onEnable,\n        onDisable = vars.onDisable,\n        onClick = vars.onClick,\n        scrollSpeed = vars.scrollSpeed,\n        capture = vars.capture,\n        allowClicks = vars.allowClicks,\n        lockAxis = vars.lockAxis,\n        onLockAxis = vars.onLockAxis;\n    this.target = target = _getTarget(target) || _docEl;\n    this.vars = vars;\n    ignore && (ignore = gsap.utils.toArray(ignore));\n    tolerance = tolerance || 1e-9;\n    dragMinimum = dragMinimum || 0;\n    wheelSpeed = wheelSpeed || 1;\n    scrollSpeed = scrollSpeed || 1;\n    type = type || \"wheel,touch,pointer\";\n    debounce = debounce !== false;\n    lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report \"normal\", so default to 22.\n\n    var id,\n        onStopDelayedCall,\n        dragged,\n        moved,\n        wheeled,\n        locked,\n        axis,\n        self = this,\n        prevDeltaX = 0,\n        prevDeltaY = 0,\n        scrollFuncX = _getScrollFunc(target, _horizontal),\n        scrollFuncY = _getScrollFunc(target, _vertical),\n        scrollX = scrollFuncX(),\n        scrollY = scrollFuncY(),\n        limitToTouch = ~type.indexOf(\"touch\") && !~type.indexOf(\"pointer\") && _eventTypes[0] === \"pointerdown\",\n        // for devices that accommodate mouse events and touch events, we need to distinguish.\n    isViewport = _isViewport(target),\n        ownerDoc = target.ownerDocument || _doc,\n        deltaX = [0, 0, 0],\n        // wheel, scroll, pointer/touch\n    deltaY = [0, 0, 0],\n        onClickTime = 0,\n        clickCapture = function clickCapture() {\n      return onClickTime = _getTime();\n    },\n        _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {\n      return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== \"touch\" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);\n    },\n        onStopFunc = function onStopFunc() {\n      self._vx.reset();\n\n      self._vy.reset();\n\n      onStopDelayedCall.pause();\n      onStop && onStop(self);\n    },\n        update = function update() {\n      var dx = self.deltaX = _getAbsoluteMax(deltaX),\n          dy = self.deltaY = _getAbsoluteMax(deltaY),\n          changedX = Math.abs(dx) >= tolerance,\n          changedY = Math.abs(dy) >= tolerance;\n\n      onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.\n\n      if (changedX) {\n        onRight && self.deltaX > 0 && onRight(self);\n        onLeft && self.deltaX < 0 && onLeft(self);\n        onChangeX && onChangeX(self);\n        onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);\n        prevDeltaX = self.deltaX;\n        deltaX[0] = deltaX[1] = deltaX[2] = 0;\n      }\n\n      if (changedY) {\n        onDown && self.deltaY > 0 && onDown(self);\n        onUp && self.deltaY < 0 && onUp(self);\n        onChangeY && onChangeY(self);\n        onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);\n        prevDeltaY = self.deltaY;\n        deltaY[0] = deltaY[1] = deltaY[2] = 0;\n      }\n\n      if (moved || dragged) {\n        onMove && onMove(self);\n\n        if (dragged) {\n          onDrag(self);\n          dragged = false;\n        }\n\n        moved = false;\n      }\n\n      locked && !(locked = false) && onLockAxis && onLockAxis(self);\n\n      if (wheeled) {\n        onWheel(self);\n        wheeled = false;\n      }\n\n      id = 0;\n    },\n        onDelta = function onDelta(x, y, index) {\n      deltaX[index] += x;\n      deltaY[index] += y;\n\n      self._vx.update(x);\n\n      self._vy.update(y);\n\n      debounce ? id || (id = requestAnimationFrame(update)) : update();\n    },\n        onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {\n      if (lockAxis && !axis) {\n        self.axis = axis = Math.abs(x) > Math.abs(y) ? \"x\" : \"y\";\n        locked = true;\n      }\n\n      if (axis !== \"y\") {\n        deltaX[2] += x;\n\n        self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.\n\n      }\n\n      if (axis !== \"x\") {\n        deltaY[2] += y;\n\n        self._vy.update(y, true);\n      }\n\n      debounce ? id || (id = requestAnimationFrame(update)) : update();\n    },\n        _onDrag = function _onDrag(e) {\n      if (_ignoreCheck(e, 1)) {\n        return;\n      }\n\n      e = _getEvent(e, preventDefault);\n      var x = e.clientX,\n          y = e.clientY,\n          dx = x - self.x,\n          dy = y - self.y,\n          isDragging = self.isDragging;\n      self.x = x;\n      self.y = y;\n\n      if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {\n        onDrag && (dragged = true);\n        isDragging || (self.isDragging = true);\n        onTouchOrPointerDelta(dx, dy);\n        isDragging || onDragStart && onDragStart(self);\n      }\n    },\n        _onPress = self.onPress = function (e) {\n      if (_ignoreCheck(e, 1)) {\n        return;\n      }\n\n      self.axis = axis = null;\n      onStopDelayedCall.pause();\n      self.isPressed = true;\n      e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.\n\n      prevDeltaX = prevDeltaY = 0;\n      self.startX = self.x = e.clientX;\n      self.startY = self.y = e.clientY;\n\n      self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.\n\n\n      self._vy.reset();\n\n      _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, preventDefault, true);\n\n      self.deltaX = self.deltaY = 0;\n      onPress && onPress(self);\n    },\n        _onRelease = function _onRelease(e) {\n      if (_ignoreCheck(e, 1)) {\n        return;\n      }\n\n      _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n\n      var wasDragging = self.isDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),\n          // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.\n      eventData = _getEvent(e);\n\n      if (!wasDragging) {\n        self._vx.reset();\n\n        self._vy.reset();\n\n        if (preventDefault && allowClicks) {\n          gsap.delayedCall(0.08, function () {\n            // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular \"click\" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the \"real\"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the \"real\" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.\n            if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {\n              if (e.target.click) {\n                //some browsers (like mobile Safari) don't properly trigger the click event\n                e.target.click();\n              } else if (ownerDoc.createEvent) {\n                var syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);\n                e.target.dispatchEvent(syntheticEvent);\n              }\n            }\n          });\n        }\n      }\n\n      self.isDragging = self.isGesturing = self.isPressed = false;\n      onStop && !isNormalizer && onStopDelayedCall.restart(true);\n      onDragEnd && wasDragging && onDragEnd(self);\n      onRelease && onRelease(self, wasDragging);\n    },\n        _onGestureStart = function _onGestureStart(e) {\n      return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);\n    },\n        _onGestureEnd = function _onGestureEnd() {\n      return (self.isGesturing = false) || onGestureEnd(self);\n    },\n        onScroll = function onScroll(e) {\n      if (_ignoreCheck(e)) {\n        return;\n      }\n\n      var x = scrollFuncX(),\n          y = scrollFuncY();\n      onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);\n      scrollX = x;\n      scrollY = y;\n      onStop && onStopDelayedCall.restart(true);\n    },\n        _onWheel = function _onWheel(e) {\n      if (_ignoreCheck(e)) {\n        return;\n      }\n\n      e = _getEvent(e, preventDefault);\n      onWheel && (wheeled = true);\n      var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;\n      onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);\n      onStop && !isNormalizer && onStopDelayedCall.restart(true);\n    },\n        _onMove = function _onMove(e) {\n      if (_ignoreCheck(e)) {\n        return;\n      }\n\n      var x = e.clientX,\n          y = e.clientY,\n          dx = x - self.x,\n          dy = y - self.y;\n      self.x = x;\n      self.y = y;\n      moved = true;\n      (dx || dy) && onTouchOrPointerDelta(dx, dy);\n    },\n        _onHover = function _onHover(e) {\n      self.event = e;\n      onHover(self);\n    },\n        _onHoverEnd = function _onHoverEnd(e) {\n      self.event = e;\n      onHoverEnd(self);\n    },\n        _onClick = function _onClick(e) {\n      return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);\n    };\n\n    onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();\n    self.deltaX = self.deltaY = 0;\n    self._vx = _getVelocityProp(0, 50, true);\n    self._vy = _getVelocityProp(0, 50, true);\n    self.scrollX = scrollFuncX;\n    self.scrollY = scrollFuncY;\n    self.isDragging = self.isGesturing = self.isPressed = false;\n\n    self.enable = function (e) {\n      if (!self.isEnabled) {\n        _addListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n\n        type.indexOf(\"scroll\") >= 0 && _addListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, preventDefault, capture);\n        type.indexOf(\"wheel\") >= 0 && _addListener(target, \"wheel\", _onWheel, preventDefault, capture);\n\n        if (type.indexOf(\"touch\") >= 0 && _isTouch || type.indexOf(\"pointer\") >= 0) {\n          _addListener(target, _eventTypes[0], _onPress, preventDefault, capture);\n\n          _addListener(ownerDoc, _eventTypes[2], _onRelease);\n\n          _addListener(ownerDoc, _eventTypes[3], _onRelease);\n\n          allowClicks && _addListener(target, \"click\", clickCapture, false, true);\n          onClick && _addListener(target, \"click\", _onClick);\n          onGestureStart && _addListener(ownerDoc, \"gesturestart\", _onGestureStart);\n          onGestureEnd && _addListener(ownerDoc, \"gestureend\", _onGestureEnd);\n          onHover && _addListener(target, _pointerType + \"enter\", _onHover);\n          onHoverEnd && _addListener(target, _pointerType + \"leave\", _onHoverEnd);\n          onMove && _addListener(target, _pointerType + \"move\", _onMove);\n        }\n\n        self.isEnabled = true;\n        e && e.type && _onPress(e);\n        onEnable && onEnable(self);\n      }\n\n      return self;\n    };\n\n    self.disable = function () {\n      if (self.isEnabled) {\n        // only remove the _onScroll listener if there aren't any others that rely on the functionality.\n        _observers.filter(function (o) {\n          return o !== self && _isViewport(o.target);\n        }).length || _removeListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n\n        if (self.isPressed) {\n          self._vx.reset();\n\n          self._vy.reset();\n\n          _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n        }\n\n        _removeListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, capture);\n\n        _removeListener(target, \"wheel\", _onWheel, capture);\n\n        _removeListener(target, _eventTypes[0], _onPress, capture);\n\n        _removeListener(ownerDoc, _eventTypes[2], _onRelease);\n\n        _removeListener(ownerDoc, _eventTypes[3], _onRelease);\n\n        _removeListener(target, \"click\", clickCapture, true);\n\n        _removeListener(target, \"click\", _onClick);\n\n        _removeListener(ownerDoc, \"gesturestart\", _onGestureStart);\n\n        _removeListener(ownerDoc, \"gestureend\", _onGestureEnd);\n\n        _removeListener(target, _pointerType + \"enter\", _onHover);\n\n        _removeListener(target, _pointerType + \"leave\", _onHoverEnd);\n\n        _removeListener(target, _pointerType + \"move\", _onMove);\n\n        self.isEnabled = self.isPressed = self.isDragging = false;\n        onDisable && onDisable(self);\n      }\n    };\n\n    self.kill = function () {\n      self.disable();\n\n      var i = _observers.indexOf(self);\n\n      i >= 0 && _observers.splice(i, 1);\n      _normalizer === self && (_normalizer = 0);\n    };\n\n    _observers.push(self);\n\n    isNormalizer && _isViewport(target) && (_normalizer = self);\n    self.enable(event);\n  };\n\n  _createClass(Observer, [{\n    key: \"velocityX\",\n    get: function get() {\n      return this._vx.getVelocity();\n    }\n  }, {\n    key: \"velocityY\",\n    get: function get() {\n      return this._vy.getVelocity();\n    }\n  }]);\n\n  return Observer;\n}();\nObserver.version = \"3.11.3\";\n\nObserver.create = function (vars) {\n  return new Observer(vars);\n};\n\nObserver.register = _initCore;\n\nObserver.getAll = function () {\n  return _observers.slice();\n};\n\nObserver.getById = function (id) {\n  return _observers.filter(function (o) {\n    return o.vars.id === id;\n  })[0];\n};\n\n_getGSAP() && gsap.registerPlugin(Observer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ3NhcC9PYnNlcnZlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLDRDQUE0QyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVEOztBQUUvUCw4REFBOEQsc0VBQXNFLDhEQUE4RDs7QUFFbE07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDs7QUFFL0Q7QUFDQSw2RkFBNkY7O0FBRTdGO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDJFQUEyRTs7QUFFM0U7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esb0ZBQW9GOztBQUVwRjtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTs7QUFFcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEZBQTRGOztBQUU1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvRkFBb0Y7O0FBRXBGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQ0FBa0M7O0FBRWxDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7O0FBRXhCO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7OztBQUd4Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi9ub2RlX21vZHVsZXMvZ3NhcC9PYnNlcnZlci5qcz8wOTY0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyohXG4gKiBPYnNlcnZlciAzLjExLjNcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjIsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgZ3NhcCxcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2NsYW1wLFxuICAgIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWwsXG4gICAgX2JvZHksXG4gICAgX2lzVG91Y2gsXG4gICAgX3BvaW50ZXJUeXBlLFxuICAgIFNjcm9sbFRyaWdnZXIsXG4gICAgX3Jvb3QsXG4gICAgX25vcm1hbGl6ZXIsXG4gICAgX2V2ZW50VHlwZXMsXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaChwKSB7XG4gIHJldHVybiBwO1xufSxcbiAgICBfc3RhcnR1cCA9IDEsXG4gICAgX29ic2VydmVycyA9IFtdLFxuICAgIF9zY3JvbGxlcnMgPSBbXSxcbiAgICBfcHJveGllcyA9IFtdLFxuICAgIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgX2JyaWRnZSA9IGZ1bmN0aW9uIF9icmlkZ2UobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufSxcbiAgICBfaW50ZWdyYXRlID0gZnVuY3Rpb24gX2ludGVncmF0ZSgpIHtcbiAgdmFyIGNvcmUgPSBTY3JvbGxUcmlnZ2VyLmNvcmUsXG4gICAgICBkYXRhID0gY29yZS5icmlkZ2UgfHwge30sXG4gICAgICBzY3JvbGxlcnMgPSBjb3JlLl9zY3JvbGxlcnMsXG4gICAgICBwcm94aWVzID0gY29yZS5fcHJveGllcztcbiAgc2Nyb2xsZXJzLnB1c2guYXBwbHkoc2Nyb2xsZXJzLCBfc2Nyb2xsZXJzKTtcbiAgcHJveGllcy5wdXNoLmFwcGx5KHByb3hpZXMsIF9wcm94aWVzKTtcbiAgX3Njcm9sbGVycyA9IHNjcm9sbGVycztcbiAgX3Byb3hpZXMgPSBwcm94aWVzO1xuXG4gIF9icmlkZ2UgPSBmdW5jdGlvbiBfYnJpZGdlKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGRhdGFbbmFtZV0odmFsdWUpO1xuICB9O1xufSxcbiAgICBfZ2V0UHJveHlQcm9wID0gZnVuY3Rpb24gX2dldFByb3h5UHJvcChlbGVtZW50LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgJiYgX3Byb3hpZXNbX3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSArIDFdW3Byb3BlcnR5XTtcbn0sXG4gICAgX2lzVmlld3BvcnQgPSBmdW5jdGlvbiBfaXNWaWV3cG9ydChlbCkge1xuICByZXR1cm4gISF+X3Jvb3QuaW5kZXhPZihlbCk7XG59LFxuICAgIF9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBub25QYXNzaXZlLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywge1xuICAgIHBhc3NpdmU6ICFub25QYXNzaXZlLFxuICAgIGNhcHR1cmU6ICEhY2FwdHVyZVxuICB9KTtcbn0sXG4gICAgX3JlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCAhIWNhcHR1cmUpO1xufSxcbiAgICBfc2Nyb2xsTGVmdCA9IFwic2Nyb2xsTGVmdFwiLFxuICAgIF9zY3JvbGxUb3AgPSBcInNjcm9sbFRvcFwiLFxuICAgIF9vblNjcm9sbCA9IGZ1bmN0aW9uIF9vblNjcm9sbCgpIHtcbiAgcmV0dXJuIF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlzUHJlc3NlZCB8fCBfc2Nyb2xsZXJzLmNhY2hlKys7XG59LFxuICAgIF9zY3JvbGxDYWNoZUZ1bmMgPSBmdW5jdGlvbiBfc2Nyb2xsQ2FjaGVGdW5jKGYsIGRvTm90Q2FjaGUpIHtcbiAgdmFyIGNhY2hpbmdGdW5jID0gZnVuY3Rpb24gY2FjaGluZ0Z1bmModmFsdWUpIHtcbiAgICAvLyBzaW5jZSByZWFkaW5nIHRoZSBzY3JvbGxUb3Avc2Nyb2xsTGVmdC9wYWdlT2Zmc2V0WS9wYWdlT2Zmc2V0WCBjYW4gdHJpZ2dlciBhIGxheW91dCwgdGhpcyBmdW5jdGlvbiBhbGxvd3MgdXMgdG8gY2FjaGUgdGhlIHZhbHVlIHNvIGl0IG9ubHkgZ2V0cyByZWFkIGZyZXNoIGFmdGVyIGEgXCJzY3JvbGxcIiBldmVudCBmaXJlcyAob3Igd2hpbGUgd2UncmUgcmVmcmVzaGluZyBiZWNhdXNlIHRoYXQgY2FuIGxlbmd0aGVuIHRoZSBwYWdlIGFuZCBhbHRlciB0aGUgc2Nyb2xsIHBvc2l0aW9uKS4gd2hlbiBcInNvZnRcIiBpcyB0cnVlLCB0aGF0IG1lYW5zIGRvbid0IGFjdHVhbGx5IHNldCB0aGUgc2Nyb2xsLCBidXQgY2FjaGUgdGhlIG5ldyB2YWx1ZSBpbnN0ZWFkICh1c2VmdWwgaW4gU2Nyb2xsU21vb3RoZXIpXG4gICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICBfc3RhcnR1cCAmJiAoX3dpbi5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIik7IC8vIG90aGVyd2lzZSB0aGUgbmV3IHBvc2l0aW9uIHdpbGwgZ2V0IG92ZXJ3cml0dGVuIGJ5IHRoZSBicm93c2VyIG9ubG9hZC5cblxuICAgICAgdmFyIGlzTm9ybWFsaXppbmcgPSBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pc1ByZXNzZWQ7XG4gICAgICB2YWx1ZSA9IGNhY2hpbmdGdW5jLnYgPSBNYXRoLnJvdW5kKHZhbHVlKSB8fCAoX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaU9TID8gMSA6IDApOyAvL1RPRE86IGlPUyBCdWc6IGlmIHlvdSBhbGxvdyBpdCB0byBnbyB0byAwLCBTYWZhcmkgY2FuIHN0YXJ0IHRvIHJlcG9ydCBzdXBlciBzdHJhbmdlICh3aWxkbHkgaW5hY2N1cmF0ZSkgdG91Y2ggcG9zaXRpb25zIVxuXG4gICAgICBmKHZhbHVlKTtcbiAgICAgIGNhY2hpbmdGdW5jLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuICAgICAgaXNOb3JtYWxpemluZyAmJiBfYnJpZGdlKFwic3NcIiwgdmFsdWUpOyAvLyBzZXQgc2Nyb2xsIChub3RpZnkgU2Nyb2xsVHJpZ2dlciBzbyBpdCBjYW4gZGlzcGF0Y2ggYSBcInNjcm9sbFN0YXJ0XCIgZXZlbnQgaWYgbmVjZXNzYXJ5XG4gICAgfSBlbHNlIGlmIChkb05vdENhY2hlIHx8IF9zY3JvbGxlcnMuY2FjaGUgIT09IGNhY2hpbmdGdW5jLmNhY2hlSUQgfHwgX2JyaWRnZShcInJlZlwiKSkge1xuICAgICAgY2FjaGluZ0Z1bmMuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG4gICAgICBjYWNoaW5nRnVuYy52ID0gZigpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoaW5nRnVuYy52ICsgY2FjaGluZ0Z1bmMub2Zmc2V0O1xuICB9O1xuXG4gIGNhY2hpbmdGdW5jLm9mZnNldCA9IDA7XG4gIHJldHVybiBmICYmIGNhY2hpbmdGdW5jO1xufSxcbiAgICBfaG9yaXpvbnRhbCA9IHtcbiAgczogX3Njcm9sbExlZnQsXG4gIHA6IFwibGVmdFwiLFxuICBwMjogXCJMZWZ0XCIsXG4gIG9zOiBcInJpZ2h0XCIsXG4gIG9zMjogXCJSaWdodFwiLFxuICBkOiBcIndpZHRoXCIsXG4gIGQyOiBcIldpZHRoXCIsXG4gIGE6IFwieFwiLFxuICBzYzogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8odmFsdWUsIF92ZXJ0aWNhbC5zYygpKSA6IF93aW4ucGFnZVhPZmZzZXQgfHwgX2RvY1tfc2Nyb2xsTGVmdF0gfHwgX2RvY0VsW19zY3JvbGxMZWZ0XSB8fCBfYm9keVtfc2Nyb2xsTGVmdF0gfHwgMDtcbiAgfSlcbn0sXG4gICAgX3ZlcnRpY2FsID0ge1xuICBzOiBfc2Nyb2xsVG9wLFxuICBwOiBcInRvcFwiLFxuICBwMjogXCJUb3BcIixcbiAgb3M6IFwiYm90dG9tXCIsXG4gIG9zMjogXCJCb3R0b21cIixcbiAgZDogXCJoZWlnaHRcIixcbiAgZDI6IFwiSGVpZ2h0XCIsXG4gIGE6IFwieVwiLFxuICBvcDogX2hvcml6b250YWwsXG4gIHNjOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3dpbi5zY3JvbGxUbyhfaG9yaXpvbnRhbC5zYygpLCB2YWx1ZSkgOiBfd2luLnBhZ2VZT2Zmc2V0IHx8IF9kb2NbX3Njcm9sbFRvcF0gfHwgX2RvY0VsW19zY3JvbGxUb3BdIHx8IF9ib2R5W19zY3JvbGxUb3BdIHx8IDA7XG4gIH0pXG59LFxuICAgIF9nZXRUYXJnZXQgPSBmdW5jdGlvbiBfZ2V0VGFyZ2V0KHQpIHtcbiAgcmV0dXJuIGdzYXAudXRpbHMudG9BcnJheSh0KVswXSB8fCAodHlwZW9mIHQgPT09IFwic3RyaW5nXCIgJiYgZ3NhcC5jb25maWcoKS5udWxsVGFyZ2V0V2FybiAhPT0gZmFsc2UgPyBjb25zb2xlLndhcm4oXCJFbGVtZW50IG5vdCBmb3VuZDpcIiwgdCkgOiBudWxsKTtcbn0sXG4gICAgX2dldFNjcm9sbEZ1bmMgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsRnVuYyhlbGVtZW50LCBfcmVmKSB7XG4gIHZhciBzID0gX3JlZi5zLFxuICAgICAgc2MgPSBfcmVmLnNjO1xuICAvLyB3ZSBzdG9yZSB0aGUgc2Nyb2xsZXIgZnVuY3Rpb25zIGluIGFuIGFsdGVybmF0aW5nIHNlcXVlbmNlZCBBcnJheSBsaWtlIFtlbGVtZW50LCB2ZXJ0aWNhbFNjcm9sbEZ1bmMsIGhvcml6b250YWxTY3JvbGxGdW5jLCAuLi5dIHNvIHRoYXQgd2UgY2FuIG1pbmltaXplIG1lbW9yeSwgbWF4aW1pemUgcGVyZm9ybWFuY2UsIGFuZCB3ZSBhbHNvIHJlY29yZCB0aGUgbGFzdCBwb3NpdGlvbiBhcyBhIFwiLnJlY1wiIHByb3BlcnR5IGluIG9yZGVyIHRvIHJldmVydCB0byB0aGF0IGFmdGVyIHJlZnJlc2hpbmcgdG8gZW5zdXJlIHRoaW5ncyBkb24ndCBzaGlmdCBhcm91bmQuXG4gIF9pc1ZpZXdwb3J0KGVsZW1lbnQpICYmIChlbGVtZW50ID0gX2RvYy5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCk7XG5cbiAgdmFyIGkgPSBfc2Nyb2xsZXJzLmluZGV4T2YoZWxlbWVudCksXG4gICAgICBvZmZzZXQgPSBzYyA9PT0gX3ZlcnRpY2FsLnNjID8gMSA6IDI7XG5cbiAgIX5pICYmIChpID0gX3Njcm9sbGVycy5wdXNoKGVsZW1lbnQpIC0gMSk7XG4gIF9zY3JvbGxlcnNbaSArIG9mZnNldF0gfHwgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7IC8vIGNsZWFyIHRoZSBjYWNoZSB3aGVuIGEgc2Nyb2xsIG9jY3Vyc1xuXG4gIHZhciBwcmV2ID0gX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSxcbiAgICAgIGZ1bmMgPSBwcmV2IHx8IChfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdID0gX3Njcm9sbENhY2hlRnVuYyhfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHMpLCB0cnVlKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBzYyA6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBlbGVtZW50W3NdID0gdmFsdWUgOiBlbGVtZW50W3NdO1xuICB9KSkpO1xuICBmdW5jLnRhcmdldCA9IGVsZW1lbnQ7XG4gIHByZXYgfHwgKGZ1bmMuc21vb3RoID0gZ3NhcC5nZXRQcm9wZXJ0eShlbGVtZW50LCBcInNjcm9sbEJlaGF2aW9yXCIpID09PSBcInNtb290aFwiKTsgLy8gb25seSBzZXQgaXQgdGhlIGZpcnN0IHRpbWUgKGRvbid0IHJlc2V0IGV2ZXJ5IHRpbWUgYSBzY3JvbGxGdW5jIGlzIHJlcXVlc3RlZCBiZWNhdXNlIHBlcmhhcHMgaXQgaGFwcGVucyBkdXJpbmcgYSByZWZyZXNoKCkgd2hlbiBpdCdzIGRpc2FibGVkIGluIFNjcm9sbFRyaWdnZXIuXG5cbiAgcmV0dXJuIGZ1bmM7XG59LFxuICAgIF9nZXRWZWxvY2l0eVByb3AgPSBmdW5jdGlvbiBfZ2V0VmVsb2NpdHlQcm9wKHZhbHVlLCBtaW5UaW1lUmVmcmVzaCwgdXNlRGVsdGEpIHtcbiAgdmFyIHYxID0gdmFsdWUsXG4gICAgICB2MiA9IHZhbHVlLFxuICAgICAgdDEgPSBfZ2V0VGltZSgpLFxuICAgICAgdDIgPSB0MSxcbiAgICAgIG1pbiA9IG1pblRpbWVSZWZyZXNoIHx8IDUwLFxuICAgICAgZHJvcFRvWmVyb1RpbWUgPSBNYXRoLm1heCg1MDAsIG1pbiAqIDMpLFxuICAgICAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHZhbHVlLCBmb3JjZSkge1xuICAgIHZhciB0ID0gX2dldFRpbWUoKTtcblxuICAgIGlmIChmb3JjZSB8fCB0IC0gdDEgPiBtaW4pIHtcbiAgICAgIHYyID0gdjE7XG4gICAgICB2MSA9IHZhbHVlO1xuICAgICAgdDIgPSB0MTtcbiAgICAgIHQxID0gdDtcbiAgICB9IGVsc2UgaWYgKHVzZURlbHRhKSB7XG4gICAgICB2MSArPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm90IHRvdGFsbHkgbmVjZXNzYXJ5LCBidXQgbWFrZXMgaXQgYSBiaXQgbW9yZSBhY2N1cmF0ZSBieSBhZGp1c3RpbmcgdGhlIHYxIHZhbHVlIGFjY29yZGluZyB0byB0aGUgbmV3IHNsb3BlLiBUaGlzIHdheSB3ZSdyZSBub3QganVzdCBpZ25vcmluZyB0aGUgaW5jb21pbmcgZGF0YS4gUmVtb3ZpbmcgZm9yIG5vdyBiZWNhdXNlIGl0IGRvZXNuJ3Qgc2VlbSB0byBtYWtlIG11Y2ggcHJhY3RpY2FsIGRpZmZlcmVuY2UgYW5kIGl0J3MgcHJvYmFibHkgbm90IHdvcnRoIHRoZSBrYi5cbiAgICAgIHYxID0gdjIgKyAodmFsdWUgLSB2MikgLyAodCAtIHQyKSAqICh0MSAtIHQyKTtcbiAgICB9XG4gIH0sXG4gICAgICByZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHYyID0gdjEgPSB1c2VEZWx0YSA/IDAgOiB2MTtcbiAgICB0MiA9IHQxID0gMDtcbiAgfSxcbiAgICAgIGdldFZlbG9jaXR5ID0gZnVuY3Rpb24gZ2V0VmVsb2NpdHkobGF0ZXN0VmFsdWUpIHtcbiAgICB2YXIgdE9sZCA9IHQyLFxuICAgICAgICB2T2xkID0gdjIsXG4gICAgICAgIHQgPSBfZ2V0VGltZSgpO1xuXG4gICAgKGxhdGVzdFZhbHVlIHx8IGxhdGVzdFZhbHVlID09PSAwKSAmJiBsYXRlc3RWYWx1ZSAhPT0gdjEgJiYgdXBkYXRlKGxhdGVzdFZhbHVlKTtcbiAgICByZXR1cm4gdDEgPT09IHQyIHx8IHQgLSB0MiA+IGRyb3BUb1plcm9UaW1lID8gMCA6ICh2MSArICh1c2VEZWx0YSA/IHZPbGQgOiAtdk9sZCkpIC8gKCh1c2VEZWx0YSA/IHQgOiB0MSkgLSB0T2xkKSAqIDEwMDA7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICByZXNldDogcmVzZXQsXG4gICAgZ2V0VmVsb2NpdHk6IGdldFZlbG9jaXR5XG4gIH07XG59LFxuICAgIF9nZXRFdmVudCA9IGZ1bmN0aW9uIF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCkge1xuICBwcmV2ZW50RGVmYXVsdCAmJiAhZS5fZ3NhcEFsbG93ICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgcmV0dXJuIGUuY2hhbmdlZFRvdWNoZXMgPyBlLmNoYW5nZWRUb3VjaGVzWzBdIDogZTtcbn0sXG4gICAgX2dldEFic29sdXRlTWF4ID0gZnVuY3Rpb24gX2dldEFic29sdXRlTWF4KGEpIHtcbiAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGEpLFxuICAgICAgbWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgYSk7XG4gIHJldHVybiBNYXRoLmFicyhtYXgpID49IE1hdGguYWJzKG1pbikgPyBtYXggOiBtaW47XG59LFxuICAgIF9zZXRTY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3NldFNjcm9sbFRyaWdnZXIoKSB7XG4gIFNjcm9sbFRyaWdnZXIgPSBnc2FwLmNvcmUuZ2xvYmFscygpLlNjcm9sbFRyaWdnZXI7XG4gIFNjcm9sbFRyaWdnZXIgJiYgU2Nyb2xsVHJpZ2dlci5jb3JlICYmIF9pbnRlZ3JhdGUoKTtcbn0sXG4gICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKGNvcmUpIHtcbiAgZ3NhcCA9IGNvcmUgfHwgX2dldEdTQVAoKTtcblxuICBpZiAoZ3NhcCAmJiB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQuYm9keSkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IGRvY3VtZW50O1xuICAgIF9kb2NFbCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF9ib2R5ID0gX2RvYy5ib2R5O1xuICAgIF9yb290ID0gW193aW4sIF9kb2MsIF9kb2NFbCwgX2JvZHldO1xuICAgIF9jbGFtcCA9IGdzYXAudXRpbHMuY2xhbXA7XG4gICAgX3BvaW50ZXJUeXBlID0gXCJvbnBvaW50ZXJlbnRlclwiIGluIF9ib2R5ID8gXCJwb2ludGVyXCIgOiBcIm1vdXNlXCI7IC8vIGlzVG91Y2ggaXMgMCBpZiBubyB0b3VjaCwgMSBpZiBPTkxZIHRvdWNoLCBhbmQgMiBpZiBpdCBjYW4gYWNjb21tb2RhdGUgdG91Y2ggYnV0IGFsc28gb3RoZXIgdHlwZXMgbGlrZSBtb3VzZS9wb2ludGVyLlxuXG4gICAgX2lzVG91Y2ggPSBPYnNlcnZlci5pc1RvdWNoID0gX3dpbi5tYXRjaE1lZGlhICYmIF93aW4ubWF0Y2hNZWRpYShcIihob3Zlcjogbm9uZSksIChwb2ludGVyOiBjb2Fyc2UpXCIpLm1hdGNoZXMgPyAxIDogXCJvbnRvdWNoc3RhcnRcIiBpbiBfd2luIHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwID8gMiA6IDA7XG4gICAgX2V2ZW50VHlwZXMgPSBPYnNlcnZlci5ldmVudFR5cGVzID0gKFwib250b3VjaHN0YXJ0XCIgaW4gX2RvY0VsID8gXCJ0b3VjaHN0YXJ0LHRvdWNobW92ZSx0b3VjaGNhbmNlbCx0b3VjaGVuZFwiIDogIShcIm9ucG9pbnRlcmRvd25cIiBpbiBfZG9jRWwpID8gXCJtb3VzZWRvd24sbW91c2Vtb3ZlLG1vdXNldXAsbW91c2V1cFwiIDogXCJwb2ludGVyZG93bixwb2ludGVybW92ZSxwb2ludGVyY2FuY2VsLHBvaW50ZXJ1cFwiKS5zcGxpdChcIixcIik7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3N0YXJ0dXAgPSAwO1xuICAgIH0sIDUwMCk7XG5cbiAgICBfc2V0U2Nyb2xsVHJpZ2dlcigpO1xuXG4gICAgX2NvcmVJbml0dGVkID0gMTtcbiAgfVxuXG4gIHJldHVybiBfY29yZUluaXR0ZWQ7XG59O1xuXG5faG9yaXpvbnRhbC5vcCA9IF92ZXJ0aWNhbDtcbl9zY3JvbGxlcnMuY2FjaGUgPSAwO1xuZXhwb3J0IHZhciBPYnNlcnZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE9ic2VydmVyKHZhcnMpIHtcbiAgICB0aGlzLmluaXQodmFycyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT2JzZXJ2ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCh2YXJzKSB7XG4gICAgX2NvcmVJbml0dGVkIHx8IF9pbml0Q29yZShnc2FwKSB8fCBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcilcIik7XG4gICAgU2Nyb2xsVHJpZ2dlciB8fCBfc2V0U2Nyb2xsVHJpZ2dlcigpO1xuICAgIHZhciB0b2xlcmFuY2UgPSB2YXJzLnRvbGVyYW5jZSxcbiAgICAgICAgZHJhZ01pbmltdW0gPSB2YXJzLmRyYWdNaW5pbXVtLFxuICAgICAgICB0eXBlID0gdmFycy50eXBlLFxuICAgICAgICB0YXJnZXQgPSB2YXJzLnRhcmdldCxcbiAgICAgICAgbGluZUhlaWdodCA9IHZhcnMubGluZUhlaWdodCxcbiAgICAgICAgZGVib3VuY2UgPSB2YXJzLmRlYm91bmNlLFxuICAgICAgICBwcmV2ZW50RGVmYXVsdCA9IHZhcnMucHJldmVudERlZmF1bHQsXG4gICAgICAgIG9uU3RvcCA9IHZhcnMub25TdG9wLFxuICAgICAgICBvblN0b3BEZWxheSA9IHZhcnMub25TdG9wRGVsYXksXG4gICAgICAgIGlnbm9yZSA9IHZhcnMuaWdub3JlLFxuICAgICAgICB3aGVlbFNwZWVkID0gdmFycy53aGVlbFNwZWVkLFxuICAgICAgICBldmVudCA9IHZhcnMuZXZlbnQsXG4gICAgICAgIG9uRHJhZ1N0YXJ0ID0gdmFycy5vbkRyYWdTdGFydCxcbiAgICAgICAgb25EcmFnRW5kID0gdmFycy5vbkRyYWdFbmQsXG4gICAgICAgIG9uRHJhZyA9IHZhcnMub25EcmFnLFxuICAgICAgICBvblByZXNzID0gdmFycy5vblByZXNzLFxuICAgICAgICBvblJlbGVhc2UgPSB2YXJzLm9uUmVsZWFzZSxcbiAgICAgICAgb25SaWdodCA9IHZhcnMub25SaWdodCxcbiAgICAgICAgb25MZWZ0ID0gdmFycy5vbkxlZnQsXG4gICAgICAgIG9uVXAgPSB2YXJzLm9uVXAsXG4gICAgICAgIG9uRG93biA9IHZhcnMub25Eb3duLFxuICAgICAgICBvbkNoYW5nZVggPSB2YXJzLm9uQ2hhbmdlWCxcbiAgICAgICAgb25DaGFuZ2VZID0gdmFycy5vbkNoYW5nZVksXG4gICAgICAgIG9uQ2hhbmdlID0gdmFycy5vbkNoYW5nZSxcbiAgICAgICAgb25Ub2dnbGVYID0gdmFycy5vblRvZ2dsZVgsXG4gICAgICAgIG9uVG9nZ2xlWSA9IHZhcnMub25Ub2dnbGVZLFxuICAgICAgICBvbkhvdmVyID0gdmFycy5vbkhvdmVyLFxuICAgICAgICBvbkhvdmVyRW5kID0gdmFycy5vbkhvdmVyRW5kLFxuICAgICAgICBvbk1vdmUgPSB2YXJzLm9uTW92ZSxcbiAgICAgICAgaWdub3JlQ2hlY2sgPSB2YXJzLmlnbm9yZUNoZWNrLFxuICAgICAgICBpc05vcm1hbGl6ZXIgPSB2YXJzLmlzTm9ybWFsaXplcixcbiAgICAgICAgb25HZXN0dXJlU3RhcnQgPSB2YXJzLm9uR2VzdHVyZVN0YXJ0LFxuICAgICAgICBvbkdlc3R1cmVFbmQgPSB2YXJzLm9uR2VzdHVyZUVuZCxcbiAgICAgICAgb25XaGVlbCA9IHZhcnMub25XaGVlbCxcbiAgICAgICAgb25FbmFibGUgPSB2YXJzLm9uRW5hYmxlLFxuICAgICAgICBvbkRpc2FibGUgPSB2YXJzLm9uRGlzYWJsZSxcbiAgICAgICAgb25DbGljayA9IHZhcnMub25DbGljayxcbiAgICAgICAgc2Nyb2xsU3BlZWQgPSB2YXJzLnNjcm9sbFNwZWVkLFxuICAgICAgICBjYXB0dXJlID0gdmFycy5jYXB0dXJlLFxuICAgICAgICBhbGxvd0NsaWNrcyA9IHZhcnMuYWxsb3dDbGlja3MsXG4gICAgICAgIGxvY2tBeGlzID0gdmFycy5sb2NrQXhpcyxcbiAgICAgICAgb25Mb2NrQXhpcyA9IHZhcnMub25Mb2NrQXhpcztcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldCA9IF9nZXRUYXJnZXQodGFyZ2V0KSB8fCBfZG9jRWw7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICBpZ25vcmUgJiYgKGlnbm9yZSA9IGdzYXAudXRpbHMudG9BcnJheShpZ25vcmUpKTtcbiAgICB0b2xlcmFuY2UgPSB0b2xlcmFuY2UgfHwgMWUtOTtcbiAgICBkcmFnTWluaW11bSA9IGRyYWdNaW5pbXVtIHx8IDA7XG4gICAgd2hlZWxTcGVlZCA9IHdoZWVsU3BlZWQgfHwgMTtcbiAgICBzY3JvbGxTcGVlZCA9IHNjcm9sbFNwZWVkIHx8IDE7XG4gICAgdHlwZSA9IHR5cGUgfHwgXCJ3aGVlbCx0b3VjaCxwb2ludGVyXCI7XG4gICAgZGVib3VuY2UgPSBkZWJvdW5jZSAhPT0gZmFsc2U7XG4gICAgbGluZUhlaWdodCB8fCAobGluZUhlaWdodCA9IHBhcnNlRmxvYXQoX3dpbi5nZXRDb21wdXRlZFN0eWxlKF9ib2R5KS5saW5lSGVpZ2h0KSB8fCAyMik7IC8vIG5vdGU6IGJyb3dzZXIgbWF5IHJlcG9ydCBcIm5vcm1hbFwiLCBzbyBkZWZhdWx0IHRvIDIyLlxuXG4gICAgdmFyIGlkLFxuICAgICAgICBvblN0b3BEZWxheWVkQ2FsbCxcbiAgICAgICAgZHJhZ2dlZCxcbiAgICAgICAgbW92ZWQsXG4gICAgICAgIHdoZWVsZWQsXG4gICAgICAgIGxvY2tlZCxcbiAgICAgICAgYXhpcyxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIHByZXZEZWx0YVggPSAwLFxuICAgICAgICBwcmV2RGVsdGFZID0gMCxcbiAgICAgICAgc2Nyb2xsRnVuY1ggPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF9ob3Jpem9udGFsKSxcbiAgICAgICAgc2Nyb2xsRnVuY1kgPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF92ZXJ0aWNhbCksXG4gICAgICAgIHNjcm9sbFggPSBzY3JvbGxGdW5jWCgpLFxuICAgICAgICBzY3JvbGxZID0gc2Nyb2xsRnVuY1koKSxcbiAgICAgICAgbGltaXRUb1RvdWNoID0gfnR5cGUuaW5kZXhPZihcInRvdWNoXCIpICYmICF+dHlwZS5pbmRleE9mKFwicG9pbnRlclwiKSAmJiBfZXZlbnRUeXBlc1swXSA9PT0gXCJwb2ludGVyZG93blwiLFxuICAgICAgICAvLyBmb3IgZGV2aWNlcyB0aGF0IGFjY29tbW9kYXRlIG1vdXNlIGV2ZW50cyBhbmQgdG91Y2ggZXZlbnRzLCB3ZSBuZWVkIHRvIGRpc3Rpbmd1aXNoLlxuICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydCh0YXJnZXQpLFxuICAgICAgICBvd25lckRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50IHx8IF9kb2MsXG4gICAgICAgIGRlbHRhWCA9IFswLCAwLCAwXSxcbiAgICAgICAgLy8gd2hlZWwsIHNjcm9sbCwgcG9pbnRlci90b3VjaFxuICAgIGRlbHRhWSA9IFswLCAwLCAwXSxcbiAgICAgICAgb25DbGlja1RpbWUgPSAwLFxuICAgICAgICBjbGlja0NhcHR1cmUgPSBmdW5jdGlvbiBjbGlja0NhcHR1cmUoKSB7XG4gICAgICByZXR1cm4gb25DbGlja1RpbWUgPSBfZ2V0VGltZSgpO1xuICAgIH0sXG4gICAgICAgIF9pZ25vcmVDaGVjayA9IGZ1bmN0aW9uIF9pZ25vcmVDaGVjayhlLCBpc1BvaW50ZXJPclRvdWNoKSB7XG4gICAgICByZXR1cm4gKHNlbGYuZXZlbnQgPSBlKSAmJiBpZ25vcmUgJiYgfmlnbm9yZS5pbmRleE9mKGUudGFyZ2V0KSB8fCBpc1BvaW50ZXJPclRvdWNoICYmIGxpbWl0VG9Ub3VjaCAmJiBlLnBvaW50ZXJUeXBlICE9PSBcInRvdWNoXCIgfHwgaWdub3JlQ2hlY2sgJiYgaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCk7XG4gICAgfSxcbiAgICAgICAgb25TdG9wRnVuYyA9IGZ1bmN0aW9uIG9uU3RvcEZ1bmMoKSB7XG4gICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICBvblN0b3BEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgb25TdG9wICYmIG9uU3RvcChzZWxmKTtcbiAgICB9LFxuICAgICAgICB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB2YXIgZHggPSBzZWxmLmRlbHRhWCA9IF9nZXRBYnNvbHV0ZU1heChkZWx0YVgpLFxuICAgICAgICAgIGR5ID0gc2VsZi5kZWx0YVkgPSBfZ2V0QWJzb2x1dGVNYXgoZGVsdGFZKSxcbiAgICAgICAgICBjaGFuZ2VkWCA9IE1hdGguYWJzKGR4KSA+PSB0b2xlcmFuY2UsXG4gICAgICAgICAgY2hhbmdlZFkgPSBNYXRoLmFicyhkeSkgPj0gdG9sZXJhbmNlO1xuXG4gICAgICBvbkNoYW5nZSAmJiAoY2hhbmdlZFggfHwgY2hhbmdlZFkpICYmIG9uQ2hhbmdlKHNlbGYsIGR4LCBkeSwgZGVsdGFYLCBkZWx0YVkpOyAvLyBpbiBTY3JvbGxUcmlnZ2VyLm5vcm1hbGl6ZVNjcm9sbCgpLCB3ZSBuZWVkIHRvIGtub3cgaWYgaXQgd2FzIHRvdWNoL3BvaW50ZXIgc28gd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIGRlbHRhWC9kZWx0YVkgQXJyYXlzIGJlZm9yZSB3ZSBjbGVhciB0aGVtIG91dC5cblxuICAgICAgaWYgKGNoYW5nZWRYKSB7XG4gICAgICAgIG9uUmlnaHQgJiYgc2VsZi5kZWx0YVggPiAwICYmIG9uUmlnaHQoc2VsZik7XG4gICAgICAgIG9uTGVmdCAmJiBzZWxmLmRlbHRhWCA8IDAgJiYgb25MZWZ0KHNlbGYpO1xuICAgICAgICBvbkNoYW5nZVggJiYgb25DaGFuZ2VYKHNlbGYpO1xuICAgICAgICBvblRvZ2dsZVggJiYgc2VsZi5kZWx0YVggPCAwICE9PSBwcmV2RGVsdGFYIDwgMCAmJiBvblRvZ2dsZVgoc2VsZik7XG4gICAgICAgIHByZXZEZWx0YVggPSBzZWxmLmRlbHRhWDtcbiAgICAgICAgZGVsdGFYWzBdID0gZGVsdGFYWzFdID0gZGVsdGFYWzJdID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWRZKSB7XG4gICAgICAgIG9uRG93biAmJiBzZWxmLmRlbHRhWSA+IDAgJiYgb25Eb3duKHNlbGYpO1xuICAgICAgICBvblVwICYmIHNlbGYuZGVsdGFZIDwgMCAmJiBvblVwKHNlbGYpO1xuICAgICAgICBvbkNoYW5nZVkgJiYgb25DaGFuZ2VZKHNlbGYpO1xuICAgICAgICBvblRvZ2dsZVkgJiYgc2VsZi5kZWx0YVkgPCAwICE9PSBwcmV2RGVsdGFZIDwgMCAmJiBvblRvZ2dsZVkoc2VsZik7XG4gICAgICAgIHByZXZEZWx0YVkgPSBzZWxmLmRlbHRhWTtcbiAgICAgICAgZGVsdGFZWzBdID0gZGVsdGFZWzFdID0gZGVsdGFZWzJdID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdmVkIHx8IGRyYWdnZWQpIHtcbiAgICAgICAgb25Nb3ZlICYmIG9uTW92ZShzZWxmKTtcblxuICAgICAgICBpZiAoZHJhZ2dlZCkge1xuICAgICAgICAgIG9uRHJhZyhzZWxmKTtcbiAgICAgICAgICBkcmFnZ2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBtb3ZlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsb2NrZWQgJiYgIShsb2NrZWQgPSBmYWxzZSkgJiYgb25Mb2NrQXhpcyAmJiBvbkxvY2tBeGlzKHNlbGYpO1xuXG4gICAgICBpZiAod2hlZWxlZCkge1xuICAgICAgICBvbldoZWVsKHNlbGYpO1xuICAgICAgICB3aGVlbGVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlkID0gMDtcbiAgICB9LFxuICAgICAgICBvbkRlbHRhID0gZnVuY3Rpb24gb25EZWx0YSh4LCB5LCBpbmRleCkge1xuICAgICAgZGVsdGFYW2luZGV4XSArPSB4O1xuICAgICAgZGVsdGFZW2luZGV4XSArPSB5O1xuXG4gICAgICBzZWxmLl92eC51cGRhdGUoeCk7XG5cbiAgICAgIHNlbGYuX3Z5LnVwZGF0ZSh5KTtcblxuICAgICAgZGVib3VuY2UgPyBpZCB8fCAoaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKSkgOiB1cGRhdGUoKTtcbiAgICB9LFxuICAgICAgICBvblRvdWNoT3JQb2ludGVyRGVsdGEgPSBmdW5jdGlvbiBvblRvdWNoT3JQb2ludGVyRGVsdGEoeCwgeSkge1xuICAgICAgaWYgKGxvY2tBeGlzICYmICFheGlzKSB7XG4gICAgICAgIHNlbGYuYXhpcyA9IGF4aXMgPSBNYXRoLmFicyh4KSA+IE1hdGguYWJzKHkpID8gXCJ4XCIgOiBcInlcIjtcbiAgICAgICAgbG9ja2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF4aXMgIT09IFwieVwiKSB7XG4gICAgICAgIGRlbHRhWFsyXSArPSB4O1xuXG4gICAgICAgIHNlbGYuX3Z4LnVwZGF0ZSh4LCB0cnVlKTsgLy8gdXBkYXRlIHRoZSB2ZWxvY2l0eSBhcyBmcmVxdWVudGx5IGFzIHBvc3NpYmxlIGluc3RlYWQgb2YgaW4gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBzbyB0aGF0IHZlcnkgcXVpY2sgdG91Y2gtc2Nyb2xscyAoZmxpY2tzKSBmZWVsIG5hdHVyYWwuIElmIGl0J3MgdGhlIG1vdXNlL3RvdWNoL3BvaW50ZXIsIGZvcmNlIGl0IHNvIHRoYXQgd2UgZ2V0IHNuYXBweS9hY2N1cmF0ZSBtb21lbnR1bSBzY3JvbGwuXG5cbiAgICAgIH1cblxuICAgICAgaWYgKGF4aXMgIT09IFwieFwiKSB7XG4gICAgICAgIGRlbHRhWVsyXSArPSB5O1xuXG4gICAgICAgIHNlbGYuX3Z5LnVwZGF0ZSh5LCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZGVib3VuY2UgPyBpZCB8fCAoaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKSkgOiB1cGRhdGUoKTtcbiAgICB9LFxuICAgICAgICBfb25EcmFnID0gZnVuY3Rpb24gX29uRHJhZyhlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZSA9IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICB2YXIgeCA9IGUuY2xpZW50WCxcbiAgICAgICAgICB5ID0gZS5jbGllbnRZLFxuICAgICAgICAgIGR4ID0geCAtIHNlbGYueCxcbiAgICAgICAgICBkeSA9IHkgLSBzZWxmLnksXG4gICAgICAgICAgaXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZztcbiAgICAgIHNlbGYueCA9IHg7XG4gICAgICBzZWxmLnkgPSB5O1xuXG4gICAgICBpZiAoaXNEcmFnZ2luZyB8fCBNYXRoLmFicyhzZWxmLnN0YXJ0WCAtIHgpID49IGRyYWdNaW5pbXVtIHx8IE1hdGguYWJzKHNlbGYuc3RhcnRZIC0geSkgPj0gZHJhZ01pbmltdW0pIHtcbiAgICAgICAgb25EcmFnICYmIChkcmFnZ2VkID0gdHJ1ZSk7XG4gICAgICAgIGlzRHJhZ2dpbmcgfHwgKHNlbGYuaXNEcmFnZ2luZyA9IHRydWUpO1xuICAgICAgICBvblRvdWNoT3JQb2ludGVyRGVsdGEoZHgsIGR5KTtcbiAgICAgICAgaXNEcmFnZ2luZyB8fCBvbkRyYWdTdGFydCAmJiBvbkRyYWdTdGFydChzZWxmKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICBfb25QcmVzcyA9IHNlbGYub25QcmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5heGlzID0gYXhpcyA9IG51bGw7XG4gICAgICBvblN0b3BEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgc2VsZi5pc1ByZXNzZWQgPSB0cnVlO1xuICAgICAgZSA9IF9nZXRFdmVudChlKTsgLy8gbm90ZTogbWF5IG5lZWQgdG8gcHJldmVudERlZmF1bHQoPykgV29uJ3Qgc2lkZS1zY3JvbGwgb24gaU9TIFNhZmFyaSBpZiB3ZSBkbywgdGhvdWdoLlxuXG4gICAgICBwcmV2RGVsdGFYID0gcHJldkRlbHRhWSA9IDA7XG4gICAgICBzZWxmLnN0YXJ0WCA9IHNlbGYueCA9IGUuY2xpZW50WDtcbiAgICAgIHNlbGYuc3RhcnRZID0gc2VsZi55ID0gZS5jbGllbnRZO1xuXG4gICAgICBzZWxmLl92eC5yZXNldCgpOyAvLyBvdGhlcndpc2UgdGhlIHQyIG1heSBiZSBzdGFsZSBpZiB0aGUgdXNlciB0b3VjaGVzIGFuZCBmbGlja3Mgc3VwZXIgZmFzdCBhbmQgcmVsZWFzZXMgaW4gbGVzcyB0aGFuIDIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHRpY2tzLCBjYXVzaW5nIHZlbG9jaXR5IHRvIGJlIDAuXG5cblxuICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgX2FkZExpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgcHJldmVudERlZmF1bHQsIHRydWUpO1xuXG4gICAgICBzZWxmLmRlbHRhWCA9IHNlbGYuZGVsdGFZID0gMDtcbiAgICAgIG9uUHJlc3MgJiYgb25QcmVzcyhzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25SZWxlYXNlID0gZnVuY3Rpb24gX29uUmVsZWFzZShlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgdHJ1ZSk7XG5cbiAgICAgIHZhciB3YXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZyAmJiAoTWF0aC5hYnMoc2VsZi54IC0gc2VsZi5zdGFydFgpID4gMyB8fCBNYXRoLmFicyhzZWxmLnkgLSBzZWxmLnN0YXJ0WSkgPiAzKSxcbiAgICAgICAgICAvLyBzb21lIHRvdWNoIGRldmljZXMgbmVlZCBzb21lIHdpZ2dsZSByb29tIGluIHRlcm1zIG9mIHNlbnNpbmcgY2xpY2tzIC0gdGhlIGZpbmdlciBtYXkgbW92ZSBhIGZldyBwaXhlbHMuXG4gICAgICBldmVudERhdGEgPSBfZ2V0RXZlbnQoZSk7XG5cbiAgICAgIGlmICghd2FzRHJhZ2dpbmcpIHtcbiAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCAmJiBhbGxvd0NsaWNrcykge1xuICAgICAgICAgIGdzYXAuZGVsYXllZENhbGwoMC4wOCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB3b24ndCB0cnVzdCBzY3JpcHQtZ2VuZXJhdGVkIGNsaWNrcywgc28gaWYgdGhlIHVzZXIgdHJpZXMgdG8gY2xpY2sgb24gYSB2aWRlbyB0byBwbGF5IGl0LCBmb3IgZXhhbXBsZSwgaXQgc2ltcGx5IHdvbid0IHdvcmsuIFNpbmNlIGEgcmVndWxhciBcImNsaWNrXCIgZXZlbnQgd2lsbCBtb3N0IGxpa2VseSBiZSBnZW5lcmF0ZWQgYW55d2F5IChvbmUgdGhhdCBoYXMgaXRzIGlzVHJ1c3RlZCBmbGFnIHNldCB0byB0cnVlKSwgd2UgbXVzdCBzbGlnaHRseSBkZWxheSBvdXIgc2NyaXB0LWdlbmVyYXRlZCBjbGljayBzbyB0aGF0IHRoZSBcInJlYWxcIi90cnVzdGVkIG9uZSBpcyBwcmlvcml0aXplZC4gUmVtZW1iZXIsIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZSBldmVudHMgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgd2Ugc3VwcHJlc3MgYWxsIGJ1dCB0aGUgZmlyc3Qgb25lLiBTb21lIGJyb3dzZXJzIGRvbid0IGV2ZW4gdHJpZ2dlciB0aGUgXCJyZWFsXCIgb25lIGF0IGFsbCwgc28gb3VyIHN5bnRoZXRpYyBvbmUgaXMgYSBzYWZldHkgdmFsdmUgdGhhdCBlbnN1cmVzIHRoYXQgbm8gbWF0dGVyIHdoYXQsIGEgY2xpY2sgZXZlbnQgZG9lcyBnZXQgZGlzcGF0Y2hlZC5cbiAgICAgICAgICAgIGlmIChfZ2V0VGltZSgpIC0gb25DbGlja1RpbWUgPiAzMDAgJiYgIWUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xpY2spIHtcbiAgICAgICAgICAgICAgICAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgbW9iaWxlIFNhZmFyaSkgZG9uJ3QgcHJvcGVybHkgdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGljaygpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG93bmVyRG9jLmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gb3duZXJEb2MuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFdmVudC5pbml0TW91c2VFdmVudChcImNsaWNrXCIsIHRydWUsIHRydWUsIF93aW4sIDEsIGV2ZW50RGF0YS5zY3JlZW5YLCBldmVudERhdGEuc2NyZWVuWSwgZXZlbnREYXRhLmNsaWVudFgsIGV2ZW50RGF0YS5jbGllbnRZLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuZGlzcGF0Y2hFdmVudChzeW50aGV0aWNFdmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcbiAgICAgIG9uU3RvcCAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICBvbkRyYWdFbmQgJiYgd2FzRHJhZ2dpbmcgJiYgb25EcmFnRW5kKHNlbGYpO1xuICAgICAgb25SZWxlYXNlICYmIG9uUmVsZWFzZShzZWxmLCB3YXNEcmFnZ2luZyk7XG4gICAgfSxcbiAgICAgICAgX29uR2VzdHVyZVN0YXJ0ID0gZnVuY3Rpb24gX29uR2VzdHVyZVN0YXJ0KGUpIHtcbiAgICAgIHJldHVybiBlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDEgJiYgKHNlbGYuaXNHZXN0dXJpbmcgPSB0cnVlKSAmJiBvbkdlc3R1cmVTdGFydChlLCBzZWxmLmlzRHJhZ2dpbmcpO1xuICAgIH0sXG4gICAgICAgIF9vbkdlc3R1cmVFbmQgPSBmdW5jdGlvbiBfb25HZXN0dXJlRW5kKCkge1xuICAgICAgcmV0dXJuIChzZWxmLmlzR2VzdHVyaW5nID0gZmFsc2UpIHx8IG9uR2VzdHVyZUVuZChzZWxmKTtcbiAgICB9LFxuICAgICAgICBvblNjcm9sbCA9IGZ1bmN0aW9uIG9uU2Nyb2xsKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgeCA9IHNjcm9sbEZ1bmNYKCksXG4gICAgICAgICAgeSA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgICBvbkRlbHRhKCh4IC0gc2Nyb2xsWCkgKiBzY3JvbGxTcGVlZCwgKHkgLSBzY3JvbGxZKSAqIHNjcm9sbFNwZWVkLCAxKTtcbiAgICAgIHNjcm9sbFggPSB4O1xuICAgICAgc2Nyb2xsWSA9IHk7XG4gICAgICBvblN0b3AgJiYgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICB9LFxuICAgICAgICBfb25XaGVlbCA9IGZ1bmN0aW9uIF9vbldoZWVsKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlID0gX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgIG9uV2hlZWwgJiYgKHdoZWVsZWQgPSB0cnVlKTtcbiAgICAgIHZhciBtdWx0aXBsaWVyID0gKGUuZGVsdGFNb2RlID09PSAxID8gbGluZUhlaWdodCA6IGUuZGVsdGFNb2RlID09PSAyID8gX3dpbi5pbm5lckhlaWdodCA6IDEpICogd2hlZWxTcGVlZDtcbiAgICAgIG9uRGVsdGEoZS5kZWx0YVggKiBtdWx0aXBsaWVyLCBlLmRlbHRhWSAqIG11bHRpcGxpZXIsIDApO1xuICAgICAgb25TdG9wICYmICFpc05vcm1hbGl6ZXIgJiYgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICB9LFxuICAgICAgICBfb25Nb3ZlID0gZnVuY3Rpb24gX29uTW92ZShlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHggPSBlLmNsaWVudFgsXG4gICAgICAgICAgeSA9IGUuY2xpZW50WSxcbiAgICAgICAgICBkeCA9IHggLSBzZWxmLngsXG4gICAgICAgICAgZHkgPSB5IC0gc2VsZi55O1xuICAgICAgc2VsZi54ID0geDtcbiAgICAgIHNlbGYueSA9IHk7XG4gICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAoZHggfHwgZHkpICYmIG9uVG91Y2hPclBvaW50ZXJEZWx0YShkeCwgZHkpO1xuICAgIH0sXG4gICAgICAgIF9vbkhvdmVyID0gZnVuY3Rpb24gX29uSG92ZXIoZSkge1xuICAgICAgc2VsZi5ldmVudCA9IGU7XG4gICAgICBvbkhvdmVyKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIF9vbkhvdmVyRW5kID0gZnVuY3Rpb24gX29uSG92ZXJFbmQoZSkge1xuICAgICAgc2VsZi5ldmVudCA9IGU7XG4gICAgICBvbkhvdmVyRW5kKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIF9vbkNsaWNrID0gZnVuY3Rpb24gX29uQ2xpY2soZSkge1xuICAgICAgcmV0dXJuIF9pZ25vcmVDaGVjayhlKSB8fCBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpICYmIG9uQ2xpY2soc2VsZik7XG4gICAgfTtcblxuICAgIG9uU3RvcERlbGF5ZWRDYWxsID0gc2VsZi5fZGMgPSBnc2FwLmRlbGF5ZWRDYWxsKG9uU3RvcERlbGF5IHx8IDAuMjUsIG9uU3RvcEZ1bmMpLnBhdXNlKCk7XG4gICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgc2VsZi5fdnggPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICBzZWxmLl92eSA9IF9nZXRWZWxvY2l0eVByb3AoMCwgNTAsIHRydWUpO1xuICAgIHNlbGYuc2Nyb2xsWCA9IHNjcm9sbEZ1bmNYO1xuICAgIHNlbGYuc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZO1xuICAgIHNlbGYuaXNEcmFnZ2luZyA9IHNlbGYuaXNHZXN0dXJpbmcgPSBzZWxmLmlzUHJlc3NlZCA9IGZhbHNlO1xuXG4gICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFzZWxmLmlzRW5hYmxlZCkge1xuICAgICAgICBfYWRkTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgIHR5cGUuaW5kZXhPZihcInNjcm9sbFwiKSA+PSAwICYmIF9hZGRMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIG9uU2Nyb2xsLCBwcmV2ZW50RGVmYXVsdCwgY2FwdHVyZSk7XG4gICAgICAgIHR5cGUuaW5kZXhPZihcIndoZWVsXCIpID49IDAgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJ3aGVlbFwiLCBfb25XaGVlbCwgcHJldmVudERlZmF1bHQsIGNhcHR1cmUpO1xuXG4gICAgICAgIGlmICh0eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSA+PSAwICYmIF9pc1RvdWNoIHx8IHR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgPj0gMCkge1xuICAgICAgICAgIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9ldmVudFR5cGVzWzBdLCBfb25QcmVzcywgcHJldmVudERlZmF1bHQsIGNhcHR1cmUpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1syXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzNdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICAgIGFsbG93Q2xpY2tzICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgY2xpY2tDYXB0dXJlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgb25DbGljayAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIF9vbkNsaWNrKTtcbiAgICAgICAgICBvbkdlc3R1cmVTdGFydCAmJiBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZXN0YXJ0XCIsIF9vbkdlc3R1cmVTdGFydCk7XG4gICAgICAgICAgb25HZXN0dXJlRW5kICYmIF9hZGRMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlZW5kXCIsIF9vbkdlc3R1cmVFbmQpO1xuICAgICAgICAgIG9uSG92ZXIgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJlbnRlclwiLCBfb25Ib3Zlcik7XG4gICAgICAgICAgb25Ib3ZlckVuZCAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImxlYXZlXCIsIF9vbkhvdmVyRW5kKTtcbiAgICAgICAgICBvbk1vdmUgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJtb3ZlXCIsIF9vbk1vdmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICBlICYmIGUudHlwZSAmJiBfb25QcmVzcyhlKTtcbiAgICAgICAgb25FbmFibGUgJiYgb25FbmFibGUoc2VsZik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH07XG5cbiAgICBzZWxmLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5pc0VuYWJsZWQpIHtcbiAgICAgICAgLy8gb25seSByZW1vdmUgdGhlIF9vblNjcm9sbCBsaXN0ZW5lciBpZiB0aGVyZSBhcmVuJ3QgYW55IG90aGVycyB0aGF0IHJlbHkgb24gdGhlIGZ1bmN0aW9uYWxpdHkuXG4gICAgICAgIF9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgcmV0dXJuIG8gIT09IHNlbGYgJiYgX2lzVmlld3BvcnQoby50YXJnZXQpO1xuICAgICAgICB9KS5sZW5ndGggfHwgX3JlbW92ZUxpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgICAgICBpZiAoc2VsZi5pc1ByZXNzZWQpIHtcbiAgICAgICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgb25TY3JvbGwsIGNhcHR1cmUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwid2hlZWxcIiwgX29uV2hlZWwsIGNhcHR1cmUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9ldmVudFR5cGVzWzBdLCBfb25QcmVzcywgY2FwdHVyZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1syXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1szXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBjbGlja0NhcHR1cmUsIHRydWUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgX29uQ2xpY2spO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlc3RhcnRcIiwgX29uR2VzdHVyZVN0YXJ0KTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZWVuZFwiLCBfb25HZXN0dXJlRW5kKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImVudGVyXCIsIF9vbkhvdmVyKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImxlYXZlXCIsIF9vbkhvdmVyRW5kKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcIm1vdmVcIiwgX29uTW92ZSk7XG5cbiAgICAgICAgc2VsZi5pc0VuYWJsZWQgPSBzZWxmLmlzUHJlc3NlZCA9IHNlbGYuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBvbkRpc2FibGUgJiYgb25EaXNhYmxlKHNlbGYpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmtpbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmRpc2FibGUoKTtcblxuICAgICAgdmFyIGkgPSBfb2JzZXJ2ZXJzLmluZGV4T2Yoc2VsZik7XG5cbiAgICAgIGkgPj0gMCAmJiBfb2JzZXJ2ZXJzLnNwbGljZShpLCAxKTtcbiAgICAgIF9ub3JtYWxpemVyID09PSBzZWxmICYmIChfbm9ybWFsaXplciA9IDApO1xuICAgIH07XG5cbiAgICBfb2JzZXJ2ZXJzLnB1c2goc2VsZik7XG5cbiAgICBpc05vcm1hbGl6ZXIgJiYgX2lzVmlld3BvcnQodGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIgPSBzZWxmKTtcbiAgICBzZWxmLmVuYWJsZShldmVudCk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKE9ic2VydmVyLCBbe1xuICAgIGtleTogXCJ2ZWxvY2l0eVhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92eC5nZXRWZWxvY2l0eSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2ZWxvY2l0eVlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92eS5nZXRWZWxvY2l0eSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBPYnNlcnZlcjtcbn0oKTtcbk9ic2VydmVyLnZlcnNpb24gPSBcIjMuMTEuM1wiO1xuXG5PYnNlcnZlci5jcmVhdGUgPSBmdW5jdGlvbiAodmFycykge1xuICByZXR1cm4gbmV3IE9ic2VydmVyKHZhcnMpO1xufTtcblxuT2JzZXJ2ZXIucmVnaXN0ZXIgPSBfaW5pdENvcmU7XG5cbk9ic2VydmVyLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9vYnNlcnZlcnMuc2xpY2UoKTtcbn07XG5cbk9ic2VydmVyLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIF9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8udmFycy5pZCA9PT0gaWQ7XG4gIH0pWzBdO1xufTtcblxuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKE9ic2VydmVyKTtcbmV4cG9ydCB7IE9ic2VydmVyIGFzIGRlZmF1bHQsIF9pc1ZpZXdwb3J0LCBfc2Nyb2xsZXJzLCBfZ2V0U2Nyb2xsRnVuYywgX2dldFByb3h5UHJvcCwgX3Byb3hpZXMsIF9nZXRWZWxvY2l0eVByb3AsIF92ZXJ0aWNhbCwgX2hvcml6b250YWwsIF9nZXRUYXJnZXQgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/gsap/Observer.js\n");

/***/ }),

/***/ "./node_modules/gsap/ScrollTrigger.js":
/*!********************************************!*\
  !*** ./node_modules/gsap/ScrollTrigger.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ScrollTrigger\": () => (/* binding */ ScrollTrigger),\n/* harmony export */   \"default\": () => (/* binding */ ScrollTrigger)\n/* harmony export */ });\n/* harmony import */ var _Observer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observer.js */ \"./node_modules/gsap/Observer.js\");\n/*!\n * ScrollTrigger 3.11.3\n * https://greensock.com\n *\n * @license Copyright 2008-2022, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\n\n\nvar gsap,\n    _coreInitted,\n    _win,\n    _doc,\n    _docEl,\n    _body,\n    _root,\n    _resizeDelay,\n    _toArray,\n    _clamp,\n    _time2,\n    _syncInterval,\n    _refreshing,\n    _pointerIsDown,\n    _transformProp,\n    _i,\n    _prevWidth,\n    _prevHeight,\n    _autoRefresh,\n    _sort,\n    _suppressOverwrites,\n    _ignoreResize,\n    _normalizer,\n    _ignoreMobileResize,\n    _baseScreenHeight,\n    _baseScreenWidth,\n    _fixIOSBug,\n    _context,\n    _scrollRestoration,\n    _limitCallbacks,\n    // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.\n_startup = 1,\n    _getTime = Date.now,\n    _time1 = _getTime(),\n    _lastScrollTime = 0,\n    _enabled = 0,\n    _pointerDownHandler = function _pointerDownHandler() {\n  return _pointerIsDown = 1;\n},\n    _pointerUpHandler = function _pointerUpHandler() {\n  return _pointerIsDown = 0;\n},\n    _passThrough = function _passThrough(v) {\n  return v;\n},\n    _round = function _round(value) {\n  return Math.round(value * 100000) / 100000 || 0;\n},\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _isViewport = function _isViewport(e) {\n  return !!~_root.indexOf(e);\n},\n    _getBoundsFunc = function _getBoundsFunc(element) {\n  return (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, \"getBoundingClientRect\") || (_isViewport(element) ? function () {\n    _winOffsets.width = _win.innerWidth;\n    _winOffsets.height = _win.innerHeight;\n    return _winOffsets;\n  } : function () {\n    return _getBounds(element);\n  });\n},\n    _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {\n  var d = _ref.d,\n      d2 = _ref.d2,\n      a = _ref.a;\n  return (a = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"getBoundingClientRect\")) ? function () {\n    return a()[d];\n  } : function () {\n    return (isViewport ? _win[\"inner\" + d2] : scroller[\"client\" + d2]) || 0;\n  };\n},\n    _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {\n  return !isViewport || ~_Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.indexOf(element) ? _getBoundsFunc(element) : function () {\n    return _winOffsets;\n  };\n},\n    _maxScroll = function _maxScroll(element, _ref2) {\n  var s = _ref2.s,\n      d2 = _ref2.d2,\n      d = _ref2.d,\n      a = _ref2.a;\n  return (s = \"scroll\" + d2) && (a = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - (_win[\"inner\" + d2] || _docEl[\"client\" + d2] || _body[\"client\" + d2]) : element[s] - element[\"offset\" + d2];\n},\n    _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {\n  for (var i = 0; i < _autoRefresh.length; i += 3) {\n    (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);\n  }\n},\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _isNumber = function _isNumber(value) {\n  return typeof value === \"number\";\n},\n    _isObject = function _isObject(value) {\n  return typeof value === \"object\";\n},\n    _callIfFunc = function _callIfFunc(value) {\n  return _isFunction(value) && value();\n},\n    _combineFunc = function _combineFunc(f1, f2) {\n  return function () {\n    var result1 = _callIfFunc(f1),\n        result2 = _callIfFunc(f2);\n\n    return function () {\n      _callIfFunc(result1);\n\n      _callIfFunc(result2);\n    };\n  };\n},\n    _endAnimation = function _endAnimation(animation, reversed, pause) {\n  return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();\n},\n    _callback = function _callback(self, func) {\n  if (self.enabled) {\n    var result = func(self);\n    result && result.totalTime && (self.callbackAnimation = result);\n  }\n},\n    _abs = Math.abs,\n    _scrollLeft = \"scrollLeft\",\n    _scrollTop = \"scrollTop\",\n    _left = \"left\",\n    _top = \"top\",\n    _right = \"right\",\n    _bottom = \"bottom\",\n    _width = \"width\",\n    _height = \"height\",\n    _Right = \"Right\",\n    _Left = \"Left\",\n    _Top = \"Top\",\n    _Bottom = \"Bottom\",\n    _padding = \"padding\",\n    _margin = \"margin\",\n    _Width = \"Width\",\n    _Height = \"Height\",\n    _px = \"px\",\n    _getComputedStyle = function _getComputedStyle(element) {\n  return _win.getComputedStyle(element);\n},\n    _makePositionable = function _makePositionable(element) {\n  // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative\n  var position = _getComputedStyle(element).position;\n\n  element.style.position = position === \"absolute\" || position === \"fixed\" ? position : \"relative\";\n},\n    _setDefaults = function _setDefaults(obj, defaults) {\n  for (var p in defaults) {\n    p in obj || (obj[p] = defaults[p]);\n  }\n\n  return obj;\n},\n    _getBounds = function _getBounds(element, withoutTransforms) {\n  var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== \"matrix(1, 0, 0, 1, 0, 0)\" && gsap.to(element, {\n    x: 0,\n    y: 0,\n    xPercent: 0,\n    yPercent: 0,\n    rotation: 0,\n    rotationX: 0,\n    rotationY: 0,\n    scale: 1,\n    skewX: 0,\n    skewY: 0\n  }).progress(1),\n      bounds = element.getBoundingClientRect();\n  tween && tween.progress(0).kill();\n  return bounds;\n},\n    _getSize = function _getSize(element, _ref3) {\n  var d2 = _ref3.d2;\n  return element[\"offset\" + d2] || element[\"client\" + d2] || 0;\n},\n    _getLabelRatioArray = function _getLabelRatioArray(timeline) {\n  var a = [],\n      labels = timeline.labels,\n      duration = timeline.duration(),\n      p;\n\n  for (p in labels) {\n    a.push(labels[p] / duration);\n  }\n\n  return a;\n},\n    _getClosestLabel = function _getClosestLabel(animation) {\n  return function (value) {\n    return gsap.utils.snap(_getLabelRatioArray(animation), value);\n  };\n},\n    _snapDirectional = function _snapDirectional(snapIncrementOrArray) {\n  var snap = gsap.utils.snap(snapIncrementOrArray),\n      a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {\n    return a - b;\n  });\n  return a ? function (value, direction, threshold) {\n    if (threshold === void 0) {\n      threshold = 1e-3;\n    }\n\n    var i;\n\n    if (!direction) {\n      return snap(value);\n    }\n\n    if (direction > 0) {\n      value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.\n\n      for (i = 0; i < a.length; i++) {\n        if (a[i] >= value) {\n          return a[i];\n        }\n      }\n\n      return a[i - 1];\n    } else {\n      i = a.length;\n      value += threshold;\n\n      while (i--) {\n        if (a[i] <= value) {\n          return a[i];\n        }\n      }\n    }\n\n    return a[0];\n  } : function (value, direction, threshold) {\n    if (threshold === void 0) {\n      threshold = 1e-3;\n    }\n\n    var snapped = snap(value);\n    return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);\n  };\n},\n    _getLabelAtDirection = function _getLabelAtDirection(timeline) {\n  return function (value, st) {\n    return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);\n  };\n},\n    _multiListener = function _multiListener(func, element, types, callback) {\n  return types.split(\",\").forEach(function (type) {\n    return func(element, type, callback);\n  });\n},\n    _addListener = function _addListener(element, type, func, nonPassive, capture) {\n  return element.addEventListener(type, func, {\n    passive: !nonPassive,\n    capture: !!capture\n  });\n},\n    _removeListener = function _removeListener(element, type, func, capture) {\n  return element.removeEventListener(type, func, !!capture);\n},\n    _wheelListener = function _wheelListener(func, el, scrollFunc) {\n  return scrollFunc && scrollFunc.wheelHandler && func(el, \"wheel\", scrollFunc);\n},\n    _markerDefaults = {\n  startColor: \"green\",\n  endColor: \"red\",\n  indent: 0,\n  fontSize: \"16px\",\n  fontWeight: \"normal\"\n},\n    _defaults = {\n  toggleActions: \"play\",\n  anticipatePin: 0\n},\n    _keywords = {\n  top: 0,\n  left: 0,\n  center: 0.5,\n  bottom: 1,\n  right: 1\n},\n    _offsetToPx = function _offsetToPx(value, size) {\n  if (_isString(value)) {\n    var eqIndex = value.indexOf(\"=\"),\n        relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;\n\n    if (~eqIndex) {\n      value.indexOf(\"%\") > eqIndex && (relative *= size / 100);\n      value = value.substr(0, eqIndex - 1);\n    }\n\n    value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf(\"%\") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);\n  }\n\n  return value;\n},\n    _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {\n  var startColor = _ref4.startColor,\n      endColor = _ref4.endColor,\n      fontSize = _ref4.fontSize,\n      indent = _ref4.indent,\n      fontWeight = _ref4.fontWeight;\n\n  var e = _doc.createElement(\"div\"),\n      useFixedPosition = _isViewport(container) || (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(container, \"pinType\") === \"fixed\",\n      isScroller = type.indexOf(\"scroller\") !== -1,\n      parent = useFixedPosition ? _body : container,\n      isStart = type.indexOf(\"start\") !== -1,\n      color = isStart ? startColor : endColor,\n      css = \"border-color:\" + color + \";font-size:\" + fontSize + \";color:\" + color + \";font-weight:\" + fontWeight + \";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;\";\n\n  css += \"position:\" + ((isScroller || containerAnimation) && useFixedPosition ? \"fixed;\" : \"absolute;\");\n  (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? _right : _bottom) + \":\" + (offset + parseFloat(indent)) + \"px;\");\n  matchWidthEl && (css += \"box-sizing:border-box;text-align:left;width:\" + matchWidthEl.offsetWidth + \"px;\");\n  e._isStart = isStart;\n  e.setAttribute(\"class\", \"gsap-marker-\" + type + (name ? \" marker-\" + name : \"\"));\n  e.style.cssText = css;\n  e.innerText = name || name === 0 ? type + \"-\" + name : type;\n  parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);\n  e._offset = e[\"offset\" + direction.op.d2];\n\n  _positionMarker(e, 0, direction, isStart);\n\n  return e;\n},\n    _positionMarker = function _positionMarker(marker, start, direction, flipped) {\n  var vars = {\n    display: \"block\"\n  },\n      side = direction[flipped ? \"os2\" : \"p2\"],\n      oppositeSide = direction[flipped ? \"p2\" : \"os2\"];\n  marker._isFlipped = flipped;\n  vars[direction.a + \"Percent\"] = flipped ? -100 : 0;\n  vars[direction.a] = flipped ? \"1px\" : 0;\n  vars[\"border\" + side + _Width] = 1;\n  vars[\"border\" + oppositeSide + _Width] = 0;\n  vars[direction.p] = start + \"px\";\n  gsap.set(marker, vars);\n},\n    _triggers = [],\n    _ids = {},\n    _rafID,\n    _sync = function _sync() {\n  return _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));\n},\n    _onScroll = function _onScroll() {\n  // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010\n  if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) {\n    // if the user is dragging the scrollbar, allow it.\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n\n    if (_normalizer) {\n      _rafID || (_rafID = requestAnimationFrame(_updateAll));\n    } else {\n      _updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110\n\n    }\n\n    _lastScrollTime || _dispatch(\"scrollStart\");\n    _lastScrollTime = _getTime();\n  }\n},\n    _setBaseDimensions = function _setBaseDimensions() {\n  _baseScreenWidth = _win.innerWidth;\n  _baseScreenHeight = _win.innerHeight;\n},\n    _onResize = function _onResize() {\n  _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n  !_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25) && _resizeDelay.restart(true);\n},\n    // ignore resizes triggered by refresh()\n_listeners = {},\n    _emptyArray = [],\n    _softRefresh = function _softRefresh() {\n  return _removeListener(ScrollTrigger, \"scrollEnd\", _softRefresh) || _refreshAll(true);\n},\n    _dispatch = function _dispatch(type) {\n  return _listeners[type] && _listeners[type].map(function (f) {\n    return f();\n  }) || _emptyArray;\n},\n    _savedStyles = [],\n    // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.\n_revertRecorded = function _revertRecorded(media) {\n  for (var i = 0; i < _savedStyles.length; i += 5) {\n    if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {\n      _savedStyles[i].style.cssText = _savedStyles[i + 1];\n      _savedStyles[i].getBBox && _savedStyles[i].setAttribute(\"transform\", _savedStyles[i + 2] || \"\");\n      _savedStyles[i + 3].uncache = 1;\n    }\n  }\n},\n    _revertAll = function _revertAll(kill, media) {\n  var trigger;\n\n  for (_i = 0; _i < _triggers.length; _i++) {\n    trigger = _triggers[_i];\n\n    if (trigger && (!media || trigger._ctx === media)) {\n      if (kill) {\n        trigger.kill(1);\n      } else {\n        trigger.revert(true, true);\n      }\n    }\n  }\n\n  media && _revertRecorded(media);\n  media || _dispatch(\"revert\");\n},\n    _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {\n  // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.\n  _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n  (force || !_refreshingAll) && _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {\n    return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);\n  });\n  _isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);\n},\n    _refreshingAll,\n    _refreshID = 0,\n    _queueRefreshID,\n    _queueRefreshAll = function _queueRefreshAll() {\n  // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's \"load\" or \"DOMContentLoaded\" events to trigger it.\n  if (_queueRefreshID !== _refreshID) {\n    var id = _queueRefreshID = _refreshID;\n    requestAnimationFrame(function () {\n      return id === _refreshID && _refreshAll(true);\n    });\n  }\n},\n    _refreshAll = function _refreshAll(force, skipRevert) {\n  if (_lastScrollTime && !force) {\n    _addListener(ScrollTrigger, \"scrollEnd\", _softRefresh);\n\n    return;\n  }\n\n  _refreshingAll = ScrollTrigger.isRefreshing = true;\n\n  _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {\n    return _isFunction(obj) && obj.cacheID++ && (obj.rec = obj());\n  }); // force the clearing of the cache because some browsers take a little while to dispatch the \"scroll\" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away\n\n\n  var refreshInits = _dispatch(\"refreshInit\");\n\n  _sort && ScrollTrigger.sort();\n  skipRevert || _revertAll();\n\n  _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {\n    if (_isFunction(obj)) {\n      obj.smooth && (obj.target.style.scrollBehavior = \"auto\"); // smooth scrolling interferes\n\n      obj(0);\n    }\n  });\n\n  _triggers.slice(0).forEach(function (t) {\n    return t.refresh();\n  }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.\n\n\n  _triggers.forEach(function (t, i) {\n    // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.\n    if (t._subPinOffset && t.pin) {\n      var prop = t.vars.horizontal ? \"offsetWidth\" : \"offsetHeight\",\n          original = t.pin[prop];\n      t.revert(true, 1);\n      t.adjustPinSpacing(t.pin[prop] - original);\n      t.revert(false, 1);\n    }\n  });\n\n  _triggers.forEach(function (t) {\n    return t.vars.end === \"max\" && t.setPositions(t.start, Math.max(t.start + 1, _maxScroll(t.scroller, t._dir)));\n  }); // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: \"max\".\n\n\n  refreshInits.forEach(function (result) {\n    return result && result.render && result.render(-1);\n  }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.\n\n  _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {\n    if (_isFunction(obj)) {\n      obj.smooth && requestAnimationFrame(function () {\n        return obj.target.style.scrollBehavior = \"smooth\";\n      });\n      obj.rec && obj(obj.rec);\n    }\n  });\n\n  _clearScrollMemory(_scrollRestoration, 1);\n\n  _resizeDelay.pause();\n\n  _refreshID++;\n\n  _updateAll(2);\n\n  _triggers.forEach(function (t) {\n    return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);\n  });\n\n  _refreshingAll = ScrollTrigger.isRefreshing = false;\n\n  _dispatch(\"refresh\");\n},\n    _lastScroll = 0,\n    _direction = 1,\n    _primary,\n    _updateAll = function _updateAll(force) {\n  if (!_refreshingAll || force === 2) {\n    ScrollTrigger.isUpdating = true;\n    _primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.\n\n    var l = _triggers.length,\n        time = _getTime(),\n        recordVelocity = time - _time1 >= 50,\n        scroll = l && _triggers[0].scroll();\n\n    _direction = _lastScroll > scroll ? -1 : 1;\n    _lastScroll = scroll;\n\n    if (recordVelocity) {\n      if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {\n        _lastScrollTime = 0;\n\n        _dispatch(\"scrollEnd\");\n      }\n\n      _time2 = _time1;\n      _time1 = time;\n    }\n\n    if (_direction < 0) {\n      _i = l;\n\n      while (_i-- > 0) {\n        _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n      }\n\n      _direction = 1;\n    } else {\n      for (_i = 0; _i < l; _i++) {\n        _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n      }\n    }\n\n    ScrollTrigger.isUpdating = false;\n  }\n\n  _rafID = 0;\n},\n    _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, \"display\", \"flexShrink\", \"float\", \"zIndex\", \"gridColumnStart\", \"gridColumnEnd\", \"gridRowStart\", \"gridRowEnd\", \"gridArea\", \"justifySelf\", \"alignSelf\", \"placeSelf\", \"order\"],\n    _stateProps = _propNamesToCopy.concat([_width, _height, \"boxSizing\", \"max\" + _Width, \"max\" + _Height, \"position\", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),\n    _swapPinOut = function _swapPinOut(pin, spacer, state) {\n  _setState(state);\n\n  var cache = pin._gsap;\n\n  if (cache.spacerIsNative) {\n    _setState(cache.spacerState);\n  } else if (pin._gsap.swappedIn) {\n    var parent = spacer.parentNode;\n\n    if (parent) {\n      parent.insertBefore(pin, spacer);\n      parent.removeChild(spacer);\n    }\n  }\n\n  pin._gsap.swappedIn = false;\n},\n    _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {\n  if (!pin._gsap.swappedIn) {\n    var i = _propNamesToCopy.length,\n        spacerStyle = spacer.style,\n        pinStyle = pin.style,\n        p;\n\n    while (i--) {\n      p = _propNamesToCopy[i];\n      spacerStyle[p] = cs[p];\n    }\n\n    spacerStyle.position = cs.position === \"absolute\" ? \"absolute\" : \"relative\";\n    cs.display === \"inline\" && (spacerStyle.display = \"inline-block\");\n    pinStyle[_bottom] = pinStyle[_right] = \"auto\";\n    spacerStyle.flexBasis = cs.flexBasis || \"auto\";\n    spacerStyle.overflow = \"visible\";\n    spacerStyle.boxSizing = \"border-box\";\n    spacerStyle[_width] = _getSize(pin, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal) + _px;\n    spacerStyle[_height] = _getSize(pin, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical) + _px;\n    spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = \"0\";\n\n    _setState(spacerState);\n\n    pinStyle[_width] = pinStyle[\"max\" + _Width] = cs[_width];\n    pinStyle[_height] = pinStyle[\"max\" + _Height] = cs[_height];\n    pinStyle[_padding] = cs[_padding];\n\n    if (pin.parentNode !== spacer) {\n      pin.parentNode.insertBefore(spacer, pin);\n      spacer.appendChild(pin);\n    }\n\n    pin._gsap.swappedIn = true;\n  }\n},\n    _capsExp = /([A-Z])/g,\n    _setState = function _setState(state) {\n  if (state) {\n    var style = state.t.style,\n        l = state.length,\n        i = 0,\n        p,\n        value;\n    (state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off\n\n    for (; i < l; i += 2) {\n      value = state[i + 1];\n      p = state[i];\n\n      if (value) {\n        style[p] = value;\n      } else if (style[p]) {\n        style.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n      }\n    }\n  }\n},\n    _getState = function _getState(element) {\n  // returns an Array with alternating values like [property, value, property, value] and a \"t\" property pointing to the target (element). Makes it fast and cheap.\n  var l = _stateProps.length,\n      style = element.style,\n      state = [],\n      i = 0;\n\n  for (; i < l; i++) {\n    state.push(_stateProps[i], style[_stateProps[i]]);\n  }\n\n  state.t = element;\n  return state;\n},\n    _copyState = function _copyState(state, override, omitOffsets) {\n  var result = [],\n      l = state.length,\n      i = omitOffsets ? 8 : 0,\n      // skip top, left, right, bottom if omitOffsets is true\n  p;\n\n  for (; i < l; i += 2) {\n    p = state[i];\n    result.push(p, p in override ? override[p] : state[i + 1]);\n  }\n\n  result.t = state.t;\n  return result;\n},\n    _winOffsets = {\n  left: 0,\n  top: 0\n},\n    // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition(\"#id\", \"top bottom\")\n// _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {\n// \tscroller = _getTarget(scroller || _win);\n// \tlet direction = horizontal ? _horizontal : _vertical,\n// \t\tisViewport = _isViewport(scroller);\n// \t_getSizeFunc(scroller, isViewport, direction);\n// \treturn _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);\n// },\n_parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation) {\n  _isFunction(value) && (value = value(self));\n\n  if (_isString(value) && value.substr(0, 3) === \"max\") {\n    value = scrollerMax + (value.charAt(4) === \"=\" ? _offsetToPx(\"0\" + value.substr(3), scrollerSize) : 0);\n  }\n\n  var time = containerAnimation ? containerAnimation.time() : 0,\n      p1,\n      p2,\n      element;\n  containerAnimation && containerAnimation.seek(0);\n\n  if (!_isNumber(value)) {\n    _isFunction(trigger) && (trigger = trigger(self));\n    var offsets = (value || \"0\").split(\" \"),\n        bounds,\n        localOffset,\n        globalOffset,\n        display;\n    element = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger) || _body;\n    bounds = _getBounds(element) || {};\n\n    if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === \"none\") {\n      // if display is \"none\", it won't report getBoundingClientRect() properly\n      display = element.style.display;\n      element.style.display = \"block\";\n      bounds = _getBounds(element);\n      display ? element.style.display = display : element.style.removeProperty(\"display\");\n    }\n\n    localOffset = _offsetToPx(offsets[0], bounds[direction.d]);\n    globalOffset = _offsetToPx(offsets[1] || \"0\", scrollerSize);\n    value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;\n    markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);\n    scrollerSize -= scrollerSize - globalOffset; // adjust for the marker\n  } else if (markerScroller) {\n    _positionMarker(markerScroller, scrollerSize, direction, true);\n  }\n\n  if (marker) {\n    var position = value + scrollerSize,\n        isStart = marker._isStart;\n    p1 = \"scroll\" + direction.d2;\n\n    _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1);\n\n    if (useFixedPosition) {\n      scrollerBounds = _getBounds(markerScroller);\n      useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);\n    }\n  }\n\n  if (containerAnimation && element) {\n    p1 = _getBounds(element);\n    containerAnimation.seek(scrollerMax);\n    p2 = _getBounds(element);\n    containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];\n    value = value / containerAnimation._caScrollDist * scrollerMax;\n  }\n\n  containerAnimation && containerAnimation.seek(time);\n  return containerAnimation ? value : Math.round(value);\n},\n    _prefixExp = /(webkit|moz|length|cssText|inset)/i,\n    _reparent = function _reparent(element, parent, top, left) {\n  if (element.parentNode !== parent) {\n    var style = element.style,\n        p,\n        cs;\n\n    if (parent === _body) {\n      element._stOrig = style.cssText; // record original inline styles so we can revert them later\n\n      cs = _getComputedStyle(element);\n\n      for (p in cs) {\n        // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.\n        if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === \"string\" && p !== \"0\") {\n          style[p] = cs[p];\n        }\n      }\n\n      style.top = top;\n      style.left = left;\n    } else {\n      style.cssText = element._stOrig;\n    }\n\n    gsap.core.getCache(element).uncache = 1;\n    parent.appendChild(element);\n  }\n},\n    // _mergeAnimations = animations => {\n// \tlet tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));\n// \tanimations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });\n// \ttl.smoothChildTiming = false;\n// \treturn tl;\n// },\n// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)\n_getTweenCreator = function _getTweenCreator(scroller, direction) {\n  var getScroll = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction),\n      prop = \"_scroll\" + direction.p2,\n      // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.\n  lastScroll1,\n      lastScroll2,\n      getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {\n    var tween = getTween.tween,\n        onComplete = vars.onComplete,\n        modifiers = {};\n    initialValue = initialValue || getScroll();\n    change2 = change1 && change2 || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.\n\n    change1 = change1 || scrollTo - initialValue;\n    tween && tween.kill();\n    lastScroll1 = Math.round(initialValue);\n    vars[prop] = scrollTo;\n    vars.modifiers = modifiers;\n\n    modifiers[prop] = function (value) {\n      value = Math.round(getScroll()); // round because in some [very uncommon] Windows environments, it can get reported with decimals even though it was set without.\n\n      if (value !== lastScroll1 && value !== lastScroll2 && Math.abs(value - lastScroll1) > 3 && Math.abs(value - lastScroll2) > 3) {\n        // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.\n        tween.kill();\n        getTween.tween = 0;\n      } else {\n        value = initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio;\n      }\n\n      lastScroll2 = lastScroll1;\n      return lastScroll1 = Math.round(value);\n    };\n\n    vars.onComplete = function () {\n      getTween.tween = 0;\n      onComplete && onComplete.call(tween);\n    };\n\n    tween = getTween.tween = gsap.to(scroller, vars);\n    return tween;\n  };\n\n  scroller[prop] = getScroll;\n\n  getScroll.wheelHandler = function () {\n    return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);\n  };\n\n  _addListener(scroller, \"wheel\", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like \"3 lines per scroll\") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.\n\n\n  return getTween;\n};\n\nvar ScrollTrigger = /*#__PURE__*/function () {\n  function ScrollTrigger(vars, animation) {\n    _coreInitted || ScrollTrigger.register(gsap) || console.warn(\"Please gsap.registerPlugin(ScrollTrigger)\");\n    this.init(vars, animation);\n  }\n\n  var _proto = ScrollTrigger.prototype;\n\n  _proto.init = function init(vars, animation) {\n    this.progress = this.start = 0;\n    this.vars && this.kill(true, true); // in case it's being initted again\n\n    if (!_enabled) {\n      this.update = this.refresh = this.kill = _passThrough;\n      return;\n    }\n\n    vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {\n      trigger: vars\n    } : vars, _defaults);\n\n    var _vars = vars,\n        onUpdate = _vars.onUpdate,\n        toggleClass = _vars.toggleClass,\n        id = _vars.id,\n        onToggle = _vars.onToggle,\n        onRefresh = _vars.onRefresh,\n        scrub = _vars.scrub,\n        trigger = _vars.trigger,\n        pin = _vars.pin,\n        pinSpacing = _vars.pinSpacing,\n        invalidateOnRefresh = _vars.invalidateOnRefresh,\n        anticipatePin = _vars.anticipatePin,\n        onScrubComplete = _vars.onScrubComplete,\n        onSnapComplete = _vars.onSnapComplete,\n        once = _vars.once,\n        snap = _vars.snap,\n        pinReparent = _vars.pinReparent,\n        pinSpacer = _vars.pinSpacer,\n        containerAnimation = _vars.containerAnimation,\n        fastScrollEnd = _vars.fastScrollEnd,\n        preventOverlaps = _vars.preventOverlaps,\n        direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical,\n        isToggle = !scrub && scrub !== 0,\n        scroller = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.scroller || _win),\n        scrollerCache = gsap.core.getCache(scroller),\n        isViewport = _isViewport(scroller),\n        useFixedPosition = (\"pinType\" in vars ? vars.pinType : (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"pinType\") || isViewport && \"fixed\") === \"fixed\",\n        callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],\n        toggleActions = isToggle && vars.toggleActions.split(\" \"),\n        markers = \"markers\" in vars ? vars.markers : _defaults.markers,\n        borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0,\n        self = this,\n        onRefreshInit = vars.onRefreshInit && function () {\n      return vars.onRefreshInit(self);\n    },\n        getScrollerSize = _getSizeFunc(scroller, isViewport, direction),\n        getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),\n        lastSnap = 0,\n        lastRefresh = 0,\n        scrollFunc = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction),\n        tweenTo,\n        pinCache,\n        snapFunc,\n        scroll1,\n        scroll2,\n        start,\n        end,\n        markerStart,\n        markerEnd,\n        markerStartTrigger,\n        markerEndTrigger,\n        markerVars,\n        change,\n        pinOriginalState,\n        pinActiveState,\n        pinState,\n        spacer,\n        offset,\n        pinGetter,\n        pinSetter,\n        pinStart,\n        pinChange,\n        spacingStart,\n        spacerState,\n        markerStartSetter,\n        markerEndSetter,\n        cs,\n        snap1,\n        snap2,\n        scrubTween,\n        scrubSmooth,\n        snapDurClamp,\n        snapDelayedCall,\n        prevProgress,\n        prevScroll,\n        prevAnimProgress,\n        caMarkerSetter,\n        customRevertReturn;\n\n    _context(self);\n\n    self._dir = direction;\n    anticipatePin *= 45;\n    self.scroller = scroller;\n    self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;\n    scroll1 = scrollFunc();\n    self.vars = vars;\n    animation = animation || vars.animation;\n\n    if (\"refreshPriority\" in vars) {\n      _sort = 1;\n      vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother\n    }\n\n    scrollerCache.tweenScroll = scrollerCache.tweenScroll || {\n      top: _getTweenCreator(scroller, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical),\n      left: _getTweenCreator(scroller, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal)\n    };\n    self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];\n\n    self.scrubDuration = function (value) {\n      scrubSmooth = _isNumber(value) && value;\n\n      if (!scrubSmooth) {\n        scrubTween && scrubTween.progress(1).kill();\n        scrubTween = 0;\n      } else {\n        scrubTween ? scrubTween.duration(value) : scrubTween = gsap.to(animation, {\n          ease: \"expo\",\n          totalProgress: \"+=0.001\",\n          duration: scrubSmooth,\n          paused: true,\n          onComplete: function onComplete() {\n            return onScrubComplete && onScrubComplete(self);\n          }\n        });\n      }\n    };\n\n    if (animation) {\n      animation.vars.lazy = false;\n      animation._initted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true);\n      self.animation = animation.pause();\n      animation.scrollTrigger = self;\n      self.scrubDuration(scrub);\n      snap1 = 0;\n      id || (id = animation.vars.id);\n    }\n\n    _triggers.push(self);\n\n    if (snap) {\n      // TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.\n      if (!_isObject(snap) || snap.push) {\n        snap = {\n          snapTo: snap\n        };\n      }\n\n      \"scrollBehavior\" in _body.style && gsap.set(isViewport ? [_body, _docEl] : scroller, {\n        scrollBehavior: \"auto\"\n      }); // smooth scrolling doesn't work with snap.\n\n      _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (o) {\n        return _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false);\n      }); // note: set smooth to false on both the vertical and horizontal scroll getters/setters\n\n\n      snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === \"labels\" ? _getClosestLabel(animation) : snap.snapTo === \"labelsDirectional\" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {\n        return _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction);\n      } : gsap.utils.snap(snap.snapTo);\n      snapDurClamp = snap.duration || {\n        min: 0.1,\n        max: 2\n      };\n      snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);\n      snapDelayedCall = gsap.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {\n        var scroll = scrollFunc(),\n            refreshedRecently = _getTime() - lastRefresh < 500,\n            tween = tweenTo.tween;\n\n        if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {\n          var progress = (scroll - start) / change,\n              totalProgress = animation && !isToggle ? animation.totalProgress() : progress,\n              velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime() - _time2) * 1000 || 0,\n              change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),\n              naturalEnd = progress + (snap.inertia === false ? 0 : change1),\n              endValue = _clamp(0, 1, snapFunc(naturalEnd, self)),\n              endScroll = Math.round(start + endValue * change),\n              _snap = snap,\n              onStart = _snap.onStart,\n              _onInterrupt = _snap.onInterrupt,\n              _onComplete = _snap.onComplete;\n\n          if (scroll <= end && scroll >= start && endScroll !== scroll) {\n            if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {\n              // there's an overlapping snap! So we must figure out which one is closer and let that tween live.\n              return;\n            }\n\n            if (snap.inertia === false) {\n              change1 = endValue - progress;\n            }\n\n            tweenTo(endScroll, {\n              duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),\n              ease: snap.ease || \"power3\",\n              data: _abs(endScroll - scroll),\n              // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.\n              onInterrupt: function onInterrupt() {\n                return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);\n              },\n              onComplete: function onComplete() {\n                self.update();\n                lastSnap = scrollFunc();\n                snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;\n                onSnapComplete && onSnapComplete(self);\n                _onComplete && _onComplete(self);\n              }\n            }, scroll, change1 * change, endScroll - scroll - change1 * change);\n            onStart && onStart(self, tweenTo.tween);\n          }\n        } else if (self.isActive && lastSnap !== scroll) {\n          snapDelayedCall.restart(true);\n        }\n      }).pause();\n    }\n\n    id && (_ids[id] = self);\n    trigger = self.trigger = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger || pin); // if a trigger has some kind of scroll-related effect applied that could contaminate the \"y\" or \"x\" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.\n\n    customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;\n    customRevertReturn && (customRevertReturn = customRevertReturn(self));\n    pin = pin === true ? trigger : (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pin);\n    _isString(toggleClass) && (toggleClass = {\n      targets: trigger,\n      className: toggleClass\n    });\n\n    if (pin) {\n      pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === \"flex\" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)\n\n      self.pin = pin;\n      pinCache = gsap.core.getCache(pin);\n\n      if (!pinCache.spacer) {\n        // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the \"original\" pin state after it has already been affected by another ScrollTrigger.\n        if (pinSpacer) {\n          pinSpacer = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pinSpacer);\n          pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular\n\n          pinCache.spacerIsNative = !!pinSpacer;\n          pinSpacer && (pinCache.spacerState = _getState(pinSpacer));\n        }\n\n        pinCache.spacer = spacer = pinSpacer || _doc.createElement(\"div\");\n        spacer.classList.add(\"pin-spacer\");\n        id && spacer.classList.add(\"pin-spacer-\" + id);\n        pinCache.pinState = pinOriginalState = _getState(pin);\n      } else {\n        pinOriginalState = pinCache.pinState;\n      }\n\n      vars.force3D !== false && gsap.set(pin, {\n        force3D: true\n      });\n      self.spacer = spacer = pinCache.spacer;\n      cs = _getComputedStyle(pin);\n      spacingStart = cs[pinSpacing + direction.os2];\n      pinGetter = gsap.getProperty(pin);\n      pinSetter = gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = \"hidden\"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).\n\n      _swapPinIn(pin, spacer, cs);\n\n      pinState = _getState(pin);\n    }\n\n    if (markers) {\n      markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;\n      markerStartTrigger = _createMarker(\"scroller-start\", id, scroller, direction, markerVars, 0);\n      markerEndTrigger = _createMarker(\"scroller-end\", id, scroller, direction, markerVars, 0, markerStartTrigger);\n      offset = markerStartTrigger[\"offset\" + direction.op.d2];\n\n      var content = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)((0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"content\") || scroller);\n\n      markerStart = this.markerStart = _createMarker(\"start\", id, content, direction, markerVars, offset, 0, containerAnimation);\n      markerEnd = this.markerEnd = _createMarker(\"end\", id, content, direction, markerVars, offset, 0, containerAnimation);\n      containerAnimation && (caMarkerSetter = gsap.quickSetter([markerStart, markerEnd], direction.a, _px));\n\n      if (!useFixedPosition && !(_Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.length && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"fixedMarkers\") === true)) {\n        _makePositionable(isViewport ? _body : scroller);\n\n        gsap.set([markerStartTrigger, markerEndTrigger], {\n          force3D: true\n        });\n        markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);\n        markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);\n      }\n    }\n\n    if (containerAnimation) {\n      var oldOnUpdate = containerAnimation.vars.onUpdate,\n          oldParams = containerAnimation.vars.onUpdateParams;\n      containerAnimation.eventCallback(\"onUpdate\", function () {\n        self.update(0, 0, 1);\n        oldOnUpdate && oldOnUpdate.apply(oldParams || []);\n      });\n    }\n\n    self.previous = function () {\n      return _triggers[_triggers.indexOf(self) - 1];\n    };\n\n    self.next = function () {\n      return _triggers[_triggers.indexOf(self) + 1];\n    };\n\n    self.revert = function (revert, temp) {\n      if (!temp) {\n        return self.kill(true);\n      } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()\n\n\n      var r = revert !== false || !self.enabled,\n          prevRefreshing = _refreshing;\n\n      if (r !== self.isReverted) {\n        if (r) {\n          // if (!self.scroll.rec && (_refreshing || _refreshingAll)) {\n          // \tself.scroll.rec = scrollFunc();\n          // \t_refreshingAll && scrollFunc(0);\n          // }\n          prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.\n\n          prevProgress = self.progress;\n          prevAnimProgress = animation && animation.progress();\n        }\n\n        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {\n          return m.style.display = r ? \"none\" : \"block\";\n        });\n\n        if (r) {\n          _refreshing = 1;\n          self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out\n        }\n\n        if (pin) {\n          if (r) {\n            _swapPinOut(pin, spacer, pinOriginalState);\n          } else {\n            (!pinReparent || !self.isActive) && _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);\n          }\n        }\n\n        r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.\n\n        _refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.\n\n        self.isReverted = r;\n      }\n    };\n\n    self.refresh = function (soft, force) {\n      if ((_refreshing || !self.enabled) && !force) {\n        return;\n      }\n\n      if (pin && soft && _lastScrollTime) {\n        _addListener(ScrollTrigger, \"scrollEnd\", _softRefresh);\n\n        return;\n      }\n\n      !_refreshingAll && onRefreshInit && onRefreshInit(self);\n      _refreshing = 1;\n      lastRefresh = _getTime();\n\n      if (tweenTo.tween) {\n        tweenTo.tween.kill();\n        tweenTo.tween = 0;\n      }\n\n      scrubTween && scrubTween.pause();\n      invalidateOnRefresh && animation && animation.revert({\n        kill: false\n      }).invalidate();\n      self.isReverted || self.revert(true, true);\n      self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any\n\n      var size = getScrollerSize(),\n          scrollerBounds = getScrollerOffsets(),\n          max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),\n          offset = 0,\n          otherPinOffset = 0,\n          parsedEnd = vars.end,\n          parsedEndTrigger = vars.endTrigger || trigger,\n          parsedStart = vars.start || (vars.start === 0 || !trigger ? 0 : pin ? \"0 0\" : \"0 100%\"),\n          pinnedContainer = self.pinnedContainer = vars.pinnedContainer && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.pinnedContainer),\n          triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,\n          i = triggerIndex,\n          cs,\n          bounds,\n          scroll,\n          isVertical,\n          override,\n          curTrigger,\n          curPin,\n          oppositeScroll,\n          initted,\n          revertedPins;\n\n      while (i--) {\n        // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things \"rewind\" properly.\n        curTrigger = _triggers[i];\n        curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = 1); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.\n\n        curPin = curTrigger.pin;\n\n        if (curPin && (curPin === trigger || curPin === pin) && !curTrigger.isReverted) {\n          revertedPins || (revertedPins = []);\n          revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly\n\n          curTrigger.revert(true, true);\n        }\n\n        if (curTrigger !== _triggers[i]) {\n          // in case it got removed.\n          triggerIndex--;\n          i--;\n        }\n      }\n\n      _isFunction(parsedStart) && (parsedStart = parsedStart(self));\n      start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation) || (pin ? -0.001 : 0);\n      _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));\n\n      if (_isString(parsedEnd) && !parsedEnd.indexOf(\"+=\")) {\n        if (~parsedEnd.indexOf(\" \")) {\n          parsedEnd = (_isString(parsedStart) ? parsedStart.split(\" \")[0] : \"\") + parsedEnd;\n        } else {\n          offset = _offsetToPx(parsedEnd.substr(2), size);\n          parsedEnd = _isString(parsedStart) ? parsedStart : start + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.\n\n          parsedEndTrigger = trigger;\n        }\n      }\n\n      end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? \"100% 0\" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation)) || -0.001;\n      change = end - start || (start -= 0.01) && 0.001;\n      offset = 0;\n      i = triggerIndex;\n\n      while (i--) {\n        curTrigger = _triggers[i];\n        curPin = curTrigger.pin;\n\n        if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {\n          cs = curTrigger.end - curTrigger.start;\n\n          if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && !_isNumber(parsedStart)) {\n            // numeric start values shouldn't be offset at all - treat them as absolute\n            offset += cs * (1 - curTrigger.progress);\n          }\n\n          curPin === pin && (otherPinOffset += cs);\n        }\n      }\n\n      start += offset;\n      end += offset;\n      self._pinPush = otherPinOffset;\n\n      if (markerStart && offset) {\n        // offset the markers if necessary\n        cs = {};\n        cs[direction.a] = \"+=\" + offset;\n        pinnedContainer && (cs[direction.p] = \"-=\" + scrollFunc());\n        gsap.set([markerStart, markerEnd], cs);\n      }\n\n      if (pin) {\n        cs = _getComputedStyle(pin);\n        isVertical = direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical;\n        scroll = scrollFunc(); // recalculate because the triggers can affect the scroll\n\n        pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;\n        !max && end > 1 && ((isViewport ? _body : scroller).style[\"overflow-\" + direction.a] = \"scroll\"); // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://greensock.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/\n\n        _swapPinIn(pin, spacer, cs);\n\n        pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.\n\n        bounds = _getBounds(pin, true);\n        oppositeScroll = useFixedPosition && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, isVertical ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical)();\n\n        if (pinSpacing) {\n          spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];\n          spacerState.t = spacer;\n          i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;\n          i && spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).\n\n          _setState(spacerState);\n\n          if (pinnedContainer) {\n            // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.\n            _triggers.forEach(function (t) {\n              if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {\n                t._subPinOffset = true;\n              }\n            });\n          }\n\n          useFixedPosition && scrollFunc(prevScroll);\n        }\n\n        if (useFixedPosition) {\n          override = {\n            top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,\n            left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,\n            boxSizing: \"border-box\",\n            position: \"fixed\"\n          };\n          override[_width] = override[\"max\" + _Width] = Math.ceil(bounds.width) + _px;\n          override[_height] = override[\"max\" + _Height] = Math.ceil(bounds.height) + _px;\n          override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = \"0\";\n          override[_padding] = cs[_padding];\n          override[_padding + _Top] = cs[_padding + _Top];\n          override[_padding + _Right] = cs[_padding + _Right];\n          override[_padding + _Bottom] = cs[_padding + _Bottom];\n          override[_padding + _Left] = cs[_padding + _Left];\n          pinActiveState = _copyState(pinOriginalState, override, pinReparent);\n          _refreshingAll && scrollFunc(0);\n        }\n\n        if (animation) {\n          // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.\n          initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.\n\n          _suppressOverwrites(1);\n\n          animation.render(animation.duration(), true, true);\n          pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;\n          change !== pinChange && useFixedPosition && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.\n\n          animation.render(0, true, true);\n          initted || animation.invalidate(true);\n          animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.\n\n          _suppressOverwrites(0);\n        } else {\n          pinChange = change;\n        }\n      } else if (trigger && scrollFunc() && !containerAnimation) {\n        // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()\n        bounds = trigger.parentNode;\n\n        while (bounds && bounds !== _body) {\n          if (bounds._pinOffset) {\n            start -= bounds._pinOffset;\n            end -= bounds._pinOffset;\n          }\n\n          bounds = bounds.parentNode;\n        }\n      }\n\n      revertedPins && revertedPins.forEach(function (t) {\n        return t.revert(false, true);\n      });\n      self.start = start;\n      self.end = end;\n      scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity\n\n      if (!containerAnimation && !_refreshingAll) {\n        scroll1 < prevScroll && scrollFunc(prevScroll);\n        self.scroll.rec = 0;\n      }\n\n      self.revert(false, true);\n\n      if (snapDelayedCall) {\n        lastSnap = -1;\n        self.isActive && scrollFunc(start + change * prevProgress); // just so snapping gets re-enabled, clear out any recorded last value\n\n        snapDelayedCall.restart(true);\n      }\n\n      _refreshing = 0;\n      animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().\n\n      if (prevProgress !== self.progress || containerAnimation) {\n        // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.\n        animation && !isToggle && animation.totalProgress(prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.\n\n        self.progress = (scroll1 - start) / change === prevProgress ? 0 : prevProgress;\n      }\n\n      pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange)); //\t\t\tscrubTween && scrubTween.invalidate();\n\n      onRefresh && !_refreshingAll && onRefresh(self); // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.\n    };\n\n    self.getVelocity = function () {\n      return (scrollFunc() - scroll2) / (_getTime() - _time2) * 1000 || 0;\n    };\n\n    self.endAnimation = function () {\n      _endAnimation(self.callbackAnimation);\n\n      if (animation) {\n        scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);\n      }\n    };\n\n    self.labelToScroll = function (label) {\n      return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;\n    };\n\n    self.getTrailing = function (name) {\n      var i = _triggers.indexOf(self),\n          a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);\n\n      return (_isString(name) ? a.filter(function (t) {\n        return t.vars.preventOverlaps === name;\n      }) : a).filter(function (t) {\n        return self.direction > 0 ? t.end <= start : t.start >= end;\n      });\n    };\n\n    self.update = function (reset, recordVelocity, forceFake) {\n      if (containerAnimation && !forceFake && !reset) {\n        return;\n      }\n\n      var scroll = _refreshingAll ? prevScroll : self.scroll(),\n          p = reset ? 0 : (scroll - start) / change,\n          clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,\n          prevProgress = self.progress,\n          isActive,\n          wasActive,\n          toggleState,\n          action,\n          stateChanged,\n          toggled,\n          isAtMax,\n          isTakingAction;\n\n      if (recordVelocity) {\n        scroll2 = scroll1;\n        scroll1 = containerAnimation ? scrollFunc() : scroll;\n\n        if (snap) {\n          snap2 = snap1;\n          snap1 = animation && !isToggle ? animation.totalProgress() : clipped;\n        }\n      } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).\n\n\n      anticipatePin && !clipped && pin && !_refreshing && !_startup && _lastScrollTime && start < scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin && (clipped = 0.0001);\n\n      if (clipped !== prevProgress && self.enabled) {\n        isActive = self.isActive = !!clipped && clipped < 1;\n        wasActive = !!prevProgress && prevProgress < 1;\n        toggled = isActive !== wasActive;\n        stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)\n\n        self.direction = clipped > prevProgress ? 1 : -1;\n        self.progress = clipped;\n\n        if (stateChanged && !_refreshing) {\n          toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.\n\n          if (isToggle) {\n            action = !toggled && toggleActions[toggleState + 1] !== \"none\" && toggleActions[toggleState + 1] || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the \"enter\" action, we should switch to the \"leave\" in this case (but only if one is defined)\n\n            isTakingAction = animation && (action === \"complete\" || action === \"reset\" || action in animation);\n          }\n        }\n\n        preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {\n          return t.endAnimation();\n        }));\n\n        if (!isToggle) {\n          if (scrubTween && !_refreshing && !_startup) {\n            (containerAnimation || _primary && _primary !== self) && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.\n\n            if (scrubTween.resetTo) {\n              scrubTween.resetTo(\"totalProgress\", clipped, animation._tTime / animation._tDur);\n            } else {\n              // legacy support (courtesy), before 3.10.0\n              scrubTween.vars.totalProgress = clipped;\n              scrubTween.invalidate().restart();\n            }\n          } else if (animation) {\n            animation.totalProgress(clipped, !!_refreshing);\n          }\n        }\n\n        if (pin) {\n          reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);\n\n          if (!useFixedPosition) {\n            pinSetter(_round(pinStart + pinChange * clipped));\n          } else if (stateChanged) {\n            isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)\n\n            if (pinReparent) {\n              if (!reset && (isActive || isAtMax)) {\n                var bounds = _getBounds(pin, true),\n                    _offset = scroll - start;\n\n                _reparent(pin, _body, bounds.top + (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? _offset : 0) + _px, bounds.left + (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? 0 : _offset) + _px);\n              } else {\n                _reparent(pin, spacer);\n              }\n            }\n\n            _setState(isActive || isAtMax ? pinActiveState : pinState);\n\n            pinChange !== change && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));\n          }\n        }\n\n        snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);\n        toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {\n          return el.classList[isActive || once ? \"add\" : \"remove\"](toggleClass.className);\n        }); // classes could affect positioning, so do it even if reset or refreshing is true.\n\n        onUpdate && !isToggle && !reset && onUpdate(self);\n\n        if (stateChanged && !_refreshing) {\n          if (isToggle) {\n            if (isTakingAction) {\n              if (action === \"complete\") {\n                animation.pause().totalProgress(1);\n              } else if (action === \"reset\") {\n                animation.restart(true).pause();\n              } else if (action === \"restart\") {\n                animation.restart(true);\n              } else {\n                animation[action]();\n              }\n            }\n\n            onUpdate && onUpdate(self);\n          }\n\n          if (toggled || !_limitCallbacks) {\n            // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.\n            onToggle && toggled && _callback(self, onToggle);\n            callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n            once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0); // a callback shouldn't be called again if once is true.\n\n            if (!toggled) {\n              // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order\n              toggleState = clipped === 1 ? 1 : 3;\n              callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n            }\n          }\n\n          if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {\n            _endAnimation(self.callbackAnimation);\n\n            scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === \"reverse\" ? 1 : !clipped, 1);\n          }\n        } else if (isToggle && onUpdate && !_refreshing) {\n          onUpdate(self);\n        }\n      } // update absolutely-positioned markers (only if the scroller isn't the viewport)\n\n\n      if (markerEndSetter) {\n        var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;\n        markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));\n        markerEndSetter(n);\n      }\n\n      caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));\n    };\n\n    self.enable = function (reset, refresh) {\n      if (!self.enabled) {\n        self.enabled = true;\n\n        _addListener(scroller, \"resize\", _onResize);\n\n        _addListener(isViewport ? _doc : scroller, \"scroll\", _onScroll);\n\n        onRefreshInit && _addListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\n        if (reset !== false) {\n          self.progress = prevProgress = 0;\n          scroll1 = scroll2 = lastSnap = scrollFunc();\n        }\n\n        refresh !== false && self.refresh();\n      }\n    };\n\n    self.getTween = function (snap) {\n      return snap && tweenTo ? tweenTo.tween : scrubTween;\n    };\n\n    self.setPositions = function (newStart, newEnd) {\n      // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()\n      if (pin) {\n        pinStart += newStart - start;\n        pinChange += newEnd - newStart - change;\n        pinSpacing === _padding && self.adjustPinSpacing(newEnd - newStart - change);\n      }\n\n      self.start = start = newStart;\n      self.end = end = newEnd;\n      change = newEnd - newStart;\n      self.update();\n    };\n\n    self.adjustPinSpacing = function (amount) {\n      if (spacerState) {\n        var i = spacerState.indexOf(direction.d) + 1;\n        spacerState[i] = parseFloat(spacerState[i]) + amount + _px;\n        spacerState[1] = parseFloat(spacerState[1]) + amount + _px;\n\n        _setState(spacerState);\n      }\n    };\n\n    self.disable = function (reset, allowAnimation) {\n      if (self.enabled) {\n        reset !== false && self.revert(true, true);\n        self.enabled = self.isActive = false;\n        allowAnimation || scrubTween && scrubTween.pause();\n        prevScroll = 0;\n        pinCache && (pinCache.uncache = 1);\n        onRefreshInit && _removeListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\n        if (snapDelayedCall) {\n          snapDelayedCall.pause();\n          tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);\n        }\n\n        if (!isViewport) {\n          var i = _triggers.length;\n\n          while (i--) {\n            if (_triggers[i].scroller === scroller && _triggers[i] !== self) {\n              return; //don't remove the listeners if there are still other triggers referencing it.\n            }\n          }\n\n          _removeListener(scroller, \"resize\", _onResize);\n\n          _removeListener(scroller, \"scroll\", _onScroll);\n        }\n      }\n    };\n\n    self.kill = function (revert, allowAnimation) {\n      self.disable(revert, allowAnimation);\n      scrubTween && !allowAnimation && scrubTween.kill();\n      id && delete _ids[id];\n\n      var i = _triggers.indexOf(self);\n\n      i >= 0 && _triggers.splice(i, 1);\n      i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...\n      // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.\n\n      i = 0;\n\n      _triggers.forEach(function (t) {\n        return t.scroller === self.scroller && (i = 1);\n      });\n\n      i || _refreshingAll || (self.scroll.rec = 0);\n\n      if (animation) {\n        animation.scrollTrigger = null;\n        revert && animation.revert({\n          kill: false\n        });\n        allowAnimation || animation.kill();\n      }\n\n      markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {\n        return m.parentNode && m.parentNode.removeChild(m);\n      });\n      _primary === self && (_primary = 0);\n\n      if (pin) {\n        pinCache && (pinCache.uncache = 1);\n        i = 0;\n\n        _triggers.forEach(function (t) {\n          return t.pin === pin && i++;\n        });\n\n        i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.\n      }\n\n      vars.onKill && vars.onKill(self);\n    };\n\n    self.enable(false, false);\n    customRevertReturn && customRevertReturn(self);\n    !animation || !animation.add || change ? self.refresh() : gsap.delayedCall(0.01, function () {\n      return start || end || self.refresh();\n    }) && (change = 0.01) && (start = end = 0); // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If \"change\" is defined, we know it must be re-enabling, thus we can refresh() right away.\n\n    pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()\n  };\n\n  ScrollTrigger.register = function register(core) {\n    if (!_coreInitted) {\n      gsap = core || _getGSAP();\n      _windowExists() && window.document && ScrollTrigger.enable();\n      _coreInitted = _enabled;\n    }\n\n    return _coreInitted;\n  };\n\n  ScrollTrigger.defaults = function defaults(config) {\n    if (config) {\n      for (var p in config) {\n        _defaults[p] = config[p];\n      }\n    }\n\n    return _defaults;\n  };\n\n  ScrollTrigger.disable = function disable(reset, kill) {\n    _enabled = 0;\n\n    _triggers.forEach(function (trigger) {\n      return trigger[kill ? \"kill\" : \"disable\"](reset);\n    });\n\n    _removeListener(_win, \"wheel\", _onScroll);\n\n    _removeListener(_doc, \"scroll\", _onScroll);\n\n    clearInterval(_syncInterval);\n\n    _removeListener(_doc, \"touchcancel\", _passThrough);\n\n    _removeListener(_body, \"touchstart\", _passThrough);\n\n    _multiListener(_removeListener, _doc, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n\n    _multiListener(_removeListener, _doc, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n\n    _resizeDelay.kill();\n\n    _iterateAutoRefresh(_removeListener);\n\n    for (var i = 0; i < _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3) {\n      _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);\n\n      _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);\n    }\n  };\n\n  ScrollTrigger.enable = function enable() {\n    _win = window;\n    _doc = document;\n    _docEl = _doc.documentElement;\n    _body = _doc.body;\n\n    if (gsap) {\n      _toArray = gsap.utils.toArray;\n      _clamp = gsap.utils.clamp;\n      _context = gsap.core.context || _passThrough;\n      _suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;\n      _scrollRestoration = _win.history.scrollRestoration || \"auto\";\n      gsap.core.globals(\"ScrollTrigger\", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a \"name\" property.\n\n      if (_body) {\n        _enabled = 1;\n        _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.register(gsap); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.\n\n        ScrollTrigger.isTouch = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch;\n        _fixIOSBug = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503\n\n        _addListener(_win, \"wheel\", _onScroll); // mostly for 3rd party smooth scrolling libraries.\n\n\n        _root = [_win, _doc, _docEl, _body];\n\n        if (gsap.matchMedia) {\n          ScrollTrigger.matchMedia = function (vars) {\n            var mm = gsap.matchMedia(),\n                p;\n\n            for (p in vars) {\n              mm.add(p, vars[p]);\n            }\n\n            return mm;\n          };\n\n          gsap.addEventListener(\"matchMediaInit\", function () {\n            return _revertAll();\n          });\n          gsap.addEventListener(\"matchMediaRevert\", function () {\n            return _revertRecorded();\n          });\n          gsap.addEventListener(\"matchMedia\", function () {\n            _refreshAll(0, 1);\n\n            _dispatch(\"matchMedia\");\n          });\n          gsap.matchMedia(\"(orientation: portrait)\", function () {\n            // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.\n            _setBaseDimensions();\n\n            return _setBaseDimensions;\n          });\n        } else {\n          console.warn(\"Requires GSAP 3.11.0 or later\");\n        }\n\n        _setBaseDimensions();\n\n        _addListener(_doc, \"scroll\", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!\n\n\n        var bodyStyle = _body.style,\n            border = bodyStyle.borderTopStyle,\n            AnimationProto = gsap.core.Animation.prototype,\n            bounds,\n            i;\n        AnimationProto.revert || Object.defineProperty(AnimationProto, \"revert\", {\n          value: function value() {\n            return this.time(-0.01, true);\n          }\n        }); // only for backwards compatibility (Animation.revert() was added after 3.10.4)\n\n        bodyStyle.borderTopStyle = \"solid\"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.\n\n        bounds = _getBounds(_body);\n        _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical.m = Math.round(bounds.top + _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding\n\n        _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal.m = Math.round(bounds.left + _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal.sc()) || 0;\n        border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty(\"border-top-style\"); // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.\n\n        _syncInterval = setInterval(_sync, 250);\n        gsap.delayedCall(0.5, function () {\n          return _startup = 0;\n        });\n\n        _addListener(_doc, \"touchcancel\", _passThrough); // some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document.\n\n\n        _addListener(_body, \"touchstart\", _passThrough); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\n\n        _multiListener(_addListener, _doc, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n\n        _multiListener(_addListener, _doc, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n\n        _transformProp = gsap.utils.checkPrefix(\"transform\");\n\n        _stateProps.push(_transformProp);\n\n        _coreInitted = _getTime();\n        _resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();\n        _autoRefresh = [_doc, \"visibilitychange\", function () {\n          var w = _win.innerWidth,\n              h = _win.innerHeight;\n\n          if (_doc.hidden) {\n            _prevWidth = w;\n            _prevHeight = h;\n          } else if (_prevWidth !== w || _prevHeight !== h) {\n            _onResize();\n          }\n        }, _doc, \"DOMContentLoaded\", _refreshAll, _win, \"load\", _refreshAll, _win, \"resize\", _onResize];\n\n        _iterateAutoRefresh(_addListener);\n\n        _triggers.forEach(function (trigger) {\n          return trigger.enable(0, 1);\n        });\n\n        for (i = 0; i < _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3) {\n          _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);\n\n          _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);\n        }\n      }\n    }\n  };\n\n  ScrollTrigger.config = function config(vars) {\n    \"limitCallbacks\" in vars && (_limitCallbacks = !!vars.limitCallbacks);\n    var ms = vars.syncInterval;\n    ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);\n    \"ignoreMobileResize\" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);\n\n    if (\"autoRefreshEvents\" in vars) {\n      _iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || \"none\");\n      _ignoreResize = (vars.autoRefreshEvents + \"\").indexOf(\"resize\") === -1;\n    }\n  };\n\n  ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {\n    var t = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(target),\n        i = _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.indexOf(t),\n        isViewport = _isViewport(t);\n\n    if (~i) {\n      _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.splice(i, isViewport ? 6 : 2);\n    }\n\n    if (vars) {\n      isViewport ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(t, vars);\n    }\n  };\n\n  ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {\n    _triggers.forEach(function (t) {\n      return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);\n    });\n  };\n\n  ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {\n    var bounds = (_isString(element) ? (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element) : element).getBoundingClientRect(),\n        offset = bounds[horizontal ? _width : _height] * ratio || 0;\n    return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;\n  };\n\n  ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {\n    _isString(element) && (element = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element));\n    var bounds = element.getBoundingClientRect(),\n        size = bounds[horizontal ? _width : _height],\n        offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf(\"%\") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;\n    return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;\n  };\n\n  ScrollTrigger.killAll = function killAll(allowListeners) {\n    _triggers.forEach(function (t) {\n      return t.vars.id !== \"ScrollSmoother\" && t.kill();\n    });\n\n    if (allowListeners !== true) {\n      var listeners = _listeners.killAll || [];\n      _listeners = {};\n      listeners.forEach(function (f) {\n        return f();\n      });\n    }\n  };\n\n  return ScrollTrigger;\n}();\nScrollTrigger.version = \"3.11.3\";\n\nScrollTrigger.saveStyles = function (targets) {\n  return targets ? _toArray(targets).forEach(function (target) {\n    // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]\n    if (target && target.style) {\n      var i = _savedStyles.indexOf(target);\n\n      i >= 0 && _savedStyles.splice(i, 5);\n\n      _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute(\"transform\"), gsap.core.getCache(target), _context());\n    }\n  }) : _savedStyles;\n};\n\nScrollTrigger.revert = function (soft, media) {\n  return _revertAll(!soft, media);\n};\n\nScrollTrigger.create = function (vars, animation) {\n  return new ScrollTrigger(vars, animation);\n};\n\nScrollTrigger.refresh = function (safe) {\n  return safe ? _onResize() : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);\n};\n\nScrollTrigger.update = _updateAll;\nScrollTrigger.clearScrollMemory = _clearScrollMemory;\n\nScrollTrigger.maxScroll = function (element, horizontal) {\n  return _maxScroll(element, horizontal ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n};\n\nScrollTrigger.getScrollFunc = function (element, horizontal) {\n  return (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)((0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element), horizontal ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n};\n\nScrollTrigger.getById = function (id) {\n  return _ids[id];\n};\n\nScrollTrigger.getAll = function () {\n  return _triggers.filter(function (t) {\n    return t.vars.id !== \"ScrollSmoother\";\n  });\n}; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.\n\n\nScrollTrigger.isScrolling = function () {\n  return !!_lastScrollTime;\n};\n\nScrollTrigger.snapDirectional = _snapDirectional;\n\nScrollTrigger.addEventListener = function (type, callback) {\n  var a = _listeners[type] || (_listeners[type] = []);\n  ~a.indexOf(callback) || a.push(callback);\n};\n\nScrollTrigger.removeEventListener = function (type, callback) {\n  var a = _listeners[type],\n      i = a && a.indexOf(callback);\n  i >= 0 && a.splice(i, 1);\n};\n\nScrollTrigger.batch = function (targets, vars) {\n  var result = [],\n      varsCopy = {},\n      interval = vars.interval || 0.016,\n      batchMax = vars.batchMax || 1e9,\n      proxyCallback = function proxyCallback(type, callback) {\n    var elements = [],\n        triggers = [],\n        delay = gsap.delayedCall(interval, function () {\n      callback(elements, triggers);\n      elements = [];\n      triggers = [];\n    }).pause();\n    return function (self) {\n      elements.length || delay.restart(true);\n      elements.push(self.trigger);\n      triggers.push(self);\n      batchMax <= elements.length && delay.progress(1);\n    };\n  },\n      p;\n\n  for (p in vars) {\n    varsCopy[p] = p.substr(0, 2) === \"on\" && _isFunction(vars[p]) && p !== \"onRefreshInit\" ? proxyCallback(p, vars[p]) : vars[p];\n  }\n\n  if (_isFunction(batchMax)) {\n    batchMax = batchMax();\n\n    _addListener(ScrollTrigger, \"refresh\", function () {\n      return batchMax = vars.batchMax();\n    });\n  }\n\n  _toArray(targets).forEach(function (target) {\n    var config = {};\n\n    for (p in varsCopy) {\n      config[p] = varsCopy[p];\n    }\n\n    config.trigger = target;\n    result.push(ScrollTrigger.create(config));\n  });\n\n  return result;\n}; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).\n\n\nvar _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {\n  current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);\n  return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;\n},\n    _allowNativePanning = function _allowNativePanning(target, direction) {\n  if (direction === true) {\n    target.style.removeProperty(\"touch-action\");\n  } else {\n    target.style.touchAction = direction === true ? \"auto\" : direction ? \"pan-\" + direction + (_Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch ? \" pinch-zoom\" : \"\") : \"none\"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.\n  }\n\n  target === _docEl && _allowNativePanning(_body, direction);\n},\n    _overflow = {\n  auto: 1,\n  scroll: 1\n},\n    _nestedScroll = function _nestedScroll(_ref5) {\n  var event = _ref5.event,\n      target = _ref5.target,\n      axis = _ref5.axis;\n\n  var node = (event.changedTouches ? event.changedTouches[0] : event).target,\n      cache = node._gsap || gsap.core.getCache(node),\n      time = _getTime(),\n      cs;\n\n  if (!cache._isScrollT || time - cache._isScrollT > 2000) {\n    // cache for 2 seconds to improve performance.\n    while (node && node.scrollHeight <= node.clientHeight) {\n      node = node.parentNode;\n    }\n\n    cache._isScroll = node && !_isViewport(node) && node !== target && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);\n    cache._isScrollT = time;\n  }\n\n  if (cache._isScroll || axis === \"x\") {\n    event.stopPropagation();\n    event._gsapAllow = true;\n  }\n},\n    // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor\n_inputObserver = function _inputObserver(target, type, inputs, nested) {\n  return _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.create({\n    target: target,\n    capture: true,\n    debounce: false,\n    lockAxis: true,\n    type: type,\n    onWheel: nested = nested && _nestedScroll,\n    onPress: nested,\n    onDrag: nested,\n    onScroll: nested,\n    onEnable: function onEnable() {\n      return inputs && _addListener(_doc, _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, false, true);\n    },\n    onDisable: function onDisable() {\n      return _removeListener(_doc, _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, true);\n    }\n  });\n},\n    _inputExp = /(input|label|select|textarea)/i,\n    _inputIsFocused,\n    _captureInputs = function _captureInputs(e) {\n  var isInput = _inputExp.test(e.target.tagName);\n\n  if (isInput || _inputIsFocused) {\n    e._gsapAllow = true;\n    _inputIsFocused = isInput;\n  }\n},\n    _getScrollNormalizer = function _getScrollNormalizer(vars) {\n  _isObject(vars) || (vars = {});\n  vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;\n  vars.type || (vars.type = \"wheel,touch\");\n  vars.debounce = !!vars.debounce;\n  vars.id = vars.id || \"normalizer\";\n\n  var _vars2 = vars,\n      normalizeScrollX = _vars2.normalizeScrollX,\n      momentum = _vars2.momentum,\n      allowNestedScroll = _vars2.allowNestedScroll,\n      self,\n      maxY,\n      target = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.target) || _docEl,\n      smoother = gsap.core.globals().ScrollSmoother,\n      smootherInstance = smoother && smoother.get(),\n      content = _fixIOSBug && (vars.content && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()),\n      scrollFuncY = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical),\n      scrollFuncX = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal),\n      scale = 1,\n      initialScale = (_Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth,\n      wheelRefresh = 0,\n      resolveMomentumDuration = _isFunction(momentum) ? function () {\n    return momentum(self);\n  } : function () {\n    return momentum || 2.8;\n  },\n      lastRefreshID,\n      skipTouchMove,\n      inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),\n      resumeTouchMove = function resumeTouchMove() {\n    return skipTouchMove = false;\n  },\n      scrollClampX = _passThrough,\n      scrollClampY = _passThrough,\n      updateClamps = function updateClamps() {\n    maxY = _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n    scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);\n    normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal)));\n    lastRefreshID = _refreshID;\n  },\n      removeContentOffset = function removeContentOffset() {\n    content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + \"px\";\n    content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + parseFloat(content._gsap.y) + \", 0, 1)\";\n    scrollFuncY.offset = scrollFuncY.cacheID = 0;\n  },\n      ignoreDrag = function ignoreDrag() {\n    if (skipTouchMove) {\n      requestAnimationFrame(resumeTouchMove);\n\n      var offset = _round(self.deltaY / 2),\n          scroll = scrollClampY(scrollFuncY.v - offset);\n\n      if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {\n        scrollFuncY.offset = scroll - scrollFuncY.v;\n\n        var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);\n\n        content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + y + \", 0, 1)\";\n        content._gsap.y = y + \"px\";\n        scrollFuncY.cacheID = _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache;\n\n        _updateAll();\n      }\n\n      return true;\n    }\n\n    scrollFuncY.offset && removeContentOffset();\n    skipTouchMove = true;\n  },\n      tween,\n      startScrollX,\n      startScrollY,\n      onStopDelayedCall,\n      onResize = function onResize() {\n    // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.\n    updateClamps();\n\n    if (tween.isActive() && tween.vars.scrollY > maxY) {\n      scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo(\"scrollY\", maxY);\n    }\n  };\n\n  content && gsap.set(content, {\n    y: \"+=0\"\n  }); // to ensure there's a cache (element._gsap)\n\n  vars.ignoreCheck = function (e) {\n    return _fixIOSBug && e.type === \"touchmove\" && ignoreDrag(e) || scale > 1.05 && e.type !== \"touchstart\" || self.isGesturing || e.touches && e.touches.length > 1;\n  };\n\n  vars.onPress = function () {\n    var prevScale = scale;\n    scale = _round((_win.visualViewport && _win.visualViewport.scale || 1) / initialScale);\n    tween.pause();\n    prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : \"x\");\n    startScrollX = scrollFuncX();\n    startScrollY = scrollFuncY();\n    updateClamps();\n    lastRefreshID = _refreshID;\n  };\n\n  vars.onRelease = vars.onGestureStart = function (self, wasDragging) {\n    scrollFuncY.offset && removeContentOffset();\n\n    if (!wasDragging) {\n      onStopDelayedCall.restart(true);\n    } else {\n      _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++; // make sure we're pulling the non-cached value\n      // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),\tdur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)\n\n      var dur = resolveMomentumDuration(),\n          currentScroll,\n          endScroll;\n\n      if (normalizeScrollX) {\n        currentScroll = scrollFuncX();\n        endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.\n\n        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal));\n        tween.vars.scrollX = scrollClampX(endScroll);\n      }\n\n      currentScroll = scrollFuncY();\n      endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227; // the constant .227 is from power4(0.05)\n\n      dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical));\n      tween.vars.scrollY = scrollClampY(endScroll);\n      tween.invalidate().duration(dur).play(0.01);\n\n      if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {\n        // iOS bug: it'll show the address bar but NOT fire the window \"resize\" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.\n        gsap.to({}, {\n          onUpdate: onResize,\n          duration: dur\n        });\n      }\n    }\n  };\n\n  vars.onWheel = function () {\n    tween._ts && tween.pause();\n\n    if (_getTime() - wheelRefresh > 1000) {\n      // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.\n      lastRefreshID = 0;\n      wheelRefresh = _getTime();\n    }\n  };\n\n  vars.onChange = function (self, dx, dy, xArray, yArray) {\n    _refreshID !== lastRefreshID && updateClamps();\n    dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.\n\n    if (dy) {\n      scrollFuncY.offset && removeContentOffset();\n      var isTouch = yArray[2] === dy,\n          y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],\n          yClamped = scrollClampY(y);\n      isTouch && y !== yClamped && (startScrollY += yClamped - y);\n      scrollFuncY(yClamped);\n    }\n\n    (dy || dx) && _updateAll();\n  };\n\n  vars.onEnable = function () {\n    _allowNativePanning(target, normalizeScrollX ? false : \"x\");\n\n    ScrollTrigger.addEventListener(\"refresh\", onResize);\n\n    _addListener(_win, \"resize\", onResize);\n\n    if (scrollFuncY.smooth) {\n      scrollFuncY.target.style.scrollBehavior = \"auto\";\n      scrollFuncY.smooth = scrollFuncX.smooth = false;\n    }\n\n    inputObserver.enable();\n  };\n\n  vars.onDisable = function () {\n    _allowNativePanning(target, true);\n\n    _removeListener(_win, \"resize\", onResize);\n\n    ScrollTrigger.removeEventListener(\"refresh\", onResize);\n    inputObserver.kill();\n  };\n\n  vars.lockAxis = vars.lockAxis !== false;\n  self = new _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);\n  self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.\n\n  _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.\n\n  _fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping\n\n  onStopDelayedCall = self._dc;\n  tween = gsap.to(self, {\n    ease: \"power4\",\n    paused: true,\n    scrollX: normalizeScrollX ? \"+=0.1\" : \"+=0\",\n    scrollY: \"+=0.1\",\n    onComplete: onStopDelayedCall.vars.onComplete\n  });\n  return self;\n};\n\nScrollTrigger.sort = function (func) {\n  return _triggers.sort(func || function (a, b) {\n    return (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6);\n  });\n};\n\nScrollTrigger.observe = function (vars) {\n  return new _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);\n};\n\nScrollTrigger.normalizeScroll = function (vars) {\n  if (typeof vars === \"undefined\") {\n    return _normalizer;\n  }\n\n  if (vars === true && _normalizer) {\n    return _normalizer.enable();\n  }\n\n  if (vars === false) {\n    return _normalizer && _normalizer.kill();\n  }\n\n  var normalizer = vars instanceof _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer ? vars : _getScrollNormalizer(vars);\n  _normalizer && _normalizer.target === normalizer.target && _normalizer.kill();\n  _isViewport(normalizer.target) && (_normalizer = normalizer);\n  return normalizer;\n};\n\nScrollTrigger.core = {\n  // smaller file size way to leverage in ScrollSmoother and Observer\n  _getVelocityProp: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._getVelocityProp,\n  _inputObserver: _inputObserver,\n  _scrollers: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers,\n  _proxies: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies,\n  bridge: {\n    // when normalizeScroll sets the scroll position (ss = setScroll)\n    ss: function ss() {\n      _lastScrollTime || _dispatch(\"scrollStart\");\n      _lastScrollTime = _getTime();\n    },\n    // a way to get the _refreshing value in Observer\n    ref: function ref() {\n      return _refreshing;\n    }\n  }\n};\n_getGSAP() && gsap.registerPlugin(ScrollTrigger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gsap/ScrollTrigger.js\n");

/***/ }),

/***/ "./node_modules/gsap/dist/gsap.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/dist/gsap.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function (global, factory) {\n   true ? factory(exports) :\n  0;\n}(this, (function (exports) { 'use strict';\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  /*!\n   * GSAP 3.11.3\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2022, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n      lineHeight: \"\"\n    }\n  },\n      _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n  },\n      _suppressOverwrites,\n      _reverting,\n      _context,\n      _bigNum = 1e8,\n      _tinyNum = 1 / _bigNum,\n      _2PI = Math.PI * 2,\n      _HALF_PI = _2PI / 4,\n      _gsID = 0,\n      _sqrt = Math.sqrt,\n      _cos = Math.cos,\n      _sin = Math.sin,\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n  },\n      _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function () {},\n      _isArray = Array.isArray,\n      _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi,\n      _numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g,\n      _numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g,\n      _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi,\n      _relExp = /[+-]=-?[.\\d]+/,\n      _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi,\n      _unitExp = /^[+\\-=e\\s\\d]*\\d+[.\\d]*([a-z]*|%)\\s*$/i,\n      _globalTimeline,\n      _win,\n      _coreInitted,\n      _doc,\n      _globals = {},\n      _installScope = {},\n      _coreReady,\n      _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n  },\n      _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n  },\n      _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n  },\n      _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n  },\n      _emptyFunc = function _emptyFunc() {\n    return 0;\n  },\n      _startAtRevertConfig = {\n    suppressEvents: true,\n    isStart: true,\n    kill: false\n  },\n      _revertConfigNoKill = {\n    suppressEvents: true,\n    kill: false\n  },\n      _revertConfig = {\n    suppressEvents: true\n  },\n      _reservedProps = {},\n      _lazyTweens = [],\n      _lazyLookup = {},\n      _lastRenderedFrame,\n      _plugins = {},\n      _effects = {},\n      _nextGCFrame = 30,\n      _harnessPlugins = [],\n      _callbackNames = \"\",\n      _harness = function _harness(targets) {\n    var target = targets[0],\n        harnessPlugin,\n        i;\n    _isObject(target) || _isFunction(target) || (targets = [targets]);\n\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n      i = _harnessPlugins.length;\n\n      while (i-- && !_harnessPlugins[i].targetTest(target)) {}\n\n      harnessPlugin = _harnessPlugins[i];\n    }\n\n    i = targets.length;\n\n    while (i--) {\n      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n\n    return targets;\n  },\n      _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n  },\n      _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n  },\n      _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 10000000) / 10000000 || 0;\n  },\n      _parseRelative = function _parseRelative(start, value) {\n    var operator = value.charAt(0),\n        end = parseFloat(value.substr(2));\n    start = parseFloat(start);\n    return operator === \"+\" ? start + end : operator === \"-\" ? start - end : operator === \"*\" ? start * end : start / end;\n  },\n      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    var l = toFind.length,\n        i = 0;\n\n    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}\n\n    return i < l;\n  },\n      _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length,\n        a = _lazyTweens.slice(0),\n        i,\n        tween;\n\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n\n    for (i = 0; i < l; i++) {\n      tween = a[i];\n      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n  },\n      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && _lazyRender();\n    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));\n    _lazyTweens.length && _lazyRender();\n  },\n      _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n  },\n      _passThrough = function _passThrough(p) {\n    return p;\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {\n    return function (obj, defaults) {\n      for (var p in defaults) {\n        p in obj || p === \"duration\" && excludeDuration || p === \"ease\" || (obj[p] = defaults[p]);\n      }\n    };\n  },\n      _merge = function _merge(base, toMerge) {\n    for (var p in toMerge) {\n      base[p] = toMerge[p];\n    }\n\n    return base;\n  },\n      _mergeDeep = function _mergeDeep(base, toMerge) {\n    for (var p in toMerge) {\n      p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n\n    return base;\n  },\n      _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {},\n        p;\n\n    for (p in obj) {\n      p in excluding || (copy[p] = obj[p]);\n    }\n\n    return copy;\n  },\n      _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline,\n        func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;\n\n    if (_isNotFalse(vars.inherit)) {\n      while (parent) {\n        func(vars, parent.vars.defaults);\n        parent = parent.parent || parent._dp;\n      }\n    }\n\n    return vars;\n  },\n      _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length,\n        match = i === a2.length;\n\n    while (match && i-- && a1[i] === a2[i]) {}\n\n    return i < 0;\n  },\n      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = parent[lastProp],\n        t;\n\n    if (sortBy) {\n      t = child[sortBy];\n\n      while (prev && prev[sortBy] > t) {\n        prev = prev._prev;\n      }\n    }\n\n    if (prev) {\n      child._next = prev._next;\n      prev._next = child;\n    } else {\n      child._next = parent[firstProp];\n      parent[firstProp] = child;\n    }\n\n    if (child._next) {\n      child._next._prev = child;\n    } else {\n      parent[lastProp] = child;\n    }\n\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n  },\n      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = child._prev,\n        next = child._next;\n\n    if (prev) {\n      prev._next = next;\n    } else if (parent[firstProp] === child) {\n      parent[firstProp] = next;\n    }\n\n    if (next) {\n      next._prev = prev;\n    } else if (parent[lastProp] === child) {\n      parent[lastProp] = prev;\n    }\n\n    child._next = child._prev = child.parent = null;\n  },\n      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);\n    child._act = 0;\n  },\n      _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n      var a = animation;\n\n      while (a) {\n        a._dirty = 1;\n        a = a.parent;\n      }\n    }\n\n    return animation;\n  },\n      _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n\n    while (parent && parent.parent) {\n      parent._dirty = 1;\n      parent.totalDuration();\n      parent = parent.parent;\n    }\n\n    return animation;\n  },\n      _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {\n    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));\n  },\n      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n  },\n      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n  },\n      _animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime /= cycleDuration);\n    return tTime && whole === tTime ? whole - 1 : whole;\n  },\n      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n  },\n      _setEnd = function _setEnd(animation) {\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n  },\n      _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    var parent = animation._dp;\n\n    if (parent && parent.smoothChildTiming && animation._ts) {\n      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n\n      _setEnd(animation);\n\n      parent._dirty || _uncache(parent, animation);\n    }\n\n    return animation;\n  },\n      _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n\n    if (child._time || child._initted && !child._dur) {\n      t = _parentToChildTotalTime(timeline.rawTime(), child);\n\n      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n        child.render(t, true);\n      }\n    }\n\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n      if (timeline._dur < timeline.duration()) {\n        t = timeline;\n\n        while (t._dp) {\n          t.rawTime() >= 0 && t.totalTime(t._tTime);\n          t = t._dp;\n        }\n      }\n\n      timeline._zTime = -_tinyNum;\n    }\n  },\n      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime);\n    return timeline;\n  },\n      _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n  },\n      _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {\n    _initTween(tween, time, tTime);\n\n    if (!tween._initted) {\n      return 1;\n    }\n\n    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n      _lazyTweens.push(tween);\n\n      tween._lazy = [tTime, suppressEvents];\n      return 1;\n    }\n  },\n      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n  },\n      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n  },\n      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio,\n        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,\n        repeatDelay = tween._rDelay,\n        tTime = 0,\n        pt,\n        iteration,\n        prevIteration;\n\n    if (repeatDelay && tween._repeat) {\n      tTime = _clamp(0, tween._tDur, totalTime);\n      iteration = _animationCycle(tTime, repeatDelay);\n      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n\n      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {\n        prevRatio = 1 - ratio;\n        tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n      }\n    }\n\n    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {\n        return;\n      }\n\n      prevIteration = tween._zTime;\n      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);\n      suppressEvents || (suppressEvents = totalTime && !prevIteration);\n      tween.ratio = ratio;\n      tween._from && (ratio = 1 - ratio);\n      tween._time = 0;\n      tween._tTime = tTime;\n      pt = tween._pt;\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n\n      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);\n      tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n\n      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n        ratio && _removeFromParent(tween, 1);\n\n        if (!suppressEvents && !_reverting) {\n          _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n\n          tween._prom && tween._prom();\n        }\n      }\n    } else if (!tween._zTime) {\n      tween._zTime = totalTime;\n    }\n  },\n      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n\n    if (time > prevTime) {\n      child = animation._first;\n\n      while (child && child._start <= time) {\n        if (child.data === \"isPause\" && child._start > prevTime) {\n          return child;\n        }\n\n        child = child._next;\n      }\n    } else {\n      child = animation._last;\n\n      while (child && child._start >= time) {\n        if (child.data === \"isPause\" && child._start < prevTime) {\n          return child;\n        }\n\n        child = child._prev;\n      }\n    }\n  },\n      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat,\n        dur = _roundPrecise(duration) || 0,\n        totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);\n    animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n  },\n      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n  },\n      _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n  },\n      _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels,\n        recent = animation._recent || _zeroPosition,\n        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,\n        i,\n        offset,\n        isPercent;\n\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n      offset = position.charAt(0);\n      isPercent = position.substr(-1) === \"%\";\n      i = position.indexOf(\"=\");\n\n      if (offset === \"<\" || offset === \">\") {\n        i >= 0 && (position = position.replace(/=/, \"\"));\n        return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n      }\n\n      if (i < 0) {\n        position in labels || (labels[position] = clippedDuration);\n        return labels[position];\n      }\n\n      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n\n      if (isPercent && percentAnimation) {\n        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n      }\n\n      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n\n    return position == null ? clippedDuration : +position;\n  },\n      _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]),\n        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),\n        vars = params[varsIndex],\n        irVars,\n        parent;\n\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n\n    if (type) {\n      irVars = vars;\n      parent = timeline;\n\n      while (parent && !(\"immediateRender\" in irVars)) {\n        irVars = parent.vars.defaults || {};\n        parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n      }\n\n      vars.immediateRender = _isNotFalse(irVars.immediateRender);\n      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];\n    }\n\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n  },\n      _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n  },\n      _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n  },\n      getUnit = function getUnit(value, v) {\n    return !_isString(value) || !(v = _unitExp.exec(value)) ? \"\" : v[1];\n  },\n      clamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function (v) {\n      return _clamp(min, max, v);\n    });\n  },\n      _slice = [].slice,\n      _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n  },\n      _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n      accumulator = [];\n    }\n\n    return ar.forEach(function (value) {\n      var _accumulator;\n\n      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n  },\n      toArray = function toArray(value, scope, leaveStrings) {\n    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];\n  },\n      selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function (v) {\n      var el = value.current || value.nativeElement || value;\n      return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n  },\n      shuffle = function shuffle(a) {\n    return a.sort(function () {\n      return .5 - Math.random();\n    });\n  },\n      distribute = function distribute(v) {\n    if (_isFunction(v)) {\n      return v;\n    }\n\n    var vars = _isObject(v) ? v : {\n      each: v\n    },\n        ease = _parseEase(vars.ease),\n        from = vars.from || 0,\n        base = parseFloat(vars.base) || 0,\n        cache = {},\n        isDecimal = from > 0 && from < 1,\n        ratios = isNaN(from) || isDecimal,\n        axis = vars.axis,\n        ratioX = from,\n        ratioY = from;\n\n    if (_isString(from)) {\n      ratioX = ratioY = {\n        center: .5,\n        edges: .5,\n        end: 1\n      }[from] || 0;\n    } else if (!isDecimal && ratios) {\n      ratioX = from[0];\n      ratioY = from[1];\n    }\n\n    return function (i, target, a) {\n      var l = (a || vars).length,\n          distances = cache[l],\n          originX,\n          originY,\n          x,\n          y,\n          d,\n          j,\n          max,\n          min,\n          wrapAt;\n\n      if (!distances) {\n        wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [1, _bigNum])[1];\n\n        if (!wrapAt) {\n          max = -_bigNum;\n\n          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}\n\n          wrapAt--;\n        }\n\n        distances = cache[l] = [];\n        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n        max = 0;\n        min = _bigNum;\n\n        for (j = 0; j < l; j++) {\n          x = j % wrapAt - originX;\n          y = originY - (j / wrapAt | 0);\n          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n          d > max && (max = d);\n          d < min && (min = d);\n        }\n\n        from === \"random\" && shuffle(distances);\n        distances.max = max - min;\n        distances.min = min;\n        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n        distances.b = l < 0 ? base - l : base;\n        distances.u = getUnit(vars.amount || vars.each) || 0;\n        ease = ease && l < 0 ? _invertEase(ease) : ease;\n      }\n\n      l = (distances[i] - distances.min) / distances.max || 0;\n      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;\n    };\n  },\n      _roundModifier = function _roundModifier(v) {\n    var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length);\n    return function (raw) {\n      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);\n\n      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));\n    };\n  },\n      snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo),\n        radius,\n        is2D;\n\n    if (!isArray && _isObject(snapTo)) {\n      radius = isArray = snapTo.radius || _bigNum;\n\n      if (snapTo.values) {\n        snapTo = toArray(snapTo.values);\n\n        if (is2D = !_isNumber(snapTo[0])) {\n          radius *= radius;\n        }\n      } else {\n        snapTo = _roundModifier(snapTo.increment);\n      }\n    }\n\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {\n      is2D = snapTo(raw);\n      return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function (raw) {\n      var x = parseFloat(is2D ? raw.x : raw),\n          y = parseFloat(is2D ? raw.y : 0),\n          min = _bigNum,\n          closest = 0,\n          i = snapTo.length,\n          dx,\n          dy;\n\n      while (i--) {\n        if (is2D) {\n          dx = snapTo[i].x - x;\n          dy = snapTo[i].y - y;\n          dx = dx * dx + dy * dy;\n        } else {\n          dx = Math.abs(snapTo[i] - x);\n        }\n\n        if (dx < min) {\n          min = dx;\n          closest = i;\n        }\n      }\n\n      closest = !radius || min <= radius ? snapTo[closest] : raw;\n      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n  },\n      random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {\n      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n  },\n      pipe = function pipe() {\n    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\n      functions[_key] = arguments[_key];\n    }\n\n    return function (value) {\n      return functions.reduce(function (v, f) {\n        return f(v);\n      }, value);\n    };\n  },\n      unitize = function unitize(func, unit) {\n    return function (value) {\n      return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n  },\n      normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n  },\n      _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function (index) {\n      return a[~~wrapper(index)];\n    });\n  },\n      wrap = function wrap(min, max, value) {\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {\n      return (range + (value - min) % range) % range + min;\n    });\n  },\n      wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min,\n        total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {\n      value = (total + (value - min) % total) % total || 0;\n      return min + (value > range ? total - value : value);\n    });\n  },\n      _replaceRandom = function _replaceRandom(value) {\n    var prev = 0,\n        s = \"\",\n        i,\n        nums,\n        end,\n        isArray;\n\n    while (~(i = value.indexOf(\"random(\", prev))) {\n      end = value.indexOf(\")\", i);\n      isArray = value.charAt(i + 7) === \"[\";\n      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n      prev = end + 1;\n    }\n\n    return s + value.substr(prev, value.length - prev);\n  },\n      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin,\n        outRange = outMax - outMin;\n    return _conditionalReturn(value, function (value) {\n      return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n  },\n      interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function (p) {\n      return (1 - p) * start + p * end;\n    };\n\n    if (!func) {\n      var isString = _isString(start),\n          master = {},\n          p,\n          i,\n          interpolators,\n          l,\n          il;\n\n      progress === true && (mutate = 1) && (progress = null);\n\n      if (isString) {\n        start = {\n          p: start\n        };\n        end = {\n          p: end\n        };\n      } else if (_isArray(start) && !_isArray(end)) {\n        interpolators = [];\n        l = start.length;\n        il = l - 2;\n\n        for (i = 1; i < l; i++) {\n          interpolators.push(interpolate(start[i - 1], start[i]));\n        }\n\n        l--;\n\n        func = function func(p) {\n          p *= l;\n          var i = Math.min(il, ~~p);\n          return interpolators[i](p - i);\n        };\n\n        progress = end;\n      } else if (!mutate) {\n        start = _merge(_isArray(start) ? [] : {}, start);\n      }\n\n      if (!interpolators) {\n        for (p in end) {\n          _addPropTween.call(master, start, p, \"get\", end[p]);\n        }\n\n        func = function func(p) {\n          return _renderPropTweens(p, master) || (isString ? start.p : start);\n        };\n      }\n    }\n\n    return _conditionalReturn(progress, func);\n  },\n      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    var labels = timeline.labels,\n        min = _bigNum,\n        p,\n        distance,\n        label;\n\n    for (p in labels) {\n      distance = labels[p] - fromTime;\n\n      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n        label = p;\n        min = distance;\n      }\n    }\n\n    return label;\n  },\n      _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars,\n        callback = v[type],\n        prevContext = _context,\n        context = animation._ctx,\n        params,\n        scope,\n        result;\n\n    if (!callback) {\n      return;\n    }\n\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender();\n    context && (_context = context);\n    result = params ? callback.apply(scope, params) : callback.call(scope);\n    _context = prevContext;\n    return result;\n  },\n      _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n\n    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n  },\n      _quickTween,\n      _createPlugin = function _createPlugin(config) {\n    config = !config.name && config[\"default\"] || config;\n\n    var name = config.name,\n        isFunc = _isFunction(config),\n        Plugin = name && !isFunc && config.init ? function () {\n      this._props = [];\n    } : config,\n        instanceDefaults = {\n      init: _emptyFunc,\n      render: _renderPropTweens,\n      add: _addPropTween,\n      kill: _killPropTweensOf,\n      modifier: _addPluginModifier,\n      rawVars: 0\n    },\n        statics = {\n      targetTest: 0,\n      get: 0,\n      getSetter: _getSetter,\n      aliases: {},\n      register: 0\n    };\n\n    _wake();\n\n    if (config !== Plugin) {\n      if (_plugins[name]) {\n        return;\n      }\n\n      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));\n\n      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));\n\n      _plugins[Plugin.prop = name] = Plugin;\n\n      if (config.targetTest) {\n        _harnessPlugins.push(Plugin);\n\n        _reservedProps[name] = 1;\n      }\n\n      name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\";\n    }\n\n    _addGlobal(name, Plugin);\n\n    config.register && config.register(gsap, Plugin, PropTween);\n  },\n      _255 = 255,\n      _colorLookup = {\n    aqua: [0, _255, _255],\n    lime: [0, _255, 0],\n    silver: [192, 192, 192],\n    black: [0, 0, 0],\n    maroon: [128, 0, 0],\n    teal: [0, 128, 128],\n    blue: [0, 0, _255],\n    navy: [0, 0, 128],\n    white: [_255, _255, _255],\n    olive: [128, 128, 0],\n    yellow: [_255, _255, 0],\n    orange: [_255, 165, 0],\n    gray: [128, 128, 128],\n    purple: [128, 0, 128],\n    green: [0, 128, 0],\n    red: [_255, 0, 0],\n    pink: [_255, 192, 203],\n    cyan: [0, _255, _255],\n    transparent: [_255, _255, _255, 0]\n  },\n      _hue = function _hue(h, m1, m2) {\n    h += h < 0 ? 1 : h > 1 ? -1 : 0;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n  },\n      splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,\n        r,\n        g,\n        b,\n        h,\n        s,\n        l,\n        max,\n        min,\n        d,\n        wasHSL;\n\n    if (!a) {\n      if (v.substr(-1) === \",\") {\n        v = v.substr(0, v.length - 1);\n      }\n\n      if (_colorLookup[v]) {\n        a = _colorLookup[v];\n      } else if (v.charAt(0) === \"#\") {\n        if (v.length < 6) {\n          r = v.charAt(1);\n          g = v.charAt(2);\n          b = v.charAt(3);\n          v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n        }\n\n        if (v.length === 9) {\n          a = parseInt(v.substr(1, 6), 16);\n          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];\n        }\n\n        v = parseInt(v.substr(1), 16);\n        a = [v >> 16, v >> 8 & _255, v & _255];\n      } else if (v.substr(0, 3) === \"hsl\") {\n        a = wasHSL = v.match(_strictNumExp);\n\n        if (!toHSL) {\n          h = +a[0] % 360 / 360;\n          s = +a[1] / 100;\n          l = +a[2] / 100;\n          g = l <= .5 ? l * (s + 1) : l + s - l * s;\n          r = l * 2 - g;\n          a.length > 3 && (a[3] *= 1);\n          a[0] = _hue(h + 1 / 3, r, g);\n          a[1] = _hue(h, r, g);\n          a[2] = _hue(h - 1 / 3, r, g);\n        } else if (~v.indexOf(\"=\")) {\n          a = v.match(_numExp);\n          forceAlpha && a.length < 4 && (a[3] = 1);\n          return a;\n        }\n      } else {\n        a = v.match(_strictNumExp) || _colorLookup.transparent;\n      }\n\n      a = a.map(Number);\n    }\n\n    if (toHSL && !wasHSL) {\n      r = a[0] / _255;\n      g = a[1] / _255;\n      b = a[2] / _255;\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0;\n      } else {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n        h *= 60;\n      }\n\n      a[0] = ~~(h + .5);\n      a[1] = ~~(s * 100 + .5);\n      a[2] = ~~(l * 100 + .5);\n    }\n\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n  },\n      _colorOrderData = function _colorOrderData(v) {\n    var values = [],\n        c = [],\n        i = -1;\n    v.split(_colorExp).forEach(function (v) {\n      var a = v.match(_numWithUnitExp) || [];\n      values.push.apply(values, a);\n      c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n  },\n      _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\",\n        colors = (s + result).match(_colorExp),\n        type = toHSL ? \"hsla(\" : \"rgba(\",\n        i = 0,\n        c,\n        shell,\n        d,\n        l;\n\n    if (!colors) {\n      return s;\n    }\n\n    colors = colors.map(function (color) {\n      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n\n    if (orderMatchData) {\n      d = _colorOrderData(s);\n      c = orderMatchData.c;\n\n      if (c.join(result) !== d.c.join(result)) {\n        shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n        l = shell.length - 1;\n\n        for (; i < l; i++) {\n          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n        }\n      }\n    }\n\n    if (!shell) {\n      shell = s.split(_colorExp);\n      l = shell.length - 1;\n\n      for (; i < l; i++) {\n        result += shell[i] + colors[i];\n      }\n    }\n\n    return result + shell[l];\n  },\n      _colorExp = function () {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\",\n        p;\n\n    for (p in _colorLookup) {\n      s += \"|\" + p + \"\\\\b\";\n    }\n\n    return new RegExp(s + \")\", \"gi\");\n  }(),\n      _hslExp = /hsl[a]?\\(/,\n      _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"),\n        toHSL;\n    _colorExp.lastIndex = 0;\n\n    if (_colorExp.test(combined)) {\n      toHSL = _hslExp.test(combined);\n      a[1] = _formatColors(a[1], toHSL);\n      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));\n      return true;\n    }\n  },\n      _tickerActive,\n      _ticker = function () {\n    var _getTime = Date.now,\n        _lagThreshold = 500,\n        _adjustedLag = 33,\n        _startTime = _getTime(),\n        _lastUpdate = _startTime,\n        _gap = 1000 / 240,\n        _nextTime = _gap,\n        _listeners = [],\n        _id,\n        _req,\n        _raf,\n        _self,\n        _delta,\n        _i,\n        _tick = function _tick(v) {\n      var elapsed = _getTime() - _lastUpdate,\n          manual = v === true,\n          overlap,\n          dispatch,\n          time,\n          frame;\n\n      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n      _lastUpdate += elapsed;\n      time = _lastUpdate - _startTime;\n      overlap = time - _nextTime;\n\n      if (overlap > 0 || manual) {\n        frame = ++_self.frame;\n        _delta = time - _self.time * 1000;\n        _self.time = time = time / 1000;\n        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n        dispatch = 1;\n      }\n\n      manual || (_id = _req(_tick));\n\n      if (dispatch) {\n        for (_i = 0; _i < _listeners.length; _i++) {\n          _listeners[_i](time, _delta, frame, v);\n        }\n      }\n    };\n\n    _self = {\n      time: 0,\n      frame: 0,\n      tick: function tick() {\n        _tick(true);\n      },\n      deltaRatio: function deltaRatio(fps) {\n        return _delta / (1000 / (fps || 60));\n      },\n      wake: function wake() {\n        if (_coreReady) {\n          if (!_coreInitted && _windowExists()) {\n            _win = _coreInitted = window;\n            _doc = _win.document || {};\n            _globals.gsap = gsap;\n            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n\n            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n\n            _raf = _win.requestAnimationFrame;\n          }\n\n          _id && _self.sleep();\n\n          _req = _raf || function (f) {\n            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n          };\n\n          _tickerActive = 1;\n\n          _tick(2);\n        }\n      },\n      sleep: function sleep() {\n        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n        _tickerActive = 0;\n        _req = _emptyFunc;\n      },\n      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n        _lagThreshold = threshold || 1 / _tinyNum;\n        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n      },\n      fps: function fps(_fps) {\n        _gap = 1000 / (_fps || 240);\n        _nextTime = _self.time * 1000 + _gap;\n      },\n      add: function add(callback, once, prioritize) {\n        var func = once ? function (t, d, f, v) {\n          callback(t, d, f, v);\n\n          _self.remove(func);\n        } : callback;\n\n        _self.remove(callback);\n\n        _listeners[prioritize ? \"unshift\" : \"push\"](func);\n\n        _wake();\n\n        return func;\n      },\n      remove: function remove(callback, i) {\n        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n      },\n      _listeners: _listeners\n    };\n    return _self;\n  }(),\n      _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n  },\n      _easeMap = {},\n      _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/,\n      _quotesExp = /[\"']/g,\n      _parseObjectInString = function _parseObjectInString(value) {\n    var obj = {},\n        split = value.substr(1, value.length - 3).split(\":\"),\n        key = split[0],\n        i = 1,\n        l = split.length,\n        index,\n        val,\n        parsedVal;\n\n    for (; i < l; i++) {\n      val = split[i];\n      index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n      parsedVal = val.substr(0, index);\n      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n      key = val.substr(index + 1).trim();\n    }\n\n    return obj;\n  },\n      _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1,\n        close = value.indexOf(\")\"),\n        nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n  },\n      _configEaseFromString = function _configEaseFromString(name) {\n    var split = (name + \"\").split(\"(\"),\n        ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n  },\n      _invertEase = function _invertEase(ease) {\n    return function (p) {\n      return 1 - ease(1 - p);\n    };\n  },\n      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first,\n        ease;\n\n    while (child) {\n      if (child instanceof Timeline) {\n        _propagateYoyoEase(child, isYoyo);\n      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n        if (child.timeline) {\n          _propagateYoyoEase(child.timeline, isYoyo);\n        } else {\n          ease = child._ease;\n          child._ease = child._yEase;\n          child._yEase = ease;\n          child._yoyo = isYoyo;\n        }\n      }\n\n      child = child._next;\n    }\n  },\n      _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n  },\n      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n      easeOut = function easeOut(p) {\n        return 1 - easeIn(1 - p);\n      };\n    }\n\n    if (easeInOut === void 0) {\n      easeInOut = function easeInOut(p) {\n        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n      };\n    }\n\n    var ease = {\n      easeIn: easeIn,\n      easeOut: easeOut,\n      easeInOut: easeInOut\n    },\n        lowercaseName;\n\n    _forEachName(names, function (name) {\n      _easeMap[name] = _globals[name] = ease;\n      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n\n      for (var p in ease) {\n        _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n      }\n    });\n\n    return ease;\n  },\n      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function (p) {\n      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n  },\n      _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1,\n        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),\n        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),\n        easeOut = function easeOut(p) {\n      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    p2 = _2PI / p2;\n\n    ease.config = function (amplitude, period) {\n      return _configElastic(type, amplitude, period);\n    };\n\n    return ease;\n  },\n      _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n      overshoot = 1.70158;\n    }\n\n    var easeOut = function easeOut(p) {\n      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    ease.config = function (overshoot) {\n      return _configBack(type, overshoot);\n    };\n\n    return ease;\n  };\n\n  _forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function (name, i) {\n    var power = i < 5 ? i + 1 : i;\n\n    _insertEase(name + \",Power\" + (power - 1), i ? function (p) {\n      return Math.pow(p, power);\n    } : function (p) {\n      return p;\n    }, function (p) {\n      return 1 - Math.pow(1 - p, power);\n    }, function (p) {\n      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n  });\n\n  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n\n  _insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n\n  (function (n, c) {\n    var n1 = 1 / c,\n        n2 = 2 * n1,\n        n3 = 2.5 * n1,\n        easeOut = function easeOut(p) {\n      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n\n    _insertEase(\"Bounce\", function (p) {\n      return 1 - easeOut(1 - p);\n    }, easeOut);\n  })(7.5625, 2.75);\n\n  _insertEase(\"Expo\", function (p) {\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\n  });\n\n  _insertEase(\"Circ\", function (p) {\n    return -(_sqrt(1 - p * p) - 1);\n  });\n\n  _insertEase(\"Sine\", function (p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n  });\n\n  _insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n\n  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n      if (steps === void 0) {\n        steps = 1;\n      }\n\n      var p1 = 1 / steps,\n          p2 = steps + (immediateStart ? 0 : 1),\n          p3 = immediateStart ? 1 : 0,\n          max = 1 - _tinyNum;\n      return function (p) {\n        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n      };\n    }\n  };\n  _defaults.ease = _easeMap[\"quad.out\"];\n\n  _forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function (name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n  });\n\n  var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n  };\n  var Animation = function () {\n    function Animation(vars) {\n      this.vars = vars;\n      this._delay = +vars.delay || 0;\n\n      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n        this._rDelay = vars.repeatDelay || 0;\n        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n      }\n\n      this._ts = 1;\n\n      _setDuration(this, +vars.duration, 1, 1);\n\n      this.data = vars.data;\n\n      if (_context) {\n        this._ctx = _context;\n\n        _context.data.push(this);\n      }\n\n      _tickerActive || _ticker.wake();\n    }\n\n    var _proto = Animation.prototype;\n\n    _proto.delay = function delay(value) {\n      if (value || value === 0) {\n        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n        this._delay = value;\n        return this;\n      }\n\n      return this._delay;\n    };\n\n    _proto.duration = function duration(value) {\n      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n\n    _proto.totalDuration = function totalDuration(value) {\n      if (!arguments.length) {\n        return this._tDur;\n      }\n\n      this._dirty = 0;\n      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n      _wake();\n\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      var parent = this._dp;\n\n      if (parent && parent.smoothChildTiming && this._ts) {\n        _alignPlayhead(this, _totalTime);\n\n        !parent._dp || parent.parent || _postAddChecks(parent, this);\n\n        while (parent && parent.parent) {\n          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n            parent.totalTime(parent._tTime, true);\n          }\n\n          parent = parent.parent;\n        }\n\n        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n          _addToTimeline(this._dp, this, this._start - this._delay);\n        }\n      }\n\n      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n        this._ts || (this._pTime = _totalTime);\n\n        _lazySafeRender(this, _totalTime, suppressEvents);\n      }\n\n      return this;\n    };\n\n    _proto.time = function time(value, suppressEvents) {\n      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;\n    };\n\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n    };\n\n    _proto.progress = function progress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n    };\n\n    _proto.iteration = function iteration(value, suppressEvents) {\n      var cycleDuration = this.duration() + this._rDelay;\n\n      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    };\n\n    _proto.timeScale = function timeScale(value) {\n      if (!arguments.length) {\n        return this._rts === -_tinyNum ? 0 : this._rts;\n      }\n\n      if (this._rts === value) {\n        return this;\n      }\n\n      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;\n      this._rts = +value || 0;\n      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;\n      this.totalTime(_clamp(-this._delay, this._tDur, tTime), true);\n\n      _setEnd(this);\n\n      return _recacheAncestors(this);\n    };\n\n    _proto.paused = function paused(value) {\n      if (!arguments.length) {\n        return this._ps;\n      }\n\n      if (this._ps !== value) {\n        this._ps = value;\n\n        if (value) {\n          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());\n          this._ts = this._act = 0;\n        } else {\n          _wake();\n\n          this._ts = this._rts;\n          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));\n        }\n      }\n\n      return this;\n    };\n\n    _proto.startTime = function startTime(value) {\n      if (arguments.length) {\n        this._start = value;\n        var parent = this.parent || this._dp;\n        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n        return this;\n      }\n\n      return this._start;\n    };\n\n    _proto.endTime = function endTime(includeRepeats) {\n      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n    };\n\n    _proto.rawTime = function rawTime(wrapRepeats) {\n      var parent = this.parent || this._dp;\n      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n\n    _proto.revert = function revert(config) {\n      if (config === void 0) {\n        config = _revertConfig;\n      }\n\n      var prevIsReverting = _reverting;\n      _reverting = config;\n\n      if (this._initted || this._startAt) {\n        this.timeline && this.timeline.revert(config);\n        this.totalTime(-0.01, config.suppressEvents);\n      }\n\n      this.data !== \"nested\" && config.kill !== false && this.kill();\n      _reverting = prevIsReverting;\n      return this;\n    };\n\n    _proto.globalTime = function globalTime(rawTime) {\n      var animation = this,\n          time = arguments.length ? rawTime : animation.rawTime();\n\n      while (animation) {\n        time = animation._start + time / (animation._ts || 1);\n        animation = animation._dp;\n      }\n\n      return !this.parent && this.vars.immediateRender ? -1 : time;\n    };\n\n    _proto.repeat = function repeat(value) {\n      if (arguments.length) {\n        this._repeat = value === Infinity ? -2 : value;\n        return _onUpdateTotalDuration(this);\n      }\n\n      return this._repeat === -2 ? Infinity : this._repeat;\n    };\n\n    _proto.repeatDelay = function repeatDelay(value) {\n      if (arguments.length) {\n        var time = this._time;\n        this._rDelay = value;\n\n        _onUpdateTotalDuration(this);\n\n        return time ? this.time(time) : this;\n      }\n\n      return this._rDelay;\n    };\n\n    _proto.yoyo = function yoyo(value) {\n      if (arguments.length) {\n        this._yoyo = value;\n        return this;\n      }\n\n      return this._yoyo;\n    };\n\n    _proto.seek = function seek(position, suppressEvents) {\n      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n    };\n\n    _proto.play = function play(from, suppressEvents) {\n      from != null && this.seek(from, suppressEvents);\n      return this.reversed(false).paused(false);\n    };\n\n    _proto.reverse = function reverse(from, suppressEvents) {\n      from != null && this.seek(from || this.totalDuration(), suppressEvents);\n      return this.reversed(true).paused(false);\n    };\n\n    _proto.pause = function pause(atTime, suppressEvents) {\n      atTime != null && this.seek(atTime, suppressEvents);\n      return this.paused(true);\n    };\n\n    _proto.resume = function resume() {\n      return this.paused(false);\n    };\n\n    _proto.reversed = function reversed(value) {\n      if (arguments.length) {\n        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));\n        return this;\n      }\n\n      return this._rts < 0;\n    };\n\n    _proto.invalidate = function invalidate() {\n      this._initted = this._act = 0;\n      this._zTime = -_tinyNum;\n      return this;\n    };\n\n    _proto.isActive = function isActive() {\n      var parent = this.parent || this._dp,\n          start = this._start,\n          rawTime;\n      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n      var vars = this.vars;\n\n      if (arguments.length > 1) {\n        if (!callback) {\n          delete vars[type];\n        } else {\n          vars[type] = callback;\n          params && (vars[type + \"Params\"] = params);\n          type === \"onUpdate\" && (this._onUpdate = callback);\n        }\n\n        return this;\n      }\n\n      return vars[type];\n    };\n\n    _proto.then = function then(onFulfilled) {\n      var self = this;\n      return new Promise(function (resolve) {\n        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,\n            _resolve = function _resolve() {\n          var _then = self.then;\n          self.then = null;\n          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n          resolve(f);\n          self.then = _then;\n        };\n\n        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n          _resolve();\n        } else {\n          self._prom = _resolve;\n        }\n      });\n    };\n\n    _proto.kill = function kill() {\n      _interrupt(this);\n    };\n\n    return Animation;\n  }();\n\n  _setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n  });\n\n  var Timeline = function (_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n\n    function Timeline(vars, position) {\n      var _this;\n\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      _this = _Animation.call(this, vars) || this;\n      _this.labels = {};\n      _this.smoothChildTiming = !!vars.smoothChildTiming;\n      _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n      _this._sort = _isNotFalse(vars.sortChildren);\n      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n      vars.reversed && _this.reverse();\n      vars.paused && _this.paused(true);\n      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n      return _this;\n    }\n\n    var _proto2 = Timeline.prototype;\n\n    _proto2.to = function to(targets, vars, position) {\n      _createTweenType(0, arguments, this);\n\n      return this;\n    };\n\n    _proto2.from = function from(targets, vars, position) {\n      _createTweenType(1, arguments, this);\n\n      return this;\n    };\n\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n      _createTweenType(2, arguments, this);\n\n      return this;\n    };\n\n    _proto2.set = function set(targets, vars, position) {\n      vars.duration = 0;\n      vars.parent = this;\n      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n      vars.immediateRender = !!vars.immediateRender;\n      new Tween(targets, vars, _parsePosition(this, position), 1);\n      return this;\n    };\n\n    _proto2.call = function call(callback, params, position) {\n      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    };\n\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.duration = duration;\n      vars.stagger = vars.stagger || stagger;\n      vars.onComplete = onCompleteAll;\n      vars.onCompleteParams = onCompleteAllParams;\n      vars.parent = this;\n      new Tween(targets, vars, _parsePosition(this, position));\n      return this;\n    };\n\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.runBackwards = 1;\n      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      toVars.startAt = fromVars;\n      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._dirty ? this.totalDuration() : this._tDur,\n          dur = this._dur,\n          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),\n          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),\n          time,\n          child,\n          next,\n          iteration,\n          cycleDuration,\n          prevPaused,\n          pauseTween,\n          timeScale,\n          prevStart,\n          prevIteration,\n          yoyo,\n          isYoyo;\n      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n\n      if (tTime !== this._tTime || force || crossingStart) {\n        if (prevTime !== this._time && dur) {\n          tTime += this._time - prevTime;\n          totalTime += this._time - prevTime;\n        }\n\n        time = tTime;\n        prevStart = this._start;\n        timeScale = this._ts;\n        prevPaused = !timeScale;\n\n        if (crossingStart) {\n          dur || (prevTime = this._zTime);\n          (totalTime || !suppressEvents) && (this._zTime = totalTime);\n        }\n\n        if (this._repeat) {\n          yoyo = this._yoyo;\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && totalTime < 0) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n          !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration);\n\n          if (yoyo && iteration & 1) {\n            time = dur - time;\n            isYoyo = 1;\n          }\n\n          if (iteration !== prevIteration && !this._lock) {\n            var rewinding = yoyo && prevIteration & 1,\n                doesWrap = rewinding === (yoyo && iteration & 1);\n            iteration < prevIteration && (rewinding = !rewinding);\n            prevTime = rewinding ? 0 : dur;\n            this._lock = 1;\n            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n            this._tTime = tTime;\n            !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n\n            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n              return this;\n            }\n\n            dur = this._dur;\n            tDur = this._tDur;\n\n            if (doesWrap) {\n              this._lock = 2;\n              prevTime = rewinding ? dur : -0.0001;\n              this.render(prevTime, true);\n              this.vars.repeatRefresh && !isYoyo && this.invalidate();\n            }\n\n            this._lock = 0;\n\n            if (!this._ts && !prevPaused) {\n              return this;\n            }\n\n            _propagateYoyoEase(this, isYoyo);\n          }\n        }\n\n        if (this._hasPause && !this._forcing && this._lock < 2) {\n          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n\n          if (pauseTween) {\n            tTime -= time - (time = pauseTween._start);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n        this._act = !timeScale;\n\n        if (!this._initted) {\n          this._onUpdate = this.vars.onUpdate;\n          this._initted = 1;\n          this._zTime = totalTime;\n          prevTime = 0;\n        }\n\n        if (!prevTime && time && !suppressEvents) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        if (time >= prevTime && totalTime >= 0) {\n          child = this._first;\n\n          while (child) {\n            next = child._next;\n\n            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = -_tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        } else {\n          child = this._last;\n          var adjustedTime = totalTime < 0 ? totalTime : time;\n\n          while (child) {\n            next = child._prev;\n\n            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt));\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        }\n\n        if (pauseTween && !suppressEvents) {\n          this.pause();\n          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n\n          if (this._ts) {\n            this._start = prevStart;\n\n            _setEnd(this);\n\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n        if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {\n          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto2.add = function add(child, position) {\n      var _this2 = this;\n\n      _isNumber(position) || (position = _parsePosition(this, position, child));\n\n      if (!(child instanceof Animation)) {\n        if (_isArray(child)) {\n          child.forEach(function (obj) {\n            return _this2.add(obj, position);\n          });\n          return this;\n        }\n\n        if (_isString(child)) {\n          return this.addLabel(child, position);\n        }\n\n        if (_isFunction(child)) {\n          child = Tween.delayedCall(0, child);\n        } else {\n          return this;\n        }\n      }\n\n      return this !== child ? _addToTimeline(this, child, position) : this;\n    };\n\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n      if (nested === void 0) {\n        nested = true;\n      }\n\n      if (tweens === void 0) {\n        tweens = true;\n      }\n\n      if (timelines === void 0) {\n        timelines = true;\n      }\n\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = -_bigNum;\n      }\n\n      var a = [],\n          child = this._first;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          if (child instanceof Tween) {\n            tweens && a.push(child);\n          } else {\n            timelines && a.push(child);\n            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n          }\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.getById = function getById(id) {\n      var animations = this.getChildren(1, 1, 1),\n          i = animations.length;\n\n      while (i--) {\n        if (animations[i].vars.id === id) {\n          return animations[i];\n        }\n      }\n    };\n\n    _proto2.remove = function remove(child) {\n      if (_isString(child)) {\n        return this.removeLabel(child);\n      }\n\n      if (_isFunction(child)) {\n        return this.killTweensOf(child);\n      }\n\n      _removeLinkedListItem(this, child);\n\n      if (child === this._recent) {\n        this._recent = this._last;\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      this._forcing = 1;\n\n      if (!this._dp && this._ts) {\n        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n      }\n\n      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n\n      this._forcing = 0;\n      return this;\n    };\n\n    _proto2.addLabel = function addLabel(label, position) {\n      this.labels[label] = _parsePosition(this, position);\n      return this;\n    };\n\n    _proto2.removeLabel = function removeLabel(label) {\n      delete this.labels[label];\n      return this;\n    };\n\n    _proto2.addPause = function addPause(position, callback, params) {\n      var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n      t.data = \"isPause\";\n      this._hasPause = 1;\n      return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n\n    _proto2.removePause = function removePause(position) {\n      var child = this._first;\n      position = _parsePosition(this, position);\n\n      while (child) {\n        if (child._start === position && child.data === \"isPause\") {\n          _removeFromParent(child);\n        }\n\n        child = child._next;\n      }\n    };\n\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      var tweens = this.getTweensOf(targets, onlyActive),\n          i = tweens.length;\n\n      while (i--) {\n        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n      }\n\n      return this;\n    };\n\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n      var a = [],\n          parsedTargets = toArray(targets),\n          child = this._first,\n          isGlobalTime = _isNumber(onlyActive),\n          children;\n\n      while (child) {\n        if (child instanceof Tween) {\n          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n            a.push(child);\n          }\n        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n          a.push.apply(a, children);\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.tweenTo = function tweenTo(position, vars) {\n      vars = vars || {};\n\n      var tl = this,\n          endTime = _parsePosition(tl, position),\n          _vars = vars,\n          startAt = _vars.startAt,\n          _onStart = _vars.onStart,\n          onStartParams = _vars.onStartParams,\n          immediateRender = _vars.immediateRender,\n          initted,\n          tween = Tween.to(tl, _setDefaults({\n        ease: vars.ease || \"none\",\n        lazy: false,\n        immediateRender: false,\n        time: endTime,\n        overwrite: \"auto\",\n        duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n        onStart: function onStart() {\n          tl.pause();\n\n          if (!initted) {\n            var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n            initted = 1;\n          }\n\n          _onStart && _onStart.apply(tween, onStartParams || []);\n        }\n      }, vars));\n\n      return immediateRender ? tween.render(0) : tween;\n    };\n\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n      return this.tweenTo(toPosition, _setDefaults({\n        startAt: {\n          time: _parsePosition(this, fromPosition)\n        }\n      }, vars));\n    };\n\n    _proto2.recent = function recent() {\n      return this._recent;\n    };\n\n    _proto2.nextLabel = function nextLabel(afterTime) {\n      if (afterTime === void 0) {\n        afterTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n      if (beforeTime === void 0) {\n        beforeTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n\n    _proto2.currentLabel = function currentLabel(value) {\n      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = 0;\n      }\n\n      var child = this._first,\n          labels = this.labels,\n          p;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          child._start += amount;\n          child._end += amount;\n        }\n\n        child = child._next;\n      }\n\n      if (adjustLabels) {\n        for (p in labels) {\n          if (labels[p] >= ignoreBeforeTime) {\n            labels[p] += amount;\n          }\n        }\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.invalidate = function invalidate(soft) {\n      var child = this._first;\n      this._lock = 0;\n\n      while (child) {\n        child.invalidate(soft);\n        child = child._next;\n      }\n\n      return _Animation.prototype.invalidate.call(this, soft);\n    };\n\n    _proto2.clear = function clear(includeLabels) {\n      if (includeLabels === void 0) {\n        includeLabels = true;\n      }\n\n      var child = this._first,\n          next;\n\n      while (child) {\n        next = child._next;\n        this.remove(child);\n        child = next;\n      }\n\n      this._dp && (this._time = this._tTime = this._pTime = 0);\n      includeLabels && (this.labels = {});\n      return _uncache(this);\n    };\n\n    _proto2.totalDuration = function totalDuration(value) {\n      var max = 0,\n          self = this,\n          child = self._last,\n          prevStart = _bigNum,\n          prev,\n          start,\n          parent;\n\n      if (arguments.length) {\n        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n      }\n\n      if (self._dirty) {\n        parent = self.parent;\n\n        while (child) {\n          prev = child._prev;\n          child._dirty && child.totalDuration();\n          start = child._start;\n\n          if (start > prevStart && self._sort && child._ts && !self._lock) {\n            self._lock = 1;\n            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n          } else {\n            prevStart = start;\n          }\n\n          if (start < 0 && child._ts) {\n            max -= start;\n\n            if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n              self._start += start / self._ts;\n              self._time -= start;\n              self._tTime -= start;\n            }\n\n            self.shiftChildren(-start, false, -1e999);\n            prevStart = 0;\n          }\n\n          child._end > max && child._ts && (max = child._end);\n          child = prev;\n        }\n\n        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n\n        self._dirty = 0;\n      }\n\n      return self._tDur;\n    };\n\n    Timeline.updateRoot = function updateRoot(time) {\n      if (_globalTimeline._ts) {\n        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n\n        _lastRenderedFrame = _ticker.frame;\n      }\n\n      if (_ticker.frame >= _nextGCFrame) {\n        _nextGCFrame += _config.autoSleep || 120;\n        var child = _globalTimeline._first;\n        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {\n          while (child && !child._ts) {\n            child = child._next;\n          }\n\n          child || _ticker.sleep();\n        }\n      }\n    };\n\n    return Timeline;\n  }(Animation);\n\n  _setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n  });\n\n  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),\n        index = 0,\n        matchIndex = 0,\n        result,\n        startNums,\n        color,\n        endNum,\n        chunk,\n        startNum,\n        hasRandom,\n        a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n      end = _replaceRandom(end);\n    }\n\n    if (stringFilter) {\n      a = [start, end];\n      stringFilter(a, target, prop);\n      start = a[0];\n      end = a[1];\n    }\n\n    startNums = start.match(_complexStringNumExp) || [];\n\n    while (result = _complexStringNumExp.exec(end)) {\n      endNum = result[0];\n      chunk = end.substring(index, result.index);\n\n      if (color) {\n        color = (color + 1) % 5;\n      } else if (chunk.substr(-5) === \"rgba(\") {\n        color = 1;\n      }\n\n      if (endNum !== startNums[matchIndex++]) {\n        startNum = parseFloat(startNums[matchIndex - 1]) || 0;\n        pt._pt = {\n          _next: pt._pt,\n          p: chunk || matchIndex === 1 ? chunk : \",\",\n          s: startNum,\n          c: endNum.charAt(1) === \"=\" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,\n          m: color && color < 4 ? Math.round : 0\n        };\n        index = _complexStringNumExp.lastIndex;\n      }\n    }\n\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    pt.fp = funcParam;\n\n    if (_relExp.test(end) || hasRandom) {\n      pt.e = 0;\n    }\n\n    this._pt = pt;\n    return pt;\n  },\n      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop],\n        parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](),\n        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,\n        pt;\n\n    if (_isString(end)) {\n      if (~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n      }\n\n      if (end.charAt(1) === \"=\") {\n        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);\n\n        if (pt || pt === 0) {\n          end = pt;\n        }\n      }\n    }\n\n    if (!optional || parsedStart !== end || _forceAllPropTweens) {\n      if (!isNaN(parsedStart * end) && end !== \"\") {\n        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n        funcParam && (pt.fp = funcParam);\n        modifier && pt.modifier(modifier, this, target);\n        return this._pt = pt;\n      }\n\n      !currentValue && !(prop in target) && _missingPlugin(prop, end);\n      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n  },\n      _processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n\n    var copy = {},\n        p;\n\n    for (p in vars) {\n      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n\n    return copy;\n  },\n      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n      if (tween !== _quickTween) {\n        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];\n        i = plugin._props.length;\n\n        while (i--) {\n          ptLookup[plugin._props[i]] = pt;\n        }\n      }\n    }\n\n    return plugin;\n  },\n      _overwritingTween,\n      _forceAllPropTweens,\n      _initTween = function _initTween(tween, time, tTime) {\n    var vars = tween.vars,\n        ease = vars.ease,\n        startAt = vars.startAt,\n        immediateRender = vars.immediateRender,\n        lazy = vars.lazy,\n        onUpdate = vars.onUpdate,\n        onUpdateParams = vars.onUpdateParams,\n        callbackScope = vars.callbackScope,\n        runBackwards = vars.runBackwards,\n        yoyoEase = vars.yoyoEase,\n        keyframes = vars.keyframes,\n        autoRevert = vars.autoRevert,\n        dur = tween._dur,\n        prevStartAt = tween._startAt,\n        targets = tween._targets,\n        parent = tween.parent,\n        fullTargets = parent && parent.data === \"nested\" ? parent.vars.targets : targets,\n        autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites,\n        tl = tween.timeline,\n        cleanVars,\n        i,\n        p,\n        pt,\n        target,\n        hasPriority,\n        gsData,\n        harness,\n        plugin,\n        ptLookup,\n        index,\n        harnessVars,\n        overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n      yoyoEase = tween._yEase;\n      tween._yEase = tween._ease;\n      tween._ease = yoyoEase;\n    }\n\n    tween._from = !tl && !!vars.runBackwards;\n\n    if (!tl || keyframes && !vars.stagger) {\n      harness = targets[0] ? _getCache(targets[0]).harness : 0;\n      harnessVars = harness && vars[harness.prop];\n      cleanVars = _copyExcluding(vars, _reservedProps);\n\n      if (prevStartAt) {\n        prevStartAt._zTime < 0 && prevStartAt.progress(1);\n        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig);\n        prevStartAt._lazy = 0;\n      }\n\n      if (startAt) {\n        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n          data: \"isStart\",\n          overwrite: false,\n          parent: parent,\n          immediateRender: true,\n          lazy: _isNotFalse(lazy),\n          startAt: null,\n          delay: 0,\n          onUpdate: onUpdate,\n          onUpdateParams: onUpdateParams,\n          callbackScope: callbackScope,\n          stagger: 0\n        }, startAt)));\n\n        tween._startAt._dp = 0;\n        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill);\n\n        if (immediateRender) {\n          if (dur && time <= 0 && tTime <= 0) {\n            time && (tween._zTime = time);\n            return;\n          }\n        }\n      } else if (runBackwards && dur) {\n        if (!prevStartAt) {\n          time && (immediateRender = false);\n          p = _setDefaults({\n            overwrite: false,\n            data: \"isFromStart\",\n            lazy: immediateRender && _isNotFalse(lazy),\n            immediateRender: immediateRender,\n            stagger: 0,\n            parent: parent\n          }, cleanVars);\n          harnessVars && (p[harness.prop] = harnessVars);\n\n          _removeFromParent(tween._startAt = Tween.set(targets, p));\n\n          tween._startAt._dp = 0;\n          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));\n          tween._zTime = time;\n\n          if (!immediateRender) {\n            _initTween(tween._startAt, _tinyNum, _tinyNum);\n          } else if (!time) {\n            return;\n          }\n        }\n      }\n\n      tween._pt = tween._ptCache = 0;\n      lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n\n      for (i = 0; i < targets.length; i++) {\n        target = targets[i];\n        gsData = target._gsap || _harness(targets)[i]._gsap;\n        tween._ptLookup[i] = ptLookup = {};\n        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();\n        index = fullTargets === targets ? i : fullTargets.indexOf(target);\n\n        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n          plugin._props.forEach(function (name) {\n            ptLookup[name] = pt;\n          });\n\n          plugin.priority && (hasPriority = 1);\n        }\n\n        if (!harness || harnessVars) {\n          for (p in cleanVars) {\n            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n              plugin.priority && (hasPriority = 1);\n            } else {\n              ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n            }\n          }\n        }\n\n        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n\n        if (autoOverwrite && tween._pt) {\n          _overwritingTween = tween;\n\n          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));\n\n          overwritten = !tween.parent;\n          _overwritingTween = 0;\n        }\n\n        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n      }\n\n      hasPriority && _sortPropTweensByPriority(tween);\n      tween._onInit && tween._onInit(tween);\n    }\n\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten;\n    keyframes && time <= 0 && tl.render(_bigNum, true, true);\n  },\n      _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {\n    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],\n        pt,\n        rootPT,\n        lookup,\n        i;\n\n    if (!ptCache) {\n      ptCache = tween._ptCache[property] = [];\n      lookup = tween._ptLookup;\n      i = tween._targets.length;\n\n      while (i--) {\n        pt = lookup[i][property];\n\n        if (pt && pt.d && pt.d._pt) {\n          pt = pt.d._pt;\n\n          while (pt && pt.p !== property && pt.fp !== property) {\n            pt = pt._next;\n          }\n        }\n\n        if (!pt) {\n          _forceAllPropTweens = 1;\n          tween.vars[property] = \"+=0\";\n\n          _initTween(tween, time);\n\n          _forceAllPropTweens = 0;\n          return 1;\n        }\n\n        ptCache.push(pt);\n      }\n    }\n\n    i = ptCache.length;\n\n    while (i--) {\n      rootPT = ptCache[i];\n      pt = rootPT._pt || rootPT;\n      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;\n      pt.c = value - pt.s;\n      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e));\n      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));\n    }\n  },\n      _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0,\n        propertyAliases = harness && harness.aliases,\n        copy,\n        p,\n        i,\n        aliases;\n\n    if (!propertyAliases) {\n      return vars;\n    }\n\n    copy = _merge({}, vars);\n\n    for (p in propertyAliases) {\n      if (p in copy) {\n        aliases = propertyAliases[p].split(\",\");\n        i = aliases.length;\n\n        while (i--) {\n          copy[aliases[i]] = copy[p];\n        }\n      }\n    }\n\n    return copy;\n  },\n      _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {\n    var ease = obj.ease || easeEach || \"power1.inOut\",\n        p,\n        a;\n\n    if (_isArray(obj)) {\n      a = allProps[prop] || (allProps[prop] = []);\n      obj.forEach(function (value, i) {\n        return a.push({\n          t: i / (obj.length - 1) * 100,\n          v: value,\n          e: ease\n        });\n      });\n    } else {\n      for (p in obj) {\n        a = allProps[p] || (allProps[p] = []);\n        p === \"ease\" || a.push({\n          t: parseFloat(prop),\n          v: obj[p],\n          e: ease\n        });\n      }\n    }\n  },\n      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n  },\n      _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert\",\n      _staggerPropsToSkip = {};\n\n  _forEachName(_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\", function (name) {\n    return _staggerPropsToSkip[name] = 1;\n  });\n\n  var Tween = function (_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n\n    function Tween(targets, vars, position, skipInherit) {\n      var _this3;\n\n      if (typeof vars === \"number\") {\n        position.duration = vars;\n        vars = position;\n        position = null;\n      }\n\n      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n      var _this3$vars = _this3.vars,\n          duration = _this3$vars.duration,\n          delay = _this3$vars.delay,\n          immediateRender = _this3$vars.immediateRender,\n          stagger = _this3$vars.stagger,\n          overwrite = _this3$vars.overwrite,\n          keyframes = _this3$vars.keyframes,\n          defaults = _this3$vars.defaults,\n          scrollTrigger = _this3$vars.scrollTrigger,\n          yoyoEase = _this3$vars.yoyoEase,\n          parent = vars.parent || _globalTimeline,\n          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [targets] : toArray(targets),\n          tl,\n          i,\n          copy,\n          l,\n          p,\n          curTarget,\n          staggerFunc,\n          staggerVarsToMerge;\n      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n      _this3._ptLookup = [];\n      _this3._overwrite = overwrite;\n\n      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n        vars = _this3.vars;\n        tl = _this3.timeline = new Timeline({\n          data: \"nested\",\n          defaults: defaults || {},\n          targets: parent && parent.data === \"nested\" ? parent.vars.targets : parsedTargets\n        });\n        tl.kill();\n        tl.parent = tl._dp = _assertThisInitialized(_this3);\n        tl._start = 0;\n\n        if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n          l = parsedTargets.length;\n          staggerFunc = stagger && distribute(stagger);\n\n          if (_isObject(stagger)) {\n            for (p in stagger) {\n              if (~_staggerTweenProps.indexOf(p)) {\n                staggerVarsToMerge || (staggerVarsToMerge = {});\n                staggerVarsToMerge[p] = stagger[p];\n              }\n            }\n          }\n\n          for (i = 0; i < l; i++) {\n            copy = _copyExcluding(vars, _staggerPropsToSkip);\n            copy.stagger = 0;\n            yoyoEase && (copy.yoyoEase = yoyoEase);\n            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n            curTarget = parsedTargets[i];\n            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n\n            if (!stagger && l === 1 && copy.delay) {\n              _this3._delay = delay = copy.delay;\n              _this3._start += delay;\n              copy.delay = 0;\n            }\n\n            tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);\n            tl._ease = _easeMap.none;\n          }\n\n          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;\n        } else if (keyframes) {\n          _inheritDefaults(_setDefaults(tl.vars.defaults, {\n            ease: \"none\"\n          }));\n\n          tl._ease = _parseEase(keyframes.ease || vars.ease || \"none\");\n          var time = 0,\n              a,\n              kf,\n              v;\n\n          if (_isArray(keyframes)) {\n            keyframes.forEach(function (frame) {\n              return tl.to(parsedTargets, frame, \">\");\n            });\n            tl.duration();\n          } else {\n            copy = {};\n\n            for (p in keyframes) {\n              p === \"ease\" || p === \"easeEach\" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);\n            }\n\n            for (p in copy) {\n              a = copy[p].sort(function (a, b) {\n                return a.t - b.t;\n              });\n              time = 0;\n\n              for (i = 0; i < a.length; i++) {\n                kf = a[i];\n                v = {\n                  ease: kf.e,\n                  duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration\n                };\n                v[p] = kf.v;\n                tl.to(parsedTargets, v, time);\n                time += v.duration;\n              }\n            }\n\n            tl.duration() < duration && tl.to({}, {\n              duration: duration - tl.duration()\n            });\n          }\n        }\n\n        duration || _this3.duration(duration = tl.duration());\n      } else {\n        _this3.timeline = 0;\n      }\n\n      if (overwrite === true && !_suppressOverwrites) {\n        _overwritingTween = _assertThisInitialized(_this3);\n\n        _globalTimeline.killTweensOf(parsedTargets);\n\n        _overwritingTween = 0;\n      }\n\n      _addToTimeline(parent, _assertThisInitialized(_this3), position);\n\n      vars.reversed && _this3.reverse();\n      vars.paused && _this3.paused(true);\n\n      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n        _this3._tTime = -_tinyNum;\n\n        _this3.render(Math.max(0, -delay) || 0);\n      }\n\n      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n      return _this3;\n    }\n\n    var _proto3 = Tween.prototype;\n\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._tDur,\n          dur = this._dur,\n          isNegative = totalTime < 0,\n          tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n          time,\n          pt,\n          iteration,\n          cycleDuration,\n          prevIteration,\n          isYoyo,\n          ratio,\n          timeline,\n          yoyoEase;\n\n      if (!dur) {\n        _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {\n        time = tTime;\n        timeline = this.timeline;\n\n        if (this._repeat) {\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && isNegative) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          isYoyo = this._yoyo && iteration & 1;\n\n          if (isYoyo) {\n            yoyoEase = this._yEase;\n            time = dur - time;\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n\n          if (time === prevTime && !force && this._initted) {\n            this._tTime = tTime;\n            return this;\n          }\n\n          if (iteration !== prevIteration) {\n            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);\n\n            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n              this._lock = force = 1;\n              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n            }\n          }\n        }\n\n        if (!this._initted) {\n          if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {\n            this._tTime = 0;\n            return this;\n          }\n\n          if (prevTime !== this._time) {\n            return this;\n          }\n\n          if (dur !== this._dur) {\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n\n        if (!this._act && this._ts) {\n          this._act = 1;\n          this._lazy = 0;\n        }\n\n        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n\n        if (this._from) {\n          this.ratio = ratio = 1 - ratio;\n        }\n\n        if (time && !prevTime && !suppressEvents) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        pt = this._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n\n        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n\n        if (this._onUpdate && !suppressEvents) {\n          isNegative && _rewindStartAt(this, totalTime, suppressEvents, force);\n\n          _callback(this, \"onUpdate\");\n        }\n\n        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n\n        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n          isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);\n          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {\n            _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto3.targets = function targets() {\n      return this._targets;\n    };\n\n    _proto3.invalidate = function invalidate(soft) {\n      (!soft || !this.vars.runBackwards) && (this._startAt = 0);\n      this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;\n      this._ptLookup = [];\n      this.timeline && this.timeline.invalidate(soft);\n      return _Animation2.prototype.invalidate.call(this, soft);\n    };\n\n    _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {\n      _tickerActive || _ticker.wake();\n      this._ts || this.play();\n      var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),\n          ratio;\n      this._initted || _initTween(this, time);\n      ratio = this._ease(time / this._dur);\n\n      if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {\n        return this.resetTo(property, value, start, startIsRelative);\n      }\n\n      _alignPlayhead(this, 0);\n\n      this.parent || _addLinkedListItem(this._dp, this, \"_first\", \"_last\", this._dp._sort ? \"_start\" : 0);\n      return this.render(0);\n    };\n\n    _proto3.kill = function kill(targets, vars) {\n      if (vars === void 0) {\n        vars = \"all\";\n      }\n\n      if (!targets && (!vars || vars === \"all\")) {\n        this._lazy = this._pt = 0;\n        return this.parent ? _interrupt(this) : this;\n      }\n\n      if (this.timeline) {\n        var tDur = this.timeline.totalDuration();\n        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);\n        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);\n        return this;\n      }\n\n      var parsedTargets = this._targets,\n          killingTargets = targets ? toArray(targets) : parsedTargets,\n          propTweenLookup = this._ptLookup,\n          firstPT = this._pt,\n          overwrittenProps,\n          curLookup,\n          curOverwriteProps,\n          props,\n          p,\n          pt,\n          i;\n\n      if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n        vars === \"all\" && (this._pt = 0);\n        return _interrupt(this);\n      }\n\n      overwrittenProps = this._op = this._op || [];\n\n      if (vars !== \"all\") {\n        if (_isString(vars)) {\n          p = {};\n\n          _forEachName(vars, function (name) {\n            return p[name] = 1;\n          });\n\n          vars = p;\n        }\n\n        vars = _addAliasesToVars(parsedTargets, vars);\n      }\n\n      i = parsedTargets.length;\n\n      while (i--) {\n        if (~killingTargets.indexOf(parsedTargets[i])) {\n          curLookup = propTweenLookup[i];\n\n          if (vars === \"all\") {\n            overwrittenProps[i] = vars;\n            props = curLookup;\n            curOverwriteProps = {};\n          } else {\n            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n            props = vars;\n          }\n\n          for (p in props) {\n            pt = curLookup && curLookup[p];\n\n            if (pt) {\n              if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                _removeLinkedListItem(this, pt, \"_pt\");\n              }\n\n              delete curLookup[p];\n            }\n\n            if (curOverwriteProps !== \"all\") {\n              curOverwriteProps[p] = 1;\n            }\n          }\n        }\n      }\n\n      this._initted && !this._pt && firstPT && _interrupt(this);\n      return this;\n    };\n\n    Tween.to = function to(targets, vars) {\n      return new Tween(targets, vars, arguments[2]);\n    };\n\n    Tween.from = function from(targets, vars) {\n      return _createTweenType(1, arguments);\n    };\n\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n      return new Tween(callback, 0, {\n        immediateRender: false,\n        lazy: false,\n        overwrite: false,\n        delay: delay,\n        onComplete: callback,\n        onReverseComplete: callback,\n        onCompleteParams: params,\n        onReverseCompleteParams: params,\n        callbackScope: scope\n      });\n    };\n\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n      return _createTweenType(2, arguments);\n    };\n\n    Tween.set = function set(targets, vars) {\n      vars.duration = 0;\n      vars.repeatDelay || (vars.repeat = 0);\n      return new Tween(targets, vars);\n    };\n\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n\n    return Tween;\n  }(Animation);\n\n  _setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n  });\n\n  _forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function (name) {\n    Tween[name] = function () {\n      var tl = new Timeline(),\n          params = _slice.call(arguments, 0);\n\n      params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n      return tl[name].apply(tl, params);\n    };\n  });\n\n  var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n  },\n      _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n  },\n      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n  },\n      _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n  },\n      _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n  },\n      _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n  },\n      _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n  },\n      _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt,\n        s = \"\";\n\n    if (!ratio && data.b) {\n      s = data.b;\n    } else if (ratio === 1 && data.e) {\n      s = data.e;\n    } else {\n      while (pt) {\n        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;\n        pt = pt._next;\n      }\n\n      s += data.c;\n    }\n\n    data.set(data.t, data.p, s, data);\n  },\n      _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n  },\n      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt,\n        next;\n\n    while (pt) {\n      next = pt._next;\n      pt.p === property && pt.modifier(modifier, tween, target);\n      pt = next;\n    }\n  },\n      _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt,\n        hasNonDependentRemaining,\n        next;\n\n    while (pt) {\n      next = pt._next;\n\n      if (pt.p === property && !pt.op || pt.op === property) {\n        _removeLinkedListItem(this, pt, \"_pt\");\n      } else if (!pt.dep) {\n        hasNonDependentRemaining = 1;\n      }\n\n      pt = next;\n    }\n\n    return !hasNonDependentRemaining;\n  },\n      _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n  },\n      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt,\n        next,\n        pt2,\n        first,\n        last;\n\n    while (pt) {\n      next = pt._next;\n      pt2 = first;\n\n      while (pt2 && pt2.pr > pt.pr) {\n        pt2 = pt2._next;\n      }\n\n      if (pt._prev = pt2 ? pt2._prev : last) {\n        pt._prev._next = pt;\n      } else {\n        first = pt;\n      }\n\n      if (pt._next = pt2) {\n        pt2._prev = pt;\n      } else {\n        last = pt;\n      }\n\n      pt = next;\n    }\n\n    parent._pt = first;\n  };\n\n  var PropTween = function () {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n      this.t = target;\n      this.s = start;\n      this.c = change;\n      this.p = prop;\n      this.r = renderer || _renderPlain;\n      this.d = data || this;\n      this.set = setter || _setterPlain;\n      this.pr = priority || 0;\n      this._next = next;\n\n      if (next) {\n        next._prev = this;\n      }\n    }\n\n    var _proto4 = PropTween.prototype;\n\n    _proto4.modifier = function modifier(func, tween, target) {\n      this.mSet = this.mSet || this.set;\n      this.set = _setterWithModifier;\n      this.m = func;\n      this.mt = target;\n      this.tween = tween;\n    };\n\n    return PropTween;\n  }();\n\n  _forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function (name) {\n    return _reservedProps[name] = 1;\n  });\n\n  _globals.TweenMax = _globals.TweenLite = Tween;\n  _globals.TimelineLite = _globals.TimelineMax = Timeline;\n  _globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n  });\n  _config.stringFilter = _colorStringFilter;\n\n  var _media = [],\n      _listeners = {},\n      _emptyArray = [],\n      _lastMediaTime = 0,\n      _dispatch = function _dispatch(type) {\n    return (_listeners[type] || _emptyArray).map(function (f) {\n      return f();\n    });\n  },\n      _onMediaChange = function _onMediaChange() {\n    var time = Date.now(),\n        matches = [];\n\n    if (time - _lastMediaTime > 2) {\n      _dispatch(\"matchMediaInit\");\n\n      _media.forEach(function (c) {\n        var queries = c.queries,\n            conditions = c.conditions,\n            match,\n            p,\n            anyMatch,\n            toggled;\n\n        for (p in queries) {\n          match = _win.matchMedia(queries[p]).matches;\n          match && (anyMatch = 1);\n\n          if (match !== conditions[p]) {\n            conditions[p] = match;\n            toggled = 1;\n          }\n        }\n\n        if (toggled) {\n          c.revert();\n          anyMatch && matches.push(c);\n        }\n      });\n\n      _dispatch(\"matchMediaRevert\");\n\n      matches.forEach(function (c) {\n        return c.onMatch(c);\n      });\n      _lastMediaTime = time;\n\n      _dispatch(\"matchMedia\");\n    }\n  };\n\n  var Context = function () {\n    function Context(func, scope) {\n      this.selector = scope && selector(scope);\n      this.data = [];\n      this._r = [];\n      this.isReverted = false;\n      func && this.add(func);\n    }\n\n    var _proto5 = Context.prototype;\n\n    _proto5.add = function add(name, func, scope) {\n      if (_isFunction(name)) {\n        scope = func;\n        func = name;\n        name = _isFunction;\n      }\n\n      var self = this,\n          f = function f() {\n        var prev = _context,\n            prevSelector = self.selector,\n            result;\n        prev && prev !== self && prev.data.push(self);\n        scope && (self.selector = selector(scope));\n        _context = self;\n        result = func.apply(self, arguments);\n        _isFunction(result) && self._r.push(result);\n        _context = prev;\n        self.selector = prevSelector;\n        self.isReverted = false;\n        return result;\n      };\n\n      self.last = f;\n      return name === _isFunction ? f(self) : name ? self[name] = f : f;\n    };\n\n    _proto5.ignore = function ignore(func) {\n      var prev = _context;\n      _context = null;\n      func(this);\n      _context = prev;\n    };\n\n    _proto5.getTweens = function getTweens() {\n      var a = [];\n      this.data.forEach(function (e) {\n        return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === \"nested\") && a.push(e);\n      });\n      return a;\n    };\n\n    _proto5.clear = function clear() {\n      this._r.length = this.data.length = 0;\n    };\n\n    _proto5.kill = function kill(revert, matchMedia) {\n      var _this4 = this;\n\n      if (revert) {\n        var tweens = this.getTweens();\n        this.data.forEach(function (t) {\n          if (t.data === \"isFlip\") {\n            t.revert();\n            t.getChildren(true, true, false).forEach(function (tween) {\n              return tweens.splice(tweens.indexOf(tween), 1);\n            });\n          }\n        });\n        tweens.map(function (t) {\n          return {\n            g: t.globalTime(0),\n            t: t\n          };\n        }).sort(function (a, b) {\n          return b.g - a.g || -1;\n        }).forEach(function (o) {\n          return o.t.revert(revert);\n        });\n        this.data.forEach(function (e) {\n          return !(e instanceof Animation) && e.revert && e.revert(revert);\n        });\n\n        this._r.forEach(function (f) {\n          return f(revert, _this4);\n        });\n\n        this.isReverted = true;\n      } else {\n        this.data.forEach(function (e) {\n          return e.kill && e.kill();\n        });\n      }\n\n      this.clear();\n\n      if (matchMedia) {\n        var i = _media.indexOf(this);\n\n        !!~i && _media.splice(i, 1);\n      }\n    };\n\n    _proto5.revert = function revert(config) {\n      this.kill(config || {});\n    };\n\n    return Context;\n  }();\n\n  var MatchMedia = function () {\n    function MatchMedia(scope) {\n      this.contexts = [];\n      this.scope = scope;\n    }\n\n    var _proto6 = MatchMedia.prototype;\n\n    _proto6.add = function add(conditions, func, scope) {\n      _isObject(conditions) || (conditions = {\n        matches: conditions\n      });\n      var context = new Context(0, scope || this.scope),\n          cond = context.conditions = {},\n          mq,\n          p,\n          active;\n      this.contexts.push(context);\n      func = context.add(\"onMatch\", func);\n      context.queries = conditions;\n\n      for (p in conditions) {\n        if (p === \"all\") {\n          active = 1;\n        } else {\n          mq = _win.matchMedia(conditions[p]);\n\n          if (mq) {\n            _media.indexOf(context) < 0 && _media.push(context);\n            (cond[p] = mq.matches) && (active = 1);\n            mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n          }\n        }\n      }\n\n      active && func(context);\n      return this;\n    };\n\n    _proto6.revert = function revert(config) {\n      this.kill(config || {});\n    };\n\n    _proto6.kill = function kill(revert) {\n      this.contexts.forEach(function (c) {\n        return c.kill(revert, true);\n      });\n    };\n\n    return MatchMedia;\n  }();\n\n  var _gsap = {\n    registerPlugin: function registerPlugin() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      args.forEach(function (config) {\n        return _createPlugin(config);\n      });\n    },\n    timeline: function timeline(vars) {\n      return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n      return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n      _isString(target) && (target = toArray(target)[0]);\n\n      var getter = _getCache(target || {}).get,\n          format = unit ? _passThrough : _numericIfPossible;\n\n      unit === \"native\" && (unit = \"\");\n      return !target ? target : !property ? function (property, unit, uncache) {\n        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n      target = toArray(target);\n\n      if (target.length > 1) {\n        var setters = target.map(function (t) {\n          return gsap.quickSetter(t, property, unit);\n        }),\n            l = setters.length;\n        return function (value) {\n          var i = l;\n\n          while (i--) {\n            setters[i](value);\n          }\n        };\n      }\n\n      target = target[0] || {};\n\n      var Plugin = _plugins[property],\n          cache = _getCache(target),\n          p = cache.harness && (cache.harness.aliases || {})[property] || property,\n          setter = Plugin ? function (value) {\n        var p = new Plugin();\n        _quickTween._pt = 0;\n        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);\n        p.render(1, p);\n        _quickTween._pt && _renderPropTweens(1, _quickTween);\n      } : cache.set(target, p);\n\n      return Plugin ? setter : function (value) {\n        return setter(target, p, unit ? value + unit : value, cache, 1);\n      };\n    },\n    quickTo: function quickTo(target, property, vars) {\n      var _merge2;\n\n      var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = \"+=0.1\", _merge2.paused = true, _merge2), vars || {})),\n          func = function func(value, start, startIsRelative) {\n        return tween.resetTo(property, value, start, startIsRelative);\n      };\n\n      func.tween = tween;\n      return func;\n    },\n    isTweening: function isTweening(targets) {\n      return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n      return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n      return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n      var name = _ref3.name,\n          effect = _ref3.effect,\n          plugins = _ref3.plugins,\n          defaults = _ref3.defaults,\n          extendTimeline = _ref3.extendTimeline;\n      (plugins || \"\").split(\",\").forEach(function (pluginName) {\n        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n      });\n\n      _effects[name] = function (targets, vars, tl) {\n        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n      };\n\n      if (extendTimeline) {\n        Timeline.prototype[name] = function (targets, vars, position) {\n          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n        };\n      }\n    },\n    registerEase: function registerEase(name, ease) {\n      _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n      return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      var tl = new Timeline(vars),\n          child,\n          next;\n      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n\n      _globalTimeline.remove(tl);\n\n      tl._dp = 0;\n      tl._time = tl._tTime = _globalTimeline._time;\n      child = _globalTimeline._first;\n\n      while (child) {\n        next = child._next;\n\n        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n          _addToTimeline(tl, child, child._start - child._delay);\n        }\n\n        child = next;\n      }\n\n      _addToTimeline(_globalTimeline, tl, 0);\n\n      return tl;\n    },\n    context: function context(func, scope) {\n      return func ? new Context(func, scope) : _context;\n    },\n    matchMedia: function matchMedia(scope) {\n      return new MatchMedia(scope);\n    },\n    matchMediaRefresh: function matchMediaRefresh() {\n      return _media.forEach(function (c) {\n        var cond = c.conditions,\n            found,\n            p;\n\n        for (p in cond) {\n          if (cond[p]) {\n            cond[p] = false;\n            found = 1;\n          }\n        }\n\n        found && c.revert();\n      }) || _onMediaChange();\n    },\n    addEventListener: function addEventListener(type, callback) {\n      var a = _listeners[type] || (_listeners[type] = []);\n      ~a.indexOf(callback) || a.push(callback);\n    },\n    removeEventListener: function removeEventListener(type, callback) {\n      var a = _listeners[type],\n          i = a && a.indexOf(callback);\n      i >= 0 && a.splice(i, 1);\n    },\n    utils: {\n      wrap: wrap,\n      wrapYoyo: wrapYoyo,\n      distribute: distribute,\n      random: random,\n      snap: snap,\n      normalize: normalize,\n      getUnit: getUnit,\n      clamp: clamp,\n      splitColor: splitColor,\n      toArray: toArray,\n      selector: selector,\n      mapRange: mapRange,\n      pipe: pipe,\n      unitize: unitize,\n      interpolate: interpolate,\n      shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n      PropTween: PropTween,\n      globals: _addGlobal,\n      Tween: Tween,\n      Timeline: Timeline,\n      Animation: Animation,\n      getCache: _getCache,\n      _removeLinkedListItem: _removeLinkedListItem,\n      reverting: function reverting() {\n        return _reverting;\n      },\n      context: function context(toAdd) {\n        if (toAdd && _context) {\n          _context.data.push(toAdd);\n\n          toAdd._ctx = _context;\n        }\n\n        return _context;\n      },\n      suppressOverwrites: function suppressOverwrites(value) {\n        return _suppressOverwrites = value;\n      }\n    }\n  };\n\n  _forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function (name) {\n    return _gsap[name] = Tween[name];\n  });\n\n  _ticker.add(Timeline.updateRoot);\n\n  _quickTween = _gsap.to({}, {\n    duration: 0\n  });\n\n  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n\n    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {\n      pt = pt._next;\n    }\n\n    return pt;\n  },\n      _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets,\n        p,\n        i,\n        pt;\n\n    for (p in modifiers) {\n      i = targets.length;\n\n      while (i--) {\n        pt = tween._ptLookup[i][p];\n\n        if (pt && (pt = pt.d)) {\n          if (pt._pt) {\n            pt = _getPluginPropTween(pt, p);\n          }\n\n          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n        }\n      }\n    }\n  },\n      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n      name: name,\n      rawVars: 1,\n      init: function init(target, vars, tween) {\n        tween._onInit = function (tween) {\n          var temp, p;\n\n          if (_isString(vars)) {\n            temp = {};\n\n            _forEachName(vars, function (name) {\n              return temp[name] = 1;\n            });\n\n            vars = temp;\n          }\n\n          if (modifier) {\n            temp = {};\n\n            for (p in vars) {\n              temp[p] = modifier(vars[p]);\n            }\n\n            vars = temp;\n          }\n\n          _addModifiers(tween, vars);\n        };\n      }\n    };\n  };\n\n  var gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n      var p, pt, v;\n      this.tween = tween;\n\n      for (p in vars) {\n        v = target.getAttribute(p) || \"\";\n        pt = this.add(target, \"setAttribute\", (v || 0) + \"\", vars[p], index, targets, 0, 0, p);\n        pt.op = p;\n        pt.b = v;\n\n        this._props.push(p);\n      }\n    },\n    render: function render(ratio, data) {\n      var pt = data._pt;\n\n      while (pt) {\n        _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n    }\n  }, {\n    name: \"endArray\",\n    init: function init(target, value) {\n      var i = value.length;\n\n      while (i--) {\n        this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);\n      }\n    }\n  }, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap;\n  Tween.version = Timeline.version = gsap.version = \"3.11.3\";\n  _coreReady = 1;\n  _windowExists() && _wake();\n  var Power0 = _easeMap.Power0,\n      Power1 = _easeMap.Power1,\n      Power2 = _easeMap.Power2,\n      Power3 = _easeMap.Power3,\n      Power4 = _easeMap.Power4,\n      Linear = _easeMap.Linear,\n      Quad = _easeMap.Quad,\n      Cubic = _easeMap.Cubic,\n      Quart = _easeMap.Quart,\n      Quint = _easeMap.Quint,\n      Strong = _easeMap.Strong,\n      Elastic = _easeMap.Elastic,\n      Back = _easeMap.Back,\n      SteppedEase = _easeMap.SteppedEase,\n      Bounce = _easeMap.Bounce,\n      Sine = _easeMap.Sine,\n      Expo = _easeMap.Expo,\n      Circ = _easeMap.Circ;\n\n  var _win$1,\n      _doc$1,\n      _docElement,\n      _pluginInitted,\n      _tempDiv,\n      _tempDivStyler,\n      _recentSetterPlugin,\n      _reverting$1,\n      _windowExists$1 = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _transformProps = {},\n      _RAD2DEG = 180 / Math.PI,\n      _DEG2RAD = Math.PI / 180,\n      _atan2 = Math.atan2,\n      _bigNum$1 = 1e8,\n      _capsExp = /([A-Z])/g,\n      _horizontalExp = /(left|right|width|margin|padding|x)/i,\n      _complexExp = /[\\s,\\(]\\S/,\n      _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n  },\n      _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n  },\n      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n  },\n      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n  },\n      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n  },\n      _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n  },\n      _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n  },\n      _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n  },\n      _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n  },\n      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _transformProp = \"transform\",\n      _transformOriginProp = _transformProp + \"Origin\",\n      _saveStyle = function _saveStyle(property, isNotCSS) {\n    var _this = this;\n\n    var target = this.target,\n        style = target.style;\n\n    if (property in _transformProps) {\n      this.tfm = this.tfm || {};\n\n      if (property !== \"transform\") {\n        property = _propertyAliases[property] || property;\n        ~property.indexOf(\",\") ? property.split(\",\").forEach(function (a) {\n          return _this.tfm[a] = _get(target, a);\n        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property);\n      }\n\n      if (this.props.indexOf(_transformProp) >= 0) {\n        return;\n      }\n\n      if (target._gsap.svg) {\n        this.svgo = target.getAttribute(\"data-svg-origin\");\n        this.props.push(_transformOriginProp, isNotCSS, \"\");\n      }\n\n      property = _transformProp;\n    }\n\n    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);\n  },\n      _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n    if (style.translate) {\n      style.removeProperty(\"translate\");\n      style.removeProperty(\"scale\");\n      style.removeProperty(\"rotate\");\n    }\n  },\n      _revertStyle = function _revertStyle() {\n    var props = this.props,\n        target = this.target,\n        style = target.style,\n        cache = target._gsap,\n        i,\n        p;\n\n    for (i = 0; i < props.length; i += 3) {\n      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].replace(_capsExp, \"-$1\").toLowerCase());\n    }\n\n    if (this.tfm) {\n      for (p in this.tfm) {\n        cache[p] = this.tfm[p];\n      }\n\n      if (cache.svg) {\n        cache.renderTransform();\n        target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n      }\n\n      i = _reverting$1();\n\n      if (i && !i.isStart && !style[_transformProp]) {\n        _removeIndependentTransforms(style);\n\n        cache.uncache = 1;\n      }\n    }\n  },\n      _getStyleSaver = function _getStyleSaver(target, properties) {\n    var saver = {\n      target: target,\n      props: [],\n      revert: _revertStyle,\n      save: _saveStyle\n    };\n    properties && properties.split(\",\").forEach(function (p) {\n      return saver.save(p);\n    });\n    return saver;\n  },\n      _supports3D,\n      _createElement = function _createElement(type, ns) {\n    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc$1.createElement(type);\n    return e.style ? e : _doc$1.createElement(type);\n  },\n      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\";\n  },\n      _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"),\n      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv,\n        s = e.style,\n        i = 5;\n\n    if (property in s && !preferPrefix) {\n      return property;\n    }\n\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n\n    while (i-- && !(_prefixes[i] + property in s)) {}\n\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n  },\n      _initCore = function _initCore() {\n    if (_windowExists$1() && window.document) {\n      _win$1 = window;\n      _doc$1 = _win$1.document;\n      _docElement = _doc$1.documentElement;\n      _tempDiv = _createElement(\"div\") || {\n        style: {}\n      };\n      _tempDivStyler = _createElement(\"div\");\n      _transformProp = _checkPropPrefix(_transformProp);\n      _transformOriginProp = _transformProp + \"Origin\";\n      _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\";\n      _supports3D = !!_checkPropPrefix(\"perspective\");\n      _reverting$1 = gsap.core.reverting;\n      _pluginInitted = 1;\n    }\n  },\n      _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"),\n        oldParent = this.parentNode,\n        oldSibling = this.nextSibling,\n        oldCSS = this.style.cssText,\n        bbox;\n\n    _docElement.appendChild(svg);\n\n    svg.appendChild(this);\n    this.style.display = \"block\";\n\n    if (swapIfPossible) {\n      try {\n        bbox = this.getBBox();\n        this._gsapBBox = this.getBBox;\n        this.getBBox = _getBBoxHack;\n      } catch (e) {}\n    } else if (this._gsapBBox) {\n      bbox = this._gsapBBox();\n    }\n\n    if (oldParent) {\n      if (oldSibling) {\n        oldParent.insertBefore(this, oldSibling);\n      } else {\n        oldParent.appendChild(this);\n      }\n    }\n\n    _docElement.removeChild(svg);\n\n    this.style.cssText = oldCSS;\n    return bbox;\n  },\n      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n\n    while (i--) {\n      if (target.hasAttribute(attributesArray[i])) {\n        return target.getAttribute(attributesArray[i]);\n      }\n    }\n  },\n      _getBBox = function _getBBox(target) {\n    var bounds;\n\n    try {\n      bounds = target.getBBox();\n    } catch (error) {\n      bounds = _getBBoxHack.call(target, true);\n    }\n\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n      x: +_getAttributeFallbacks(target, [\"x\", \"cx\", \"x1\"]) || 0,\n      y: +_getAttributeFallbacks(target, [\"y\", \"cy\", \"y1\"]) || 0,\n      width: 0,\n      height: 0\n    } : bounds;\n  },\n      _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n  },\n      _removeProperty = function _removeProperty(target, property) {\n    if (property) {\n      var style = target.style;\n\n      if (property in _transformProps && property !== _transformOriginProp) {\n        property = _transformProp;\n      }\n\n      if (style.removeProperty) {\n        if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n          property = \"-\" + property;\n        }\n\n        style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n      } else {\n        style.removeAttribute(property);\n      }\n    }\n  },\n      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n  },\n      _nonStandardLayouts = {\n    grid: 1,\n    flex: 1\n  },\n      _convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0,\n        curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\",\n        style = _tempDiv.style,\n        horizontal = _horizontalExp.test(property),\n        isRootSVG = target.tagName.toLowerCase() === \"svg\",\n        measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"),\n        amount = 100,\n        toPixels = unit === \"px\",\n        toPercent = unit === \"%\",\n        px,\n        parent,\n        cache,\n        isSVG;\n\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n      return curValue;\n    }\n\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n      px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n\n    if (isSVG) {\n      parent = (target.ownerSVGElement || {}).parentNode;\n    }\n\n    if (!parent || parent === _doc$1 || !parent.appendChild) {\n      parent = _doc$1.body;\n    }\n\n    cache = parent._gsap;\n\n    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {\n      return _round(curValue / cache.width * amount);\n    } else {\n      (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n      parent === target && (style.position = \"static\");\n      parent.appendChild(_tempDiv);\n      px = _tempDiv[measureProperty];\n      parent.removeChild(_tempDiv);\n      style.position = \"absolute\";\n\n      if (horizontal && toPercent) {\n        cache = _getCache(parent);\n        cache.time = _ticker.time;\n        cache.width = parent[measureProperty];\n      }\n    }\n\n    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n  },\n      _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n\n    if (property in _propertyAliases && property !== \"transform\") {\n      property = _propertyAliases[property];\n\n      if (~property.indexOf(\",\")) {\n        property = property.split(\",\")[0];\n      }\n    }\n\n    if (_transformProps[property] && property !== \"transform\") {\n      value = _parseTransform(target, uncache);\n      value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n      value = target.style[property];\n\n      if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0);\n      }\n    }\n\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n  },\n      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    if (!start || start === \"none\") {\n      var p = _checkPropPrefix(prop, target, 1),\n          s = p && _getComputedProperty(target, p, 1);\n\n      if (s && s !== start) {\n        prop = p;\n        start = s;\n      } else if (prop === \"borderColor\") {\n        start = _getComputedProperty(target, \"borderTopColor\");\n      }\n    }\n\n    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\n        index = 0,\n        matchIndex = 0,\n        a,\n        result,\n        startValues,\n        startNum,\n        color,\n        startValue,\n        endValue,\n        endNum,\n        chunk,\n        endUnit,\n        startUnit,\n        endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (end === \"auto\") {\n      target.style[prop] = end;\n      end = _getComputedProperty(target, prop) || end;\n      target.style[prop] = start;\n    }\n\n    a = [start, end];\n\n    _colorStringFilter(a);\n\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_numWithUnitExp) || [];\n    endValues = end.match(_numWithUnitExp) || [];\n\n    if (endValues.length) {\n      while (result = _numWithUnitExp.exec(end)) {\n        endValue = result[0];\n        chunk = end.substring(index, result.index);\n\n        if (color) {\n          color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n          color = 1;\n        }\n\n        if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n          startNum = parseFloat(startValue) || 0;\n          startUnit = startValue.substr((startNum + \"\").length);\n          endValue.charAt(1) === \"=\" && (endValue = _parseRelative(startNum, endValue) + startUnit);\n          endNum = parseFloat(endValue);\n          endUnit = endValue.substr((endNum + \"\").length);\n          index = _numWithUnitExp.lastIndex - endUnit.length;\n\n          if (!endUnit) {\n            endUnit = endUnit || _config.units[prop] || startUnit;\n\n            if (index === end.length) {\n              end += endUnit;\n              pt.e += endUnit;\n            }\n          }\n\n          if (startUnit !== endUnit) {\n            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n          }\n\n          pt._pt = {\n            _next: pt._pt,\n            p: chunk || matchIndex === 1 ? chunk : \",\",\n            s: startNum,\n            c: endNum - startNum,\n            m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n          };\n        }\n      }\n\n      pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    } else {\n      pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n\n    _relExp.test(end) && (pt.e = 0);\n    this._pt = pt;\n    return pt;\n  },\n      _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n  },\n      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"),\n        x = split[0],\n        y = split[1] || \"50%\";\n\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n      value = x;\n      x = y;\n      y = value;\n    }\n\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n  },\n      _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n      var target = data.t,\n          style = target.style,\n          props = data.u,\n          cache = target._gsap,\n          prop,\n          clearTransforms,\n          i;\n\n      if (props === \"all\" || props === true) {\n        style.cssText = \"\";\n        clearTransforms = 1;\n      } else {\n        props = props.split(\",\");\n        i = props.length;\n\n        while (--i > -1) {\n          prop = props[i];\n\n          if (_transformProps[prop]) {\n            clearTransforms = 1;\n            prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n          }\n\n          _removeProperty(target, prop);\n        }\n      }\n\n      if (clearTransforms) {\n        _removeProperty(target, _transformProp);\n\n        if (cache) {\n          cache.svg && target.removeAttribute(\"transform\");\n\n          _parseTransform(target, 1);\n\n          cache.uncache = 1;\n\n          _removeIndependentTransforms(style);\n        }\n      }\n    }\n  },\n      _specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n      if (tween.data !== \"isFromStart\") {\n        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n        pt.u = endValue;\n        pt.pr = -10;\n        pt.tween = tween;\n\n        plugin._props.push(property);\n\n        return 1;\n      }\n    }\n  },\n      _identity2DMatrix = [1, 0, 0, 1, 0, 0],\n      _rotationalProperties = {},\n      _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n  },\n      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n  },\n      _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || _getCache(target),\n        style = target.style,\n        matrix = _getComputedTransformMatrixAsArray(target),\n        parent,\n        nextSibling,\n        temp,\n        addedToDOM;\n\n    if (cache.svg && target.getAttribute(\"transform\")) {\n      temp = target.transform.baseVal.consolidate().matrix;\n      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\n      return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n      temp = style.display;\n      style.display = \"block\";\n      parent = target.parentNode;\n\n      if (!parent || !target.offsetParent) {\n        addedToDOM = 1;\n        nextSibling = target.nextElementSibling;\n\n        _docElement.appendChild(target);\n      }\n\n      matrix = _getComputedTransformMatrixAsArray(target);\n      temp ? style.display = temp : _removeProperty(target, \"display\");\n\n      if (addedToDOM) {\n        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n      }\n    }\n\n    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\n  },\n      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap,\n        matrix = matrixArray || _getMatrix(target, true),\n        xOriginOld = cache.xOrigin || 0,\n        yOriginOld = cache.yOrigin || 0,\n        xOffsetOld = cache.xOffset || 0,\n        yOffsetOld = cache.yOffset || 0,\n        a = matrix[0],\n        b = matrix[1],\n        c = matrix[2],\n        d = matrix[3],\n        tx = matrix[4],\n        ty = matrix[5],\n        originSplit = origin.split(\" \"),\n        xOrigin = parseFloat(originSplit[0]) || 0,\n        yOrigin = parseFloat(originSplit[1]) || 0,\n        bounds,\n        determinant,\n        x,\n        y;\n\n    if (!originIsAbsolute) {\n      bounds = _getBBox(target);\n      xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n      xOrigin = x;\n      yOrigin = y;\n    }\n\n    if (smooth || smooth !== false && cache.smooth) {\n      tx = xOrigin - xOriginOld;\n      ty = yOrigin - yOriginOld;\n      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n      cache.xOffset = cache.yOffset = 0;\n    }\n\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\";\n\n    if (pluginToAddPropTweensTo) {\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n  },\n      _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new GSCache(target);\n\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n      return cache;\n    }\n\n    var style = target.style,\n        invertedScaleX = cache.scaleX < 0,\n        px = \"px\",\n        deg = \"deg\",\n        cs = getComputedStyle(target),\n        origin = _getComputedProperty(target, _transformOriginProp) || \"0\",\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        rotation,\n        rotationX,\n        rotationY,\n        skewX,\n        skewY,\n        perspective,\n        xOrigin,\n        yOrigin,\n        matrix,\n        angle,\n        cos,\n        sin,\n        a,\n        b,\n        c,\n        d,\n        a12,\n        a22,\n        t1,\n        t2,\n        t3,\n        a13,\n        a23,\n        a33,\n        a42,\n        a43,\n        a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n\n    if (cs.translate) {\n      if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n        style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + (cs[_transformProp] !== \"none\" ? cs[_transformProp] : \"\");\n      }\n\n      style.scale = style.rotate = style.translate = \"none\";\n    }\n\n    matrix = _getMatrix(target, cache.svg);\n\n    if (cache.svg) {\n      if (cache.uncache) {\n        t2 = target.getBBox();\n        origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n        t1 = \"\";\n      } else {\n        t1 = !uncache && target.getAttribute(\"data-svg-origin\");\n      }\n\n      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n\n    if (matrix !== _identity2DMatrix) {\n      a = matrix[0];\n      b = matrix[1];\n      c = matrix[2];\n      d = matrix[3];\n      x = a12 = matrix[4];\n      y = a22 = matrix[5];\n\n      if (matrix.length === 6) {\n        scaleX = Math.sqrt(a * a + b * b);\n        scaleY = Math.sqrt(d * d + c * c);\n        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;\n        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n\n        if (cache.svg) {\n          x -= xOrigin - (xOrigin * a + yOrigin * c);\n          y -= yOrigin - (xOrigin * b + yOrigin * d);\n        }\n      } else {\n        a32 = matrix[6];\n        a42 = matrix[7];\n        a13 = matrix[8];\n        a23 = matrix[9];\n        a33 = matrix[10];\n        a43 = matrix[11];\n        x = matrix[12];\n        y = matrix[13];\n        z = matrix[14];\n        angle = _atan2(a32, a33);\n        rotationX = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a12 * cos + a13 * sin;\n          t2 = a22 * cos + a23 * sin;\n          t3 = a32 * cos + a33 * sin;\n          a13 = a12 * -sin + a13 * cos;\n          a23 = a22 * -sin + a23 * cos;\n          a33 = a32 * -sin + a33 * cos;\n          a43 = a42 * -sin + a43 * cos;\n          a12 = t1;\n          a22 = t2;\n          a32 = t3;\n        }\n\n        angle = _atan2(-c, a33);\n        rotationY = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a * cos - a13 * sin;\n          t2 = b * cos - a23 * sin;\n          t3 = c * cos - a33 * sin;\n          a43 = d * sin + a43 * cos;\n          a = t1;\n          b = t2;\n          c = t3;\n        }\n\n        angle = _atan2(b, a);\n        rotation = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(angle);\n          sin = Math.sin(angle);\n          t1 = a * cos + b * sin;\n          t2 = a12 * cos + a22 * sin;\n          b = b * cos - a * sin;\n          a22 = a22 * cos - a12 * sin;\n          a = t1;\n          a12 = t2;\n        }\n\n        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n          rotationX = rotation = 0;\n          rotationY = 180 - rotationY;\n        }\n\n        scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n        angle = _atan2(a12, a22);\n        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n      }\n\n      if (cache.svg) {\n        t1 = target.getAttribute(\"transform\");\n        cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n        t1 && target.setAttribute(\"transform\", t1);\n      }\n    }\n\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n      if (invertedScaleX) {\n        scaleX *= -1;\n        skewX += rotation <= 0 ? 180 : -180;\n        rotation += rotation <= 0 ? 180 : -180;\n      } else {\n        scaleY *= -1;\n        skewX += skewX <= 0 ? 180 : -180;\n      }\n    }\n\n    uncache = uncache || cache.uncache;\n    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = _round(scaleX);\n    cache.scaleY = _round(scaleY);\n    cache.rotation = _round(rotation) + deg;\n    cache.rotationX = _round(rotationX) + deg;\n    cache.rotationY = _round(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n      style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n  },\n      _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n  },\n      _addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = getUnit(start);\n    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n  },\n      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n\n    _renderCSSTransforms(ratio, cache);\n  },\n      _zeroDeg = \"0deg\",\n      _zeroPx = \"0px\",\n      _endParenthesis = \") \",\n      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this,\n        xPercent = _ref.xPercent,\n        yPercent = _ref.yPercent,\n        x = _ref.x,\n        y = _ref.y,\n        z = _ref.z,\n        rotation = _ref.rotation,\n        rotationY = _ref.rotationY,\n        rotationX = _ref.rotationX,\n        skewX = _ref.skewX,\n        skewY = _ref.skewY,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        transformPerspective = _ref.transformPerspective,\n        force3D = _ref.force3D,\n        target = _ref.target,\n        zOrigin = _ref.zOrigin,\n        transforms = \"\",\n        use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true;\n\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n      var angle = parseFloat(rotationY) * _DEG2RAD,\n          a13 = Math.sin(angle),\n          a33 = Math.cos(angle),\n          cos;\n\n      angle = parseFloat(rotationX) * _DEG2RAD;\n      cos = Math.cos(angle);\n      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n\n    if (transformPerspective !== _zeroPx) {\n      transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n\n    if (xPercent || yPercent) {\n      transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n      transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n\n    if (rotation !== _zeroDeg) {\n      transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n\n    if (rotationY !== _zeroDeg) {\n      transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n\n    if (rotationX !== _zeroDeg) {\n      transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n      transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n\n    if (scaleX !== 1 || scaleY !== 1) {\n      transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n  },\n      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this,\n        xPercent = _ref2.xPercent,\n        yPercent = _ref2.yPercent,\n        x = _ref2.x,\n        y = _ref2.y,\n        rotation = _ref2.rotation,\n        skewX = _ref2.skewX,\n        skewY = _ref2.skewY,\n        scaleX = _ref2.scaleX,\n        scaleY = _ref2.scaleY,\n        target = _ref2.target,\n        xOrigin = _ref2.xOrigin,\n        yOrigin = _ref2.yOrigin,\n        xOffset = _ref2.xOffset,\n        yOffset = _ref2.yOffset,\n        forceCSS = _ref2.forceCSS,\n        tx = parseFloat(x),\n        ty = parseFloat(y),\n        a11,\n        a21,\n        a12,\n        a22,\n        temp;\n\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n\n    if (skewY) {\n      skewY = parseFloat(skewY);\n      skewX += skewY;\n      rotation += skewY;\n    }\n\n    if (rotation || skewX) {\n      rotation *= _DEG2RAD;\n      skewX *= _DEG2RAD;\n      a11 = Math.cos(rotation) * scaleX;\n      a21 = Math.sin(rotation) * scaleX;\n      a12 = Math.sin(rotation - skewX) * -scaleY;\n      a22 = Math.cos(rotation - skewX) * scaleY;\n\n      if (skewX) {\n        skewY *= _DEG2RAD;\n        temp = Math.tan(skewX - skewY);\n        temp = Math.sqrt(1 + temp * temp);\n        a12 *= temp;\n        a22 *= temp;\n\n        if (skewY) {\n          temp = Math.tan(skewY);\n          temp = Math.sqrt(1 + temp * temp);\n          a11 *= temp;\n          a21 *= temp;\n        }\n      }\n\n      a11 = _round(a11);\n      a21 = _round(a21);\n      a12 = _round(a12);\n      a22 = _round(a22);\n    } else {\n      a11 = scaleX;\n      a22 = scaleY;\n      a21 = a12 = 0;\n    }\n\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n      tx = _convertToUnit(target, \"x\", x, \"px\");\n      ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n\n    if (xPercent || yPercent) {\n      temp = target.getBBox();\n      tx = _round(tx + xPercent / 100 * temp.width);\n      ty = _round(ty + yPercent / 100 * temp.height);\n    }\n\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp);\n  },\n      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n    var cap = 360,\n        isString = _isString(endValue),\n        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1),\n        change = endNum - startNum,\n        finalValue = startNum + change + \"deg\",\n        direction,\n        pt;\n\n    if (isString) {\n      direction = endValue.split(\"_\")[1];\n\n      if (direction === \"short\") {\n        change %= cap;\n\n        if (change !== change % (cap / 2)) {\n          change += change < 0 ? cap : -cap;\n        }\n      }\n\n      if (direction === \"cw\" && change < 0) {\n        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      } else if (direction === \"ccw\" && change > 0) {\n        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      }\n    }\n\n    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _assign = function _assign(target, source) {\n    for (var p in source) {\n      target[p] = source[p];\n    }\n\n    return target;\n  },\n      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    var startCache = _assign({}, target._gsap),\n        exclude = \"perspective,force3D,transformOrigin,svgOrigin\",\n        style = target.style,\n        endCache,\n        p,\n        startValue,\n        endValue,\n        startNum,\n        endNum,\n        startUnit,\n        endUnit;\n\n    if (startCache.svg) {\n      startValue = target.getAttribute(\"transform\");\n      target.setAttribute(\"transform\", \"\");\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n\n      _removeProperty(target, _transformProp);\n\n      target.setAttribute(\"transform\", startValue);\n    } else {\n      startValue = getComputedStyle(target)[_transformProp];\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n      style[_transformProp] = startValue;\n    }\n\n    for (p in _transformProps) {\n      startValue = startCache[p];\n      endValue = endCache[p];\n\n      if (startValue !== endValue && exclude.indexOf(p) < 0) {\n        startUnit = getUnit(startValue);\n        endUnit = getUnit(endValue);\n        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n        endNum = parseFloat(endValue);\n        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n        plugin._pt.u = endUnit || 0;\n\n        plugin._props.push(p);\n      }\n    }\n\n    _assign(endCache, startCache);\n  };\n\n  _forEachName(\"padding,margin,Width,Radius\", function (name, index) {\n    var t = \"Top\",\n        r = \"Right\",\n        b = \"Bottom\",\n        l = \"Left\",\n        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\n      return index < 2 ? name + side : \"border\" + side + name;\n    });\n\n    _specialProps[index > 1 ? \"border\" + name : name] = function (plugin, target, property, endValue, tween) {\n      var a, vars;\n\n      if (arguments.length < 4) {\n        a = props.map(function (prop) {\n          return _get(plugin, prop, property);\n        });\n        vars = a.join(\" \");\n        return vars.split(a[0]).length === 5 ? a[0] : vars;\n      }\n\n      a = (endValue + \"\").split(\" \");\n      vars = {};\n      props.forEach(function (prop, i) {\n        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n      });\n      plugin.init(target, vars, tween);\n    };\n  });\n\n  var CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n      return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n      var props = this._props,\n          style = target.style,\n          startAt = tween.vars.startAt,\n          startValue,\n          endValue,\n          endNum,\n          startNum,\n          type,\n          specialProp,\n          p,\n          startUnit,\n          endUnit,\n          relative,\n          isTransformRelated,\n          transformPropTween,\n          cache,\n          smooth,\n          hasPriority,\n          inlineProps;\n      _pluginInitted || _initCore();\n      this.styles = this.styles || _getStyleSaver(target);\n      inlineProps = this.styles.props;\n      this.tween = tween;\n\n      for (p in vars) {\n        if (p === \"autoRound\") {\n          continue;\n        }\n\n        endValue = vars[p];\n\n        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n          continue;\n        }\n\n        type = typeof endValue;\n        specialProp = _specialProps[p];\n\n        if (type === \"function\") {\n          endValue = endValue.call(tween, index, target, targets);\n          type = typeof endValue;\n        }\n\n        if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n          endValue = _replaceRandom(endValue);\n        }\n\n        if (specialProp) {\n          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n        } else if (p.substr(0, 2) === \"--\") {\n          startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n          endValue += \"\";\n          _colorExp.lastIndex = 0;\n\n          if (!_colorExp.test(startValue)) {\n            startUnit = getUnit(startValue);\n            endUnit = getUnit(endValue);\n          }\n\n          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n          this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n          props.push(p);\n          inlineProps.push(p, 0, style[p]);\n        } else if (type !== \"undefined\") {\n          if (startAt && p in startAt) {\n            startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n            _isString(startValue) && ~startValue.indexOf(\"random(\") && (startValue = _replaceRandom(startValue));\n            getUnit(startValue + \"\") || (startValue += _config.units[p] || getUnit(_get(target, p)) || \"\");\n            (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p));\n          } else {\n            startValue = _get(target, p);\n          }\n\n          startNum = parseFloat(startValue);\n          relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n          relative && (endValue = endValue.substr(2));\n          endNum = parseFloat(endValue);\n\n          if (p in _propertyAliases) {\n            if (p === \"autoAlpha\") {\n              if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                startNum = 0;\n              }\n\n              inlineProps.push(\"visibility\", 0, style.visibility);\n\n              _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n            }\n\n            if (p !== \"scale\" && p !== \"transform\") {\n              p = _propertyAliases[p];\n              ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n            }\n          }\n\n          isTransformRelated = p in _transformProps;\n\n          if (isTransformRelated) {\n            this.styles.save(p);\n\n            if (!transformPropTween) {\n              cache = target._gsap;\n              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);\n              smooth = vars.smoothOrigin !== false && cache.smooth;\n              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);\n              transformPropTween.dep = 1;\n            }\n\n            if (p === \"scale\") {\n              this._pt = new PropTween(this._pt, cache, \"scaleY\", startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum || 0, _renderCSSProp);\n              this._pt.u = 0;\n              props.push(\"scaleY\", p);\n              p += \"X\";\n            } else if (p === \"transformOrigin\") {\n              inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);\n              endValue = _convertKeywordsToPercentages(endValue);\n\n              if (cache.svg) {\n                _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n              } else {\n                endUnit = parseFloat(endValue.split(\" \")[2]) || 0;\n                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n\n                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n              }\n\n              continue;\n            } else if (p === \"svgOrigin\") {\n              _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n\n              continue;\n            } else if (p in _rotationalProperties) {\n              _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);\n\n              continue;\n            } else if (p === \"smoothOrigin\") {\n              _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n\n              continue;\n            } else if (p === \"force3D\") {\n              cache[p] = endValue;\n              continue;\n            } else if (p === \"transform\") {\n              _addRawTransformPTs(this, endValue, target);\n\n              continue;\n            }\n          } else if (!(p in style)) {\n            p = _checkPropPrefix(p) || p;\n          }\n\n          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n            startUnit = (startValue + \"\").substr((startNum + \"\").length);\n            endNum || (endNum = 0);\n            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n            this._pt.u = endUnit || 0;\n\n            if (startUnit !== endUnit && endUnit !== \"%\") {\n              this._pt.b = startValue;\n              this._pt.r = _renderCSSPropWithBeginning;\n            }\n          } else if (!(p in style)) {\n            if (p in target) {\n              this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n            } else {\n              _missingPlugin(p, endValue);\n\n              continue;\n            }\n          } else {\n            _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n          }\n\n          isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));\n          props.push(p);\n        }\n      }\n\n      hasPriority && _sortPropTweensByPriority(this);\n    },\n    render: function render(ratio, data) {\n      if (data.tween._time || !_reverting$1()) {\n        var pt = data._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n      } else {\n        data.styles.revert();\n      }\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n      var p = _propertyAliases[property];\n      p && p.indexOf(\",\") < 0 && (property = p);\n      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n    },\n    core: {\n      _removeProperty: _removeProperty,\n      _getMatrix: _getMatrix\n    }\n  };\n  gsap.utils.checkPrefix = _checkPropPrefix;\n  gsap.core.getStyleSaver = _getStyleSaver;\n\n  (function (positionAndScale, rotation, others, aliases) {\n    var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function (name) {\n      _transformProps[name] = 1;\n    });\n\n    _forEachName(rotation, function (name) {\n      _config.units[name] = \"deg\";\n      _rotationalProperties[name] = 1;\n    });\n\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n\n    _forEachName(aliases, function (name) {\n      var split = name.split(\":\");\n      _propertyAliases[split[1]] = all[split[0]];\n    });\n  })(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n\n  _forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function (name) {\n    _config.units[name] = \"px\";\n  });\n\n  gsap.registerPlugin(CSSPlugin);\n\n  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\n      TweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n  exports.Back = Back;\n  exports.Bounce = Bounce;\n  exports.CSSPlugin = CSSPlugin;\n  exports.Circ = Circ;\n  exports.Cubic = Cubic;\n  exports.Elastic = Elastic;\n  exports.Expo = Expo;\n  exports.Linear = Linear;\n  exports.Power0 = Power0;\n  exports.Power1 = Power1;\n  exports.Power2 = Power2;\n  exports.Power3 = Power3;\n  exports.Power4 = Power4;\n  exports.Quad = Quad;\n  exports.Quart = Quart;\n  exports.Quint = Quint;\n  exports.Sine = Sine;\n  exports.SteppedEase = SteppedEase;\n  exports.Strong = Strong;\n  exports.TimelineLite = Timeline;\n  exports.TimelineMax = Timeline;\n  exports.TweenLite = Tween;\n  exports.TweenMax = TweenMaxWithCSS;\n  exports.default = gsapWithCSS;\n  exports.gsap = gsapWithCSS;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gsap/dist/gsap.js\n");

/***/ }),

/***/ "./node_modules/gsap/utils/matrix.js":
/*!*******************************************!*\
  !*** ./node_modules/gsap/utils/matrix.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Matrix2D\": () => (/* binding */ Matrix2D),\n/* harmony export */   \"_getCTM\": () => (/* binding */ _getCTM),\n/* harmony export */   \"_getDocScrollLeft\": () => (/* binding */ _getDocScrollLeft),\n/* harmony export */   \"_getDocScrollTop\": () => (/* binding */ _getDocScrollTop),\n/* harmony export */   \"_isFixed\": () => (/* binding */ _isFixed),\n/* harmony export */   \"_setDoc\": () => (/* binding */ _setDoc),\n/* harmony export */   \"getGlobalMatrix\": () => (/* binding */ getGlobalMatrix)\n/* harmony export */ });\n/*!\n * matrix 3.11.3\n * https://greensock.com\n *\n * Copyright 2008-2022, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _doc,\n    _win,\n    _docElement,\n    _body,\n    _divContainer,\n    _svgContainer,\n    _identityMatrix,\n    _gEl,\n    _transformProp = \"transform\",\n    _transformOriginProp = _transformProp + \"Origin\",\n    _hasOffsetBug,\n    _setDoc = function _setDoc(element) {\n  var doc = element.ownerDocument || element;\n\n  if (!(_transformProp in element.style) && \"msTransform\" in element.style) {\n    //to improve compatibility with old Microsoft browsers\n    _transformProp = \"msTransform\";\n    _transformOriginProp = _transformProp + \"Origin\";\n  }\n\n  while (doc.parentNode && (doc = doc.parentNode)) {}\n\n  _win = window;\n  _identityMatrix = new Matrix2D();\n\n  if (doc) {\n    _doc = doc;\n    _docElement = doc.documentElement;\n    _body = doc.body;\n    _gEl = _doc.createElementNS(\"http://www.w3.org/2000/svg\", \"g\"); // prevent any existing CSS from transforming it\n\n    _gEl.style.transform = \"none\"; // now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon but it's 2020 and it's still not fixed.\n\n    var d1 = doc.createElement(\"div\"),\n        d2 = doc.createElement(\"div\");\n\n    _body.appendChild(d1);\n\n    d1.appendChild(d2);\n    d1.style.position = \"static\";\n    d1.style[_transformProp] = \"translate3d(0,0,1px)\";\n    _hasOffsetBug = d2.offsetParent !== d1;\n\n    _body.removeChild(d1);\n  }\n\n  return doc;\n},\n    _forceNonZeroScale = function _forceNonZeroScale(e) {\n  // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.\n  var a, cache;\n\n  while (e && e !== _body) {\n    cache = e._gsap;\n    cache && cache.uncache && cache.get(e, \"x\"); // force re-parsing of transforms if necessary\n\n    if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {\n      cache.scaleX = cache.scaleY = 1e-4;\n      cache.renderTransform(1, cache);\n      a ? a.push(cache) : a = [cache];\n    }\n\n    e = e.parentNode;\n  }\n\n  return a;\n},\n    // possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.\n// _forceDisplay = e => {\n// \tlet a = [],\n// \t\tparent;\n// \twhile (e && e !== _body) {\n// \t\tparent = e.parentNode;\n// \t\t(_win.getComputedStyle(e).display === \"none\" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = \"block\");\n// \t\tparent || _body.appendChild(e);\n// \t\te = parent;\n// \t}\n// \treturn a;\n// },\n// _revertDisplay = a => {\n// \tfor (let i = 0; i < a.length; i+=3) {\n// \t\ta[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty(\"display\");\n// \t\ta[i+2] || a[i].parentNode.removeChild(a[i]);\n// \t}\n// },\n_svgTemps = [],\n    //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.\n_divTemps = [],\n    _getDocScrollTop = function _getDocScrollTop() {\n  return _win.pageYOffset || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0;\n},\n    _getDocScrollLeft = function _getDocScrollLeft() {\n  return _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0;\n},\n    _svgOwner = function _svgOwner(element) {\n  return element.ownerSVGElement || ((element.tagName + \"\").toLowerCase() === \"svg\" ? element : null);\n},\n    _isFixed = function _isFixed(element) {\n  if (_win.getComputedStyle(element).position === \"fixed\") {\n    return true;\n  }\n\n  element = element.parentNode;\n\n  if (element && element.nodeType === 1) {\n    // avoid document fragments which will throw an error.\n    return _isFixed(element);\n  }\n},\n    _createSibling = function _createSibling(element, i) {\n  if (element.parentNode && (_doc || _setDoc(element))) {\n    var svg = _svgOwner(element),\n        ns = svg ? svg.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\" : \"http://www.w3.org/1999/xhtml\",\n        type = svg ? i ? \"rect\" : \"g\" : \"div\",\n        x = i !== 2 ? 0 : 100,\n        y = i === 3 ? 100 : 0,\n        css = \"position:absolute;display:block;pointer-events:none;margin:0;padding:0;\",\n        e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, \"http\"), type) : _doc.createElement(type);\n\n    if (i) {\n      if (!svg) {\n        if (!_divContainer) {\n          _divContainer = _createSibling(element);\n          _divContainer.style.cssText = css;\n        }\n\n        e.style.cssText = css + \"width:0.1px;height:0.1px;top:\" + y + \"px;left:\" + x + \"px\";\n\n        _divContainer.appendChild(e);\n      } else {\n        _svgContainer || (_svgContainer = _createSibling(element));\n        e.setAttribute(\"width\", 0.01);\n        e.setAttribute(\"height\", 0.01);\n        e.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\n        _svgContainer.appendChild(e);\n      }\n    }\n\n    return e;\n  }\n\n  throw \"Need document and parent.\";\n},\n    _consolidate = function _consolidate(m) {\n  // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://greensock.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n  var c = new Matrix2D(),\n      i = 0;\n\n  for (; i < m.numberOfItems; i++) {\n    c.multiply(m.getItem(i).matrix);\n  }\n\n  return c;\n},\n    _getCTM = function _getCTM(svg) {\n  var m = svg.getCTM(),\n      transform;\n\n  if (!m) {\n    // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.\n    transform = svg.style[_transformProp];\n    svg.style[_transformProp] = \"none\"; // a bug in Firefox causes css transforms to contaminate the getCTM()\n\n    svg.appendChild(_gEl);\n    m = _gEl.getCTM();\n    svg.removeChild(_gEl);\n    transform ? svg.style[_transformProp] = transform : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n  }\n\n  return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.\n},\n    _placeSiblings = function _placeSiblings(element, adjustGOffset) {\n  var svg = _svgOwner(element),\n      isRootSVG = element === svg,\n      siblings = svg ? _svgTemps : _divTemps,\n      parent = element.parentNode,\n      container,\n      m,\n      b,\n      x,\n      y,\n      cs;\n\n  if (element === _win) {\n    return element;\n  }\n\n  siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));\n  container = svg ? _svgContainer : _divContainer;\n\n  if (svg) {\n    if (isRootSVG) {\n      b = _getCTM(element);\n      x = -b.e / b.a;\n      y = -b.f / b.d;\n      m = _identityMatrix;\n    } else if (element.getBBox) {\n      b = element.getBBox();\n      m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.\n\n      m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://greensock.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n\n      x = m.a * b.x + m.c * b.y;\n      y = m.b * b.x + m.d * b.y;\n    } else {\n      // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.\n      m = new Matrix2D();\n      x = y = 0;\n    }\n\n    if (adjustGOffset && element.tagName.toLowerCase() === \"g\") {\n      x = y = 0;\n    }\n\n    (isRootSVG ? svg : parent).appendChild(container);\n    container.setAttribute(\"transform\", \"matrix(\" + m.a + \",\" + m.b + \",\" + m.c + \",\" + m.d + \",\" + (m.e + x) + \",\" + (m.f + y) + \")\");\n  } else {\n    x = y = 0;\n\n    if (_hasOffsetBug) {\n      // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.\n      m = element.offsetParent;\n      b = element;\n\n      while (b && (b = b.parentNode) && b !== m && b.parentNode) {\n        if ((_win.getComputedStyle(b)[_transformProp] + \"\").length > 4) {\n          x = b.offsetLeft;\n          y = b.offsetTop;\n          b = 0;\n        }\n      }\n    }\n\n    cs = _win.getComputedStyle(element);\n\n    if (cs.position !== \"absolute\" && cs.position !== \"fixed\") {\n      m = element.offsetParent;\n\n      while (parent && parent !== m) {\n        // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.\n        x += parent.scrollLeft || 0;\n        y += parent.scrollTop || 0;\n        parent = parent.parentNode;\n      }\n    }\n\n    b = container.style;\n    b.top = element.offsetTop - y + \"px\";\n    b.left = element.offsetLeft - x + \"px\";\n    b[_transformProp] = cs[_transformProp];\n    b[_transformOriginProp] = cs[_transformOriginProp]; // b.border = m.border;\n    // b.borderLeftStyle = m.borderLeftStyle;\n    // b.borderTopStyle = m.borderTopStyle;\n    // b.borderLeftWidth = m.borderLeftWidth;\n    // b.borderTopWidth = m.borderTopWidth;\n\n    b.position = cs.position === \"fixed\" ? \"fixed\" : \"absolute\";\n    element.parentNode.appendChild(container);\n  }\n\n  return container;\n},\n    _setMatrix = function _setMatrix(m, a, b, c, d, e, f) {\n  m.a = a;\n  m.b = b;\n  m.c = c;\n  m.d = d;\n  m.e = e;\n  m.f = f;\n  return m;\n};\n\nvar Matrix2D = /*#__PURE__*/function () {\n  function Matrix2D(a, b, c, d, e, f) {\n    if (a === void 0) {\n      a = 1;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (c === void 0) {\n      c = 0;\n    }\n\n    if (d === void 0) {\n      d = 1;\n    }\n\n    if (e === void 0) {\n      e = 0;\n    }\n\n    if (f === void 0) {\n      f = 0;\n    }\n\n    _setMatrix(this, a, b, c, d, e, f);\n  }\n\n  var _proto = Matrix2D.prototype;\n\n  _proto.inverse = function inverse() {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f,\n        determinant = a * d - b * c || 1e-10;\n    return _setMatrix(this, d / determinant, -b / determinant, -c / determinant, a / determinant, (c * f - d * e) / determinant, -(a * f - b * e) / determinant);\n  };\n\n  _proto.multiply = function multiply(matrix) {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f,\n        a2 = matrix.a,\n        b2 = matrix.c,\n        c2 = matrix.b,\n        d2 = matrix.d,\n        e2 = matrix.e,\n        f2 = matrix.f;\n    return _setMatrix(this, a2 * a + c2 * c, a2 * b + c2 * d, b2 * a + d2 * c, b2 * b + d2 * d, e + e2 * a + f2 * c, f + e2 * b + f2 * d);\n  };\n\n  _proto.clone = function clone() {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);\n  };\n\n  _proto.equals = function equals(matrix) {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f;\n    return a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f;\n  };\n\n  _proto.apply = function apply(point, decoratee) {\n    if (decoratee === void 0) {\n      decoratee = {};\n    }\n\n    var x = point.x,\n        y = point.y,\n        a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f;\n    decoratee.x = x * a + y * c + e || 0;\n    decoratee.y = x * b + y * d + f || 0;\n    return decoratee;\n  };\n\n  return Matrix2D;\n}(); // Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.\n// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.\n// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there\n// are transforms applied to ancestor elements.\n// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:\n//     tx = m.a * x + m.c * y + m.e\n//     ty = m.b * x + m.d * y + m.f\n\nfunction getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) {\n  // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.\n  if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {\n    return new Matrix2D();\n  }\n\n  var zeroScales = _forceNonZeroScale(element),\n      svg = _svgOwner(element),\n      temps = svg ? _svgTemps : _divTemps,\n      container = _placeSiblings(element, adjustGOffset),\n      b1 = temps[0].getBoundingClientRect(),\n      b2 = temps[1].getBoundingClientRect(),\n      b3 = temps[2].getBoundingClientRect(),\n      parent = container.parentNode,\n      isFixed = !includeScrollInFixed && _isFixed(element),\n      m = new Matrix2D((b2.left - b1.left) / 100, (b2.top - b1.top) / 100, (b3.left - b1.left) / 100, (b3.top - b1.top) / 100, b1.left + (isFixed ? 0 : _getDocScrollLeft()), b1.top + (isFixed ? 0 : _getDocScrollTop()));\n\n  parent.removeChild(container);\n\n  if (zeroScales) {\n    b1 = zeroScales.length;\n\n    while (b1--) {\n      b2 = zeroScales[b1];\n      b2.scaleX = b2.scaleY = 0;\n      b2.renderTransform(1, b2);\n    }\n  }\n\n  return inverse ? m.inverse() : m;\n}\n // export function getMatrix(element) {\n// \t_doc || _setDoc(element);\n// \tlet m = (_win.getComputedStyle(element)[_transformProp] + \"\").substr(7).match(/[-.]*\\d+[.e\\-+]*\\d*[e\\-\\+]*\\d*/g),\n// \t\tis2D = m && m.length === 6;\n// \treturn !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gsap/utils/matrix.js\n");

/***/ }),

/***/ "./wp-content/themes/blank/src/scss/app.scss":
/*!***************************************************!*\
  !*** ./wp-content/themes/blank/src/scss/app.scss ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93cC1jb250ZW50L3RoZW1lcy9ibGFuay9zcmMvc2Nzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL3dwLWNvbnRlbnQvdGhlbWVzL2JsYW5rL3NyYy9zY3NzL2FwcC5zY3NzPzM4MDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./wp-content/themes/blank/src/scss/app.scss\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/Link.js":
/*!***********************************************!*\
  !*** ./node_modules/swup/lib/helpers/Link.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Link = function () {\n\tfunction Link(elementOrUrl) {\n\t\t_classCallCheck(this, Link);\n\n\t\tif (elementOrUrl instanceof Element || elementOrUrl instanceof SVGElement) {\n\t\t\tthis.link = elementOrUrl;\n\t\t} else {\n\t\t\tthis.link = document.createElement('a');\n\t\t\tthis.link.href = elementOrUrl;\n\t\t}\n\t}\n\n\t_createClass(Link, [{\n\t\tkey: 'getPath',\n\t\tvalue: function getPath() {\n\t\t\tvar path = this.link.pathname;\n\t\t\tif (path[0] !== '/') {\n\t\t\t\tpath = '/' + path;\n\t\t\t}\n\t\t\treturn path;\n\t\t}\n\t}, {\n\t\tkey: 'getAddress',\n\t\tvalue: function getAddress() {\n\t\t\tvar path = this.link.pathname + this.link.search;\n\n\t\t\tif (this.link.getAttribute('xlink:href')) {\n\t\t\t\tpath = this.link.getAttribute('xlink:href');\n\t\t\t}\n\n\t\t\tif (path[0] !== '/') {\n\t\t\t\tpath = '/' + path;\n\t\t\t}\n\t\t\treturn path;\n\t\t}\n\t}, {\n\t\tkey: 'getHash',\n\t\tvalue: function getHash() {\n\t\t\treturn this.link.hash;\n\t\t}\n\t}]);\n\n\treturn Link;\n}();\n\nexports[\"default\"] = Link;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9MaW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQzs7QUFFRixpQ0FBaUMsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsK0RBQStELHlEQUF5RCxxRUFBcUUsNkRBQTZELHdCQUF3Qjs7QUFFampCLGtEQUFrRCwwQ0FBMEM7O0FBRTVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0EsQ0FBQzs7QUFFRCxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL2hlbHBlcnMvTGluay5qcz9mZTAyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIExpbmsgPSBmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIExpbmsoZWxlbWVudE9yVXJsKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG5cdFx0aWYgKGVsZW1lbnRPclVybCBpbnN0YW5jZW9mIEVsZW1lbnQgfHwgZWxlbWVudE9yVXJsIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuXHRcdFx0dGhpcy5saW5rID0gZWxlbWVudE9yVXJsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdFx0XHR0aGlzLmxpbmsuaHJlZiA9IGVsZW1lbnRPclVybDtcblx0XHR9XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoTGluaywgW3tcblx0XHRrZXk6ICdnZXRQYXRoJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0UGF0aCgpIHtcblx0XHRcdHZhciBwYXRoID0gdGhpcy5saW5rLnBhdGhuYW1lO1xuXHRcdFx0aWYgKHBhdGhbMF0gIT09ICcvJykge1xuXHRcdFx0XHRwYXRoID0gJy8nICsgcGF0aDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwYXRoO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2dldEFkZHJlc3MnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRBZGRyZXNzKCkge1xuXHRcdFx0dmFyIHBhdGggPSB0aGlzLmxpbmsucGF0aG5hbWUgKyB0aGlzLmxpbmsuc2VhcmNoO1xuXG5cdFx0XHRpZiAodGhpcy5saW5rLmdldEF0dHJpYnV0ZSgneGxpbms6aHJlZicpKSB7XG5cdFx0XHRcdHBhdGggPSB0aGlzLmxpbmsuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwYXRoWzBdICE9PSAnLycpIHtcblx0XHRcdFx0cGF0aCA9ICcvJyArIHBhdGg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcGF0aDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdnZXRIYXNoJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0SGFzaCgpIHtcblx0XHRcdHJldHVybiB0aGlzLmxpbmsuaGFzaDtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gTGluaztcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTGluazsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/Link.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/classify.js":
/*!***************************************************!*\
  !*** ./node_modules/swup/lib/helpers/classify.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar classify = function classify(text) {\n\tvar output = text.toString().toLowerCase().replace(/\\s+/g, '-') // Replace spaces with -\n\t.replace(/\\//g, '-') // Replace / with -\n\t.replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n\t.replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n\t.replace(/^-+/, '') // Trim - from start of text\n\t.replace(/-+$/, ''); // Trim - from end of text\n\tif (output[0] === '/') output = output.splice(1);\n\tif (output === '') output = 'homepage';\n\treturn output;\n};\n\nexports[\"default\"] = classify;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9jbGFzc2lmeS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9zd3VwL2xpYi9oZWxwZXJzL2NsYXNzaWZ5LmpzPzEzNWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xudmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gY2xhc3NpZnkodGV4dCkge1xuXHR2YXIgb3V0cHV0ID0gdGV4dC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnLScpIC8vIFJlcGxhY2Ugc3BhY2VzIHdpdGggLVxuXHQucmVwbGFjZSgvXFwvL2csICctJykgLy8gUmVwbGFjZSAvIHdpdGggLVxuXHQucmVwbGFjZSgvW15cXHdcXC1dKy9nLCAnJykgLy8gUmVtb3ZlIGFsbCBub24td29yZCBjaGFyc1xuXHQucmVwbGFjZSgvXFwtXFwtKy9nLCAnLScpIC8vIFJlcGxhY2UgbXVsdGlwbGUgLSB3aXRoIHNpbmdsZSAtXG5cdC5yZXBsYWNlKC9eLSsvLCAnJykgLy8gVHJpbSAtIGZyb20gc3RhcnQgb2YgdGV4dFxuXHQucmVwbGFjZSgvLSskLywgJycpOyAvLyBUcmltIC0gZnJvbSBlbmQgb2YgdGV4dFxuXHRpZiAob3V0cHV0WzBdID09PSAnLycpIG91dHB1dCA9IG91dHB1dC5zcGxpY2UoMSk7XG5cdGlmIChvdXRwdXQgPT09ICcnKSBvdXRwdXQgPSAnaG9tZXBhZ2UnO1xuXHRyZXR1cm4gb3V0cHV0O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY2xhc3NpZnk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/classify.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/cleanupAnimationClasses.js":
/*!******************************************************************!*\
  !*** ./node_modules/swup/lib/helpers/cleanupAnimationClasses.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar cleanupAnimationClasses = function cleanupAnimationClasses() {\n\tdocument.documentElement.className.split(' ').forEach(function (classItem) {\n\t\tif (\n\t\t// remove \"to-{page}\" classes\n\t\tnew RegExp('^to-').test(classItem) ||\n\t\t// remove all other classes\n\t\tclassItem === 'is-changing' || classItem === 'is-rendering' || classItem === 'is-popstate') {\n\t\t\tdocument.documentElement.classList.remove(classItem);\n\t\t}\n\t});\n};\n\nexports[\"default\"] = cleanupAnimationClasses;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9jbGVhbnVwQW5pbWF0aW9uQ2xhc3Nlcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsS0FBSztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9jbGVhbnVwQW5pbWF0aW9uQ2xhc3Nlcy5qcz9hOGM2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcbnZhciBjbGVhbnVwQW5pbWF0aW9uQ2xhc3NlcyA9IGZ1bmN0aW9uIGNsZWFudXBBbmltYXRpb25DbGFzc2VzKCkge1xuXHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NJdGVtKSB7XG5cdFx0aWYgKFxuXHRcdC8vIHJlbW92ZSBcInRvLXtwYWdlfVwiIGNsYXNzZXNcblx0XHRuZXcgUmVnRXhwKCdedG8tJykudGVzdChjbGFzc0l0ZW0pIHx8XG5cdFx0Ly8gcmVtb3ZlIGFsbCBvdGhlciBjbGFzc2VzXG5cdFx0Y2xhc3NJdGVtID09PSAnaXMtY2hhbmdpbmcnIHx8IGNsYXNzSXRlbSA9PT0gJ2lzLXJlbmRlcmluZycgfHwgY2xhc3NJdGVtID09PSAnaXMtcG9wc3RhdGUnKSB7XG5cdFx0XHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc0l0ZW0pO1xuXHRcdH1cblx0fSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjbGVhbnVwQW5pbWF0aW9uQ2xhc3NlczsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/cleanupAnimationClasses.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/createHistoryRecord.js":
/*!**************************************************************!*\
  !*** ./node_modules/swup/lib/helpers/createHistoryRecord.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar createHistoryRecord = function createHistoryRecord(url) {\n\twindow.history.pushState({\n\t\turl: url || window.location.href.split(window.location.hostname)[1],\n\t\trandom: Math.random(),\n\t\tsource: 'swup'\n\t}, document.title, url || window.location.href.split(window.location.hostname)[1]);\n};\n\nexports[\"default\"] = createHistoryRecord;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9jcmVhdGVIaXN0b3J5UmVjb3JkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUEsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9zd3VwL2xpYi9oZWxwZXJzL2NyZWF0ZUhpc3RvcnlSZWNvcmQuanM/ZjhhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG52YXIgY3JlYXRlSGlzdG9yeVJlY29yZCA9IGZ1bmN0aW9uIGNyZWF0ZUhpc3RvcnlSZWNvcmQodXJsKSB7XG5cdHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7XG5cdFx0dXJsOiB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKVsxXSxcblx0XHRyYW5kb206IE1hdGgucmFuZG9tKCksXG5cdFx0c291cmNlOiAnc3d1cCdcblx0fSwgZG9jdW1lbnQudGl0bGUsIHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpWzFdKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhpc3RvcnlSZWNvcmQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/createHistoryRecord.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/fetch.js":
/*!************************************************!*\
  !*** ./node_modules/swup/lib/helpers/fetch.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar fetch = function fetch(setOptions) {\n\tvar callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\tvar defaults = {\n\t\turl: window.location.pathname + window.location.search,\n\t\tmethod: 'GET',\n\t\tdata: null,\n\t\theaders: {}\n\t};\n\n\tvar options = _extends({}, defaults, setOptions);\n\n\tvar request = new XMLHttpRequest();\n\n\trequest.onreadystatechange = function () {\n\t\tif (request.readyState === 4) {\n\t\t\tif (request.status !== 500) {\n\t\t\t\tcallback(request);\n\t\t\t} else {\n\t\t\t\tcallback(request);\n\t\t\t}\n\t\t}\n\t};\n\n\trequest.open(options.method, options.url, true);\n\tObject.keys(options.headers).forEach(function (key) {\n\t\trequest.setRequestHeader(key, options.headers[key]);\n\t});\n\trequest.send(options.data);\n\treturn request;\n};\n\nexports[\"default\"] = fetch;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9mZXRjaC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7O0FBRUYsb0RBQW9ELGdCQUFnQixzQkFBc0IsT0FBTywyQkFBMkIsMEJBQTBCLHlEQUF5RCxpQ0FBaUM7O0FBRWhQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjs7QUFFMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL2hlbHBlcnMvZmV0Y2guanM/NjY1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBmZXRjaCA9IGZ1bmN0aW9uIGZldGNoKHNldE9wdGlvbnMpIHtcblx0dmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuXHR2YXIgZGVmYXVsdHMgPSB7XG5cdFx0dXJsOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoLFxuXHRcdG1ldGhvZDogJ0dFVCcsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRoZWFkZXJzOiB7fVxuXHR9O1xuXG5cdHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLCBzZXRPcHRpb25zKTtcblxuXHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcblx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gNTAwKSB7XG5cdFx0XHRcdGNhbGxiYWNrKHJlcXVlc3QpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FsbGJhY2socmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHJlcXVlc3Qub3BlbihvcHRpb25zLm1ldGhvZCwgb3B0aW9ucy51cmwsIHRydWUpO1xuXHRPYmplY3Qua2V5cyhvcHRpb25zLmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIG9wdGlvbnMuaGVhZGVyc1trZXldKTtcblx0fSk7XG5cdHJlcXVlc3Quc2VuZChvcHRpb25zLmRhdGEpO1xuXHRyZXR1cm4gcmVxdWVzdDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZldGNoOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/fetch.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/getCurrentUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/swup/lib/helpers/getCurrentUrl.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar getCurrentUrl = function getCurrentUrl() {\n\treturn window.location.pathname + window.location.search;\n};\n\nexports[\"default\"] = getCurrentUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9nZXRDdXJyZW50VXJsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTs7QUFFQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL2hlbHBlcnMvZ2V0Q3VycmVudFVybC5qcz81ZTVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xudmFyIGdldEN1cnJlbnRVcmwgPSBmdW5jdGlvbiBnZXRDdXJyZW50VXJsKCkge1xuXHRyZXR1cm4gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdldEN1cnJlbnRVcmw7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/getCurrentUrl.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/getDataFromHtml.js":
/*!**********************************************************!*\
  !*** ./node_modules/swup/lib/helpers/getDataFromHtml.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/swup/lib/utils/index.js\");\n\nvar getDataFromHtml = function getDataFromHtml(html, containers) {\n\tvar fakeDom = document.createElement('html');\n\tfakeDom.innerHTML = html;\n\tvar blocks = [];\n\n\tcontainers.forEach(function (selector) {\n\t\tif ((0, _utils.query)(selector, fakeDom) == null) {\n\t\t\tconsole.warn('[swup] Container ' + selector + ' not found on page.');\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif ((0, _utils.queryAll)(selector).length !== (0, _utils.queryAll)(selector, fakeDom).length) {\n\t\t\t\tconsole.warn('[swup] Mismatched number of containers found on new page.');\n\t\t\t}\n\t\t\t(0, _utils.queryAll)(selector).forEach(function (item, index) {\n\t\t\t\t(0, _utils.queryAll)(selector, fakeDom)[index].setAttribute('data-swup', blocks.length);\n\t\t\t\tblocks.push((0, _utils.queryAll)(selector, fakeDom)[index].outerHTML);\n\t\t\t});\n\t\t}\n\t});\n\n\tvar json = {\n\t\ttitle: (fakeDom.querySelector('title') || {}).innerText,\n\t\tpageClass: fakeDom.querySelector('body').className,\n\t\toriginalContent: html,\n\t\tblocks: blocks\n\t};\n\n\t// to prevent memory leaks\n\tfakeDom.innerHTML = '';\n\tfakeDom = null;\n\n\treturn json;\n};\n\nexports[\"default\"] = getDataFromHtml;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9nZXREYXRhRnJvbUh0bWwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDOztBQUVGLGFBQWEsbUJBQU8sQ0FBQyx3REFBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTs7QUFFRjtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL2hlbHBlcnMvZ2V0RGF0YUZyb21IdG1sLmpzPzQ4NjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIGdldERhdGFGcm9tSHRtbCA9IGZ1bmN0aW9uIGdldERhdGFGcm9tSHRtbChodG1sLCBjb250YWluZXJzKSB7XG5cdHZhciBmYWtlRG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuXHRmYWtlRG9tLmlubmVySFRNTCA9IGh0bWw7XG5cdHZhciBibG9ja3MgPSBbXTtcblxuXHRjb250YWluZXJzLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG5cdFx0aWYgKCgwLCBfdXRpbHMucXVlcnkpKHNlbGVjdG9yLCBmYWtlRG9tKSA9PSBudWxsKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ1tzd3VwXSBDb250YWluZXIgJyArIHNlbGVjdG9yICsgJyBub3QgZm91bmQgb24gcGFnZS4nKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoKDAsIF91dGlscy5xdWVyeUFsbCkoc2VsZWN0b3IpLmxlbmd0aCAhPT0gKDAsIF91dGlscy5xdWVyeUFsbCkoc2VsZWN0b3IsIGZha2VEb20pLmxlbmd0aCkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1tzd3VwXSBNaXNtYXRjaGVkIG51bWJlciBvZiBjb250YWluZXJzIGZvdW5kIG9uIG5ldyBwYWdlLicpO1xuXHRcdFx0fVxuXHRcdFx0KDAsIF91dGlscy5xdWVyeUFsbCkoc2VsZWN0b3IpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG5cdFx0XHRcdCgwLCBfdXRpbHMucXVlcnlBbGwpKHNlbGVjdG9yLCBmYWtlRG9tKVtpbmRleF0uc2V0QXR0cmlidXRlKCdkYXRhLXN3dXAnLCBibG9ja3MubGVuZ3RoKTtcblx0XHRcdFx0YmxvY2tzLnB1c2goKDAsIF91dGlscy5xdWVyeUFsbCkoc2VsZWN0b3IsIGZha2VEb20pW2luZGV4XS5vdXRlckhUTUwpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHR2YXIganNvbiA9IHtcblx0XHR0aXRsZTogKGZha2VEb20ucXVlcnlTZWxlY3RvcigndGl0bGUnKSB8fCB7fSkuaW5uZXJUZXh0LFxuXHRcdHBhZ2VDbGFzczogZmFrZURvbS5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NOYW1lLFxuXHRcdG9yaWdpbmFsQ29udGVudDogaHRtbCxcblx0XHRibG9ja3M6IGJsb2Nrc1xuXHR9O1xuXG5cdC8vIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdGZha2VEb20uaW5uZXJIVE1MID0gJyc7XG5cdGZha2VEb20gPSBudWxsO1xuXG5cdHJldHVybiBqc29uO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0RGF0YUZyb21IdG1sOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/getDataFromHtml.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/index.js":
/*!************************************************!*\
  !*** ./node_modules/swup/lib/helpers/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cleanupAnimationClasses = exports.Link = exports.markSwupElements = exports.normalizeUrl = exports.getCurrentUrl = exports.transitionProperty = exports.transitionEnd = exports.fetch = exports.getDataFromHtml = exports.createHistoryRecord = exports.classify = undefined;\n\nvar _classify = __webpack_require__(/*! ./classify */ \"./node_modules/swup/lib/helpers/classify.js\");\n\nvar _classify2 = _interopRequireDefault(_classify);\n\nvar _createHistoryRecord = __webpack_require__(/*! ./createHistoryRecord */ \"./node_modules/swup/lib/helpers/createHistoryRecord.js\");\n\nvar _createHistoryRecord2 = _interopRequireDefault(_createHistoryRecord);\n\nvar _getDataFromHtml = __webpack_require__(/*! ./getDataFromHtml */ \"./node_modules/swup/lib/helpers/getDataFromHtml.js\");\n\nvar _getDataFromHtml2 = _interopRequireDefault(_getDataFromHtml);\n\nvar _fetch = __webpack_require__(/*! ./fetch */ \"./node_modules/swup/lib/helpers/fetch.js\");\n\nvar _fetch2 = _interopRequireDefault(_fetch);\n\nvar _transitionEnd = __webpack_require__(/*! ./transitionEnd */ \"./node_modules/swup/lib/helpers/transitionEnd.js\");\n\nvar _transitionEnd2 = _interopRequireDefault(_transitionEnd);\n\nvar _transitionProperty = __webpack_require__(/*! ./transitionProperty */ \"./node_modules/swup/lib/helpers/transitionProperty.js\");\n\nvar _transitionProperty2 = _interopRequireDefault(_transitionProperty);\n\nvar _getCurrentUrl = __webpack_require__(/*! ./getCurrentUrl */ \"./node_modules/swup/lib/helpers/getCurrentUrl.js\");\n\nvar _getCurrentUrl2 = _interopRequireDefault(_getCurrentUrl);\n\nvar _normalizeUrl = __webpack_require__(/*! ./normalizeUrl */ \"./node_modules/swup/lib/helpers/normalizeUrl.js\");\n\nvar _normalizeUrl2 = _interopRequireDefault(_normalizeUrl);\n\nvar _markSwupElements = __webpack_require__(/*! ./markSwupElements */ \"./node_modules/swup/lib/helpers/markSwupElements.js\");\n\nvar _markSwupElements2 = _interopRequireDefault(_markSwupElements);\n\nvar _Link = __webpack_require__(/*! ./Link */ \"./node_modules/swup/lib/helpers/Link.js\");\n\nvar _Link2 = _interopRequireDefault(_Link);\n\nvar _cleanupAnimationClasses = __webpack_require__(/*! ./cleanupAnimationClasses */ \"./node_modules/swup/lib/helpers/cleanupAnimationClasses.js\");\n\nvar _cleanupAnimationClasses2 = _interopRequireDefault(_cleanupAnimationClasses);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar classify = exports.classify = _classify2.default;\nvar createHistoryRecord = exports.createHistoryRecord = _createHistoryRecord2.default;\nvar getDataFromHtml = exports.getDataFromHtml = _getDataFromHtml2.default;\nvar fetch = exports.fetch = _fetch2.default;\nvar transitionEnd = exports.transitionEnd = _transitionEnd2.default;\nvar transitionProperty = exports.transitionProperty = _transitionProperty2.default;\nvar getCurrentUrl = exports.getCurrentUrl = _getCurrentUrl2.default;\nvar normalizeUrl = exports.normalizeUrl = _normalizeUrl2.default;\nvar markSwupElements = exports.markSwupElements = _markSwupElements2.default;\nvar Link = exports.Link = _Link2.default;\nvar cleanupAnimationClasses = exports.cleanupAnimationClasses = _cleanupAnimationClasses2.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQkFBK0IsR0FBRyxZQUFZLEdBQUcsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcscUJBQXFCLEdBQUcsMEJBQTBCLEdBQUcscUJBQXFCLEdBQUcsYUFBYSxHQUFHLHVCQUF1QixHQUFHLDJCQUEyQixHQUFHLGdCQUFnQjs7QUFFeFEsZ0JBQWdCLG1CQUFPLENBQUMsK0RBQVk7O0FBRXBDOztBQUVBLDJCQUEyQixtQkFBTyxDQUFDLHFGQUF1Qjs7QUFFMUQ7O0FBRUEsdUJBQXVCLG1CQUFPLENBQUMsNkVBQW1COztBQUVsRDs7QUFFQSxhQUFhLG1CQUFPLENBQUMseURBQVM7O0FBRTlCOztBQUVBLHFCQUFxQixtQkFBTyxDQUFDLHlFQUFpQjs7QUFFOUM7O0FBRUEsMEJBQTBCLG1CQUFPLENBQUMsbUZBQXNCOztBQUV4RDs7QUFFQSxxQkFBcUIsbUJBQU8sQ0FBQyx5RUFBaUI7O0FBRTlDOztBQUVBLG9CQUFvQixtQkFBTyxDQUFDLHVFQUFnQjs7QUFFNUM7O0FBRUEsd0JBQXdCLG1CQUFPLENBQUMsK0VBQW9COztBQUVwRDs7QUFFQSxZQUFZLG1CQUFPLENBQUMsdURBQVE7O0FBRTVCOztBQUVBLCtCQUErQixtQkFBTyxDQUFDLDZGQUEyQjs7QUFFbEU7O0FBRUEsdUNBQXVDLHVDQUF1Qzs7QUFFOUUsZUFBZSxnQkFBZ0I7QUFDL0IsMEJBQTBCLDJCQUEyQjtBQUNyRCxzQkFBc0IsdUJBQXVCO0FBQzdDLFlBQVksYUFBYTtBQUN6QixvQkFBb0IscUJBQXFCO0FBQ3pDLHlCQUF5QiwwQkFBMEI7QUFDbkQsb0JBQW9CLHFCQUFxQjtBQUN6QyxtQkFBbUIsb0JBQW9CO0FBQ3ZDLHVCQUF1Qix3QkFBd0I7QUFDL0MsV0FBVyxZQUFZO0FBQ3ZCLDhCQUE4QiwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9zd3VwL2xpYi9oZWxwZXJzL2luZGV4LmpzP2U1YTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jbGVhbnVwQW5pbWF0aW9uQ2xhc3NlcyA9IGV4cG9ydHMuTGluayA9IGV4cG9ydHMubWFya1N3dXBFbGVtZW50cyA9IGV4cG9ydHMubm9ybWFsaXplVXJsID0gZXhwb3J0cy5nZXRDdXJyZW50VXJsID0gZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSBleHBvcnRzLmZldGNoID0gZXhwb3J0cy5nZXREYXRhRnJvbUh0bWwgPSBleHBvcnRzLmNyZWF0ZUhpc3RvcnlSZWNvcmQgPSBleHBvcnRzLmNsYXNzaWZ5ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NsYXNzaWZ5ID0gcmVxdWlyZSgnLi9jbGFzc2lmeScpO1xuXG52YXIgX2NsYXNzaWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzaWZ5KTtcblxudmFyIF9jcmVhdGVIaXN0b3J5UmVjb3JkID0gcmVxdWlyZSgnLi9jcmVhdGVIaXN0b3J5UmVjb3JkJyk7XG5cbnZhciBfY3JlYXRlSGlzdG9yeVJlY29yZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIaXN0b3J5UmVjb3JkKTtcblxudmFyIF9nZXREYXRhRnJvbUh0bWwgPSByZXF1aXJlKCcuL2dldERhdGFGcm9tSHRtbCcpO1xuXG52YXIgX2dldERhdGFGcm9tSHRtbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXREYXRhRnJvbUh0bWwpO1xuXG52YXIgX2ZldGNoID0gcmVxdWlyZSgnLi9mZXRjaCcpO1xuXG52YXIgX2ZldGNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZldGNoKTtcblxudmFyIF90cmFuc2l0aW9uRW5kID0gcmVxdWlyZSgnLi90cmFuc2l0aW9uRW5kJyk7XG5cbnZhciBfdHJhbnNpdGlvbkVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9uRW5kKTtcblxudmFyIF90cmFuc2l0aW9uUHJvcGVydHkgPSByZXF1aXJlKCcuL3RyYW5zaXRpb25Qcm9wZXJ0eScpO1xuXG52YXIgX3RyYW5zaXRpb25Qcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9uUHJvcGVydHkpO1xuXG52YXIgX2dldEN1cnJlbnRVcmwgPSByZXF1aXJlKCcuL2dldEN1cnJlbnRVcmwnKTtcblxudmFyIF9nZXRDdXJyZW50VXJsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEN1cnJlbnRVcmwpO1xuXG52YXIgX25vcm1hbGl6ZVVybCA9IHJlcXVpcmUoJy4vbm9ybWFsaXplVXJsJyk7XG5cbnZhciBfbm9ybWFsaXplVXJsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX25vcm1hbGl6ZVVybCk7XG5cbnZhciBfbWFya1N3dXBFbGVtZW50cyA9IHJlcXVpcmUoJy4vbWFya1N3dXBFbGVtZW50cycpO1xuXG52YXIgX21hcmtTd3VwRWxlbWVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFya1N3dXBFbGVtZW50cyk7XG5cbnZhciBfTGluayA9IHJlcXVpcmUoJy4vTGluaycpO1xuXG52YXIgX0xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluayk7XG5cbnZhciBfY2xlYW51cEFuaW1hdGlvbkNsYXNzZXMgPSByZXF1aXJlKCcuL2NsZWFudXBBbmltYXRpb25DbGFzc2VzJyk7XG5cbnZhciBfY2xlYW51cEFuaW1hdGlvbkNsYXNzZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xlYW51cEFuaW1hdGlvbkNsYXNzZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY2xhc3NpZnkgPSBleHBvcnRzLmNsYXNzaWZ5ID0gX2NsYXNzaWZ5Mi5kZWZhdWx0O1xudmFyIGNyZWF0ZUhpc3RvcnlSZWNvcmQgPSBleHBvcnRzLmNyZWF0ZUhpc3RvcnlSZWNvcmQgPSBfY3JlYXRlSGlzdG9yeVJlY29yZDIuZGVmYXVsdDtcbnZhciBnZXREYXRhRnJvbUh0bWwgPSBleHBvcnRzLmdldERhdGFGcm9tSHRtbCA9IF9nZXREYXRhRnJvbUh0bWwyLmRlZmF1bHQ7XG52YXIgZmV0Y2ggPSBleHBvcnRzLmZldGNoID0gX2ZldGNoMi5kZWZhdWx0O1xudmFyIHRyYW5zaXRpb25FbmQgPSBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSBfdHJhbnNpdGlvbkVuZDIuZGVmYXVsdDtcbnZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IF90cmFuc2l0aW9uUHJvcGVydHkyLmRlZmF1bHQ7XG52YXIgZ2V0Q3VycmVudFVybCA9IGV4cG9ydHMuZ2V0Q3VycmVudFVybCA9IF9nZXRDdXJyZW50VXJsMi5kZWZhdWx0O1xudmFyIG5vcm1hbGl6ZVVybCA9IGV4cG9ydHMubm9ybWFsaXplVXJsID0gX25vcm1hbGl6ZVVybDIuZGVmYXVsdDtcbnZhciBtYXJrU3d1cEVsZW1lbnRzID0gZXhwb3J0cy5tYXJrU3d1cEVsZW1lbnRzID0gX21hcmtTd3VwRWxlbWVudHMyLmRlZmF1bHQ7XG52YXIgTGluayA9IGV4cG9ydHMuTGluayA9IF9MaW5rMi5kZWZhdWx0O1xudmFyIGNsZWFudXBBbmltYXRpb25DbGFzc2VzID0gZXhwb3J0cy5jbGVhbnVwQW5pbWF0aW9uQ2xhc3NlcyA9IF9jbGVhbnVwQW5pbWF0aW9uQ2xhc3NlczIuZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/index.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/markSwupElements.js":
/*!***********************************************************!*\
  !*** ./node_modules/swup/lib/helpers/markSwupElements.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/swup/lib/utils/index.js\");\n\nvar markSwupElements = function markSwupElements(element, containers) {\n\tvar blocks = 0;\n\n\tcontainers.forEach(function (selector) {\n\t\tif ((0, _utils.query)(selector, element) == null) {\n\t\t\tconsole.warn('[swup] Container ' + selector + ' not found on page.');\n\t\t} else {\n\t\t\t(0, _utils.queryAll)(selector).forEach(function (item, index) {\n\t\t\t\t(0, _utils.queryAll)(selector, element)[index].setAttribute('data-swup', blocks);\n\t\t\t\tblocks++;\n\t\t\t});\n\t\t}\n\t});\n};\n\nexports[\"default\"] = markSwupElements;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9tYXJrU3d1cEVsZW1lbnRzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQzs7QUFFRixhQUFhLG1CQUFPLENBQUMsd0RBQVU7O0FBRS9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEVBQUU7QUFDRjs7QUFFQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL2hlbHBlcnMvbWFya1N3dXBFbGVtZW50cy5qcz85OGNmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBtYXJrU3d1cEVsZW1lbnRzID0gZnVuY3Rpb24gbWFya1N3dXBFbGVtZW50cyhlbGVtZW50LCBjb250YWluZXJzKSB7XG5cdHZhciBibG9ja3MgPSAwO1xuXG5cdGNvbnRhaW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcblx0XHRpZiAoKDAsIF91dGlscy5xdWVyeSkoc2VsZWN0b3IsIGVsZW1lbnQpID09IG51bGwpIHtcblx0XHRcdGNvbnNvbGUud2FybignW3N3dXBdIENvbnRhaW5lciAnICsgc2VsZWN0b3IgKyAnIG5vdCBmb3VuZCBvbiBwYWdlLicpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQoMCwgX3V0aWxzLnF1ZXJ5QWxsKShzZWxlY3RvcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcblx0XHRcdFx0KDAsIF91dGlscy5xdWVyeUFsbCkoc2VsZWN0b3IsIGVsZW1lbnQpW2luZGV4XS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3d1cCcsIGJsb2Nrcyk7XG5cdFx0XHRcdGJsb2NrcysrO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG1hcmtTd3VwRWxlbWVudHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/markSwupElements.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/normalizeUrl.js":
/*!*******************************************************!*\
  !*** ./node_modules/swup/lib/helpers/normalizeUrl.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _Link = __webpack_require__(/*! ./Link */ \"./node_modules/swup/lib/helpers/Link.js\");\n\nvar _Link2 = _interopRequireDefault(_Link);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar normalizeUrl = function normalizeUrl(url) {\n\treturn new _Link2.default(url).getAddress();\n};\n\nexports[\"default\"] = normalizeUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9ub3JtYWxpemVVcmwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDOztBQUVGLFlBQVksbUJBQU8sQ0FBQyx1REFBUTs7QUFFNUI7O0FBRUEsdUNBQXVDLHVDQUF1Qzs7QUFFOUU7QUFDQTtBQUNBOztBQUVBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy9ub3JtYWxpemVVcmwuanM/NGRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfTGluayA9IHJlcXVpcmUoJy4vTGluaycpO1xuXG52YXIgX0xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluayk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBub3JtYWxpemVVcmwgPSBmdW5jdGlvbiBub3JtYWxpemVVcmwodXJsKSB7XG5cdHJldHVybiBuZXcgX0xpbmsyLmRlZmF1bHQodXJsKS5nZXRBZGRyZXNzKCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBub3JtYWxpemVVcmw7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/normalizeUrl.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/transitionEnd.js":
/*!********************************************************!*\
  !*** ./node_modules/swup/lib/helpers/transitionEnd.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar transitionEnd = function transitionEnd() {\n\tif (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {\n\t\treturn 'webkitTransitionEnd';\n\t} else {\n\t\treturn 'transitionend';\n\t}\n};\n\nexports[\"default\"] = transitionEnd;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy90cmFuc2l0aW9uRW5kLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9zd3VwL2xpYi9oZWxwZXJzL3RyYW5zaXRpb25FbmQuanM/MjU3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG52YXIgdHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG5cdGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiYgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xuXHR9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uRW5kOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/transitionEnd.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/helpers/transitionProperty.js":
/*!*************************************************************!*\
  !*** ./node_modules/swup/lib/helpers/transitionProperty.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar transitionProperty = function transitionProperty() {\n\tif (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {\n\t\treturn 'WebkitTransition';\n\t} else {\n\t\treturn 'transition';\n\t}\n};\n\nexports[\"default\"] = transitionProperty;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvaGVscGVycy90cmFuc2l0aW9uUHJvcGVydHkuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL2hlbHBlcnMvdHJhbnNpdGlvblByb3BlcnR5LmpzPzc0MTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IGZ1bmN0aW9uIHRyYW5zaXRpb25Qcm9wZXJ0eSgpIHtcblx0aWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJiB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gJ1dlYmtpdFRyYW5zaXRpb24nO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiAndHJhbnNpdGlvbic7XG5cdH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHRyYW5zaXRpb25Qcm9wZXJ0eTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/helpers/transitionProperty.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/swup/lib/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n// modules\n\n\nvar _delegateIt = __webpack_require__(/*! delegate-it */ \"./node_modules/delegate-it/index.js\");\n\nvar _delegateIt2 = _interopRequireDefault(_delegateIt);\n\nvar _Cache = __webpack_require__(/*! ./modules/Cache */ \"./node_modules/swup/lib/modules/Cache.js\");\n\nvar _Cache2 = _interopRequireDefault(_Cache);\n\nvar _loadPage = __webpack_require__(/*! ./modules/loadPage */ \"./node_modules/swup/lib/modules/loadPage.js\");\n\nvar _loadPage2 = _interopRequireDefault(_loadPage);\n\nvar _renderPage = __webpack_require__(/*! ./modules/renderPage */ \"./node_modules/swup/lib/modules/renderPage.js\");\n\nvar _renderPage2 = _interopRequireDefault(_renderPage);\n\nvar _triggerEvent = __webpack_require__(/*! ./modules/triggerEvent */ \"./node_modules/swup/lib/modules/triggerEvent.js\");\n\nvar _triggerEvent2 = _interopRequireDefault(_triggerEvent);\n\nvar _on = __webpack_require__(/*! ./modules/on */ \"./node_modules/swup/lib/modules/on.js\");\n\nvar _on2 = _interopRequireDefault(_on);\n\nvar _off = __webpack_require__(/*! ./modules/off */ \"./node_modules/swup/lib/modules/off.js\");\n\nvar _off2 = _interopRequireDefault(_off);\n\nvar _updateTransition = __webpack_require__(/*! ./modules/updateTransition */ \"./node_modules/swup/lib/modules/updateTransition.js\");\n\nvar _updateTransition2 = _interopRequireDefault(_updateTransition);\n\nvar _getAnchorElement = __webpack_require__(/*! ./modules/getAnchorElement */ \"./node_modules/swup/lib/modules/getAnchorElement.js\");\n\nvar _getAnchorElement2 = _interopRequireDefault(_getAnchorElement);\n\nvar _getAnimationPromises = __webpack_require__(/*! ./modules/getAnimationPromises */ \"./node_modules/swup/lib/modules/getAnimationPromises.js\");\n\nvar _getAnimationPromises2 = _interopRequireDefault(_getAnimationPromises);\n\nvar _getPageData = __webpack_require__(/*! ./modules/getPageData */ \"./node_modules/swup/lib/modules/getPageData.js\");\n\nvar _getPageData2 = _interopRequireDefault(_getPageData);\n\nvar _plugins = __webpack_require__(/*! ./modules/plugins */ \"./node_modules/swup/lib/modules/plugins.js\");\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/swup/lib/utils/index.js\");\n\nvar _helpers = __webpack_require__(/*! ./helpers */ \"./node_modules/swup/lib/helpers/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Swup = function () {\n\tfunction Swup(setOptions) {\n\t\t_classCallCheck(this, Swup);\n\n\t\t// default options\n\t\tvar defaults = {\n\t\t\tanimateHistoryBrowsing: false,\n\t\t\tanimationSelector: '[class*=\"transition-\"]',\n\t\t\tlinkSelector: 'a[href^=\"' + window.location.origin + '\"]:not([data-no-swup]), a[href^=\"/\"]:not([data-no-swup]), a[href^=\"#\"]:not([data-no-swup])',\n\t\t\tcache: true,\n\t\t\tcontainers: ['#swup'],\n\t\t\trequestHeaders: {\n\t\t\t\t'X-Requested-With': 'swup',\n\t\t\t\tAccept: 'text/html, application/xhtml+xml'\n\t\t\t},\n\t\t\tplugins: [],\n\t\t\tskipPopStateHandling: function skipPopStateHandling(event) {\n\t\t\t\treturn !(event.state && event.state.source === 'swup');\n\t\t\t}\n\t\t};\n\n\t\t// merge options\n\t\tvar options = _extends({}, defaults, setOptions);\n\n\t\t// handler arrays\n\t\tthis._handlers = {\n\t\t\tanimationInDone: [],\n\t\t\tanimationInStart: [],\n\t\t\tanimationOutDone: [],\n\t\t\tanimationOutStart: [],\n\t\t\tanimationSkipped: [],\n\t\t\tclickLink: [],\n\t\t\tcontentReplaced: [],\n\t\t\tdisabled: [],\n\t\t\tenabled: [],\n\t\t\topenPageInNewTab: [],\n\t\t\tpageLoaded: [],\n\t\t\tpageRetrievedFromCache: [],\n\t\t\tpageView: [],\n\t\t\tpopState: [],\n\t\t\tsamePage: [],\n\t\t\tsamePageWithHash: [],\n\t\t\tserverError: [],\n\t\t\ttransitionStart: [],\n\t\t\ttransitionEnd: [],\n\t\t\twillReplaceContent: []\n\t\t};\n\n\t\t// variable for anchor to scroll to after render\n\t\tthis.scrollToElement = null;\n\t\t// variable for promise used for preload, so no new loading of the same page starts while page is loading\n\t\tthis.preloadPromise = null;\n\t\t// variable for save options\n\t\tthis.options = options;\n\t\t// variable for plugins array\n\t\tthis.plugins = [];\n\t\t// variable for current transition object\n\t\tthis.transition = {};\n\t\t// variable for keeping event listeners from \"delegate\"\n\t\tthis.delegatedListeners = {};\n\t\t// so we are able to remove the listener\n\t\tthis.boundPopStateHandler = this.popStateHandler.bind(this);\n\n\t\t// make modules accessible in instance\n\t\tthis.cache = new _Cache2.default();\n\t\tthis.cache.swup = this;\n\t\tthis.loadPage = _loadPage2.default;\n\t\tthis.renderPage = _renderPage2.default;\n\t\tthis.triggerEvent = _triggerEvent2.default;\n\t\tthis.on = _on2.default;\n\t\tthis.off = _off2.default;\n\t\tthis.updateTransition = _updateTransition2.default;\n\t\tthis.getAnimationPromises = _getAnimationPromises2.default;\n\t\tthis.getPageData = _getPageData2.default;\n\t\tthis.getAnchorElement = _getAnchorElement2.default;\n\t\tthis.log = function () {}; // here so it can be used by plugins\n\t\tthis.use = _plugins.use;\n\t\tthis.unuse = _plugins.unuse;\n\t\tthis.findPlugin = _plugins.findPlugin;\n\t\tthis.getCurrentUrl = _helpers.getCurrentUrl;\n\t\tthis.cleanupAnimationClasses = _helpers.cleanupAnimationClasses;\n\n\t\t// enable swup\n\t\tthis.enable();\n\t}\n\n\t_createClass(Swup, [{\n\t\tkey: 'enable',\n\t\tvalue: function enable() {\n\t\t\tvar _this = this;\n\n\t\t\t// check for Promise support\n\t\t\tif (typeof Promise === 'undefined') {\n\t\t\t\tconsole.warn('Promise is not supported');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// add event listeners\n\t\t\tthis.delegatedListeners.click = (0, _delegateIt2.default)(document, this.options.linkSelector, 'click', this.linkClickHandler.bind(this));\n\t\t\twindow.addEventListener('popstate', this.boundPopStateHandler);\n\n\t\t\t// initial save to cache\n\t\t\tif (this.options.cache) {}\n\t\t\t// disabled to avoid caching modified dom state\n\t\t\t// https://github.com/swup/swup/issues/475\n\t\t\t// logic moved to preload plugin\n\n\n\t\t\t// mark swup blocks in html\n\t\t\t(0, _helpers.markSwupElements)(document.documentElement, this.options.containers);\n\n\t\t\t// mount plugins\n\t\t\tthis.options.plugins.forEach(function (plugin) {\n\t\t\t\t_this.use(plugin);\n\t\t\t});\n\n\t\t\t// modify initial history record\n\t\t\twindow.history.replaceState(Object.assign({}, window.history.state, {\n\t\t\t\turl: window.location.href,\n\t\t\t\trandom: Math.random(),\n\t\t\t\tsource: 'swup'\n\t\t\t}), document.title, window.location.href);\n\n\t\t\t// trigger enabled event\n\t\t\tthis.triggerEvent('enabled');\n\n\t\t\t// add swup-enabled class to html tag\n\t\t\tdocument.documentElement.classList.add('swup-enabled');\n\n\t\t\t// trigger page view event\n\t\t\tthis.triggerEvent('pageView');\n\t\t}\n\t}, {\n\t\tkey: 'destroy',\n\t\tvalue: function destroy() {\n\t\t\tvar _this2 = this;\n\n\t\t\t// remove delegated listeners\n\t\t\tthis.delegatedListeners.click.destroy();\n\n\t\t\t// remove popstate listener\n\t\t\twindow.removeEventListener('popstate', this.boundPopStateHandler);\n\n\t\t\t// empty cache\n\t\t\tthis.cache.empty();\n\n\t\t\t// unmount plugins\n\t\t\tthis.options.plugins.forEach(function (plugin) {\n\t\t\t\t_this2.unuse(plugin);\n\t\t\t});\n\n\t\t\t// remove swup data atributes from blocks\n\t\t\t(0, _utils.queryAll)('[data-swup]').forEach(function (element) {\n\t\t\t\telement.removeAttribute('data-swup');\n\t\t\t});\n\n\t\t\t// remove handlers\n\t\t\tthis.off();\n\n\t\t\t// trigger disable event\n\t\t\tthis.triggerEvent('disabled');\n\n\t\t\t// remove swup-enabled class from html tag\n\t\t\tdocument.documentElement.classList.remove('swup-enabled');\n\t\t}\n\t}, {\n\t\tkey: 'linkClickHandler',\n\t\tvalue: function linkClickHandler(event) {\n\t\t\t// no control key pressed\n\t\t\tif (!event.metaKey && !event.ctrlKey && !event.shiftKey && !event.altKey) {\n\t\t\t\t// index of pressed button needs to be checked because Firefox triggers click on all mouse buttons\n\t\t\t\tif (event.button === 0) {\n\t\t\t\t\tthis.triggerEvent('clickLink', event);\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tvar link = new _helpers.Link(event.delegateTarget);\n\t\t\t\t\tif (link.getAddress() == (0, _helpers.getCurrentUrl)() || link.getAddress() == '') {\n\t\t\t\t\t\t// link to the same URL\n\t\t\t\t\t\tif (link.getHash() != '') {\n\t\t\t\t\t\t\t// link to the same URL with hash\n\t\t\t\t\t\t\tthis.triggerEvent('samePageWithHash', event);\n\t\t\t\t\t\t\tvar element = (0, _getAnchorElement2.default)(link.getHash());\n\t\t\t\t\t\t\tif (element != null) {\n\t\t\t\t\t\t\t\thistory.replaceState({\n\t\t\t\t\t\t\t\t\turl: link.getAddress() + link.getHash(),\n\t\t\t\t\t\t\t\t\trandom: Math.random(),\n\t\t\t\t\t\t\t\t\tsource: 'swup'\n\t\t\t\t\t\t\t\t}, document.title, link.getAddress() + link.getHash());\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// referenced element not found\n\t\t\t\t\t\t\t\tconsole.warn('Element for offset not found (' + link.getHash() + ')');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// link to the same URL without hash\n\t\t\t\t\t\t\tthis.triggerEvent('samePage', event);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// link to different url\n\t\t\t\t\t\tif (link.getHash() != '') {\n\t\t\t\t\t\t\tthis.scrollToElement = link.getHash();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// get custom transition from data\n\t\t\t\t\t\tvar customTransition = event.delegateTarget.getAttribute('data-swup-transition');\n\n\t\t\t\t\t\t// load page\n\t\t\t\t\t\tthis.loadPage({ url: link.getAddress(), customTransition: customTransition }, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// open in new tab (do nothing)\n\t\t\t\tthis.triggerEvent('openPageInNewTab', event);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'popStateHandler',\n\t\tvalue: function popStateHandler(event) {\n\t\t\tif (this.options.skipPopStateHandling(event)) return;\n\t\t\tvar link = new _helpers.Link(event.state ? event.state.url : window.location.pathname);\n\t\t\tif (link.getHash() !== '') {\n\t\t\t\tthis.scrollToElement = link.getHash();\n\t\t\t} else {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\tthis.triggerEvent('popState', event);\n\n\t\t\tif (!this.options.animateHistoryBrowsing) {\n\t\t\t\tdocument.documentElement.classList.remove('is-animating');\n\t\t\t\t(0, _helpers.cleanupAnimationClasses)();\n\t\t\t}\n\n\t\t\tthis.loadPage({ url: link.getAddress() }, event);\n\t\t}\n\t}]);\n\n\treturn Swup;\n}();\n\nexports[\"default\"] = Swup;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/index.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/Cache.js":
/*!************************************************!*\
  !*** ./node_modules/swup/lib/modules/Cache.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nexports.Cache = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _helpers = __webpack_require__(/*! ../helpers */ \"./node_modules/swup/lib/helpers/index.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Cache = exports.Cache = function () {\n\tfunction Cache() {\n\t\t_classCallCheck(this, Cache);\n\n\t\tthis.pages = {};\n\t\tthis.last = null;\n\t}\n\n\t_createClass(Cache, [{\n\t\tkey: 'cacheUrl',\n\t\tvalue: function cacheUrl(page) {\n\t\t\tpage.url = (0, _helpers.normalizeUrl)(page.url);\n\t\t\tif (page.url in this.pages === false) {\n\t\t\t\tthis.pages[page.url] = page;\n\t\t\t}\n\t\t\tthis.last = this.pages[page.url];\n\t\t\tthis.swup.log('Cache (' + Object.keys(this.pages).length + ')', this.pages);\n\t\t}\n\t}, {\n\t\tkey: 'getPage',\n\t\tvalue: function getPage(url) {\n\t\t\turl = (0, _helpers.normalizeUrl)(url);\n\t\t\treturn this.pages[url];\n\t\t}\n\t}, {\n\t\tkey: 'getCurrentPage',\n\t\tvalue: function getCurrentPage() {\n\t\t\treturn this.getPage((0, _helpers.getCurrentUrl)());\n\t\t}\n\t}, {\n\t\tkey: 'exists',\n\t\tvalue: function exists(url) {\n\t\t\turl = (0, _helpers.normalizeUrl)(url);\n\t\t\treturn url in this.pages;\n\t\t}\n\t}, {\n\t\tkey: 'empty',\n\t\tvalue: function empty() {\n\t\t\tthis.pages = {};\n\t\t\tthis.last = null;\n\t\t\tthis.swup.log('Cache cleared');\n\t\t}\n\t}, {\n\t\tkey: 'remove',\n\t\tvalue: function remove(url) {\n\t\t\tdelete this.pages[url];\n\t\t}\n\t}]);\n\n\treturn Cache;\n}();\n\nexports[\"default\"] = Cache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9DYWNoZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixhQUFhOztBQUViLGlDQUFpQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwrREFBK0QseURBQXlELHFFQUFxRSw2REFBNkQsd0JBQXdCOztBQUVqakIsZUFBZSxtQkFBTyxDQUFDLDREQUFZOztBQUVuQyxrREFBa0QsMENBQTBDOztBQUU1RixZQUFZLGFBQWE7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSxDQUFDOztBQUVELGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9DYWNoZS5qcz9lOGM0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ2FjaGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMnKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIENhY2hlID0gZXhwb3J0cy5DYWNoZSA9IGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gQ2FjaGUoKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhY2hlKTtcblxuXHRcdHRoaXMucGFnZXMgPSB7fTtcblx0XHR0aGlzLmxhc3QgPSBudWxsO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKENhY2hlLCBbe1xuXHRcdGtleTogJ2NhY2hlVXJsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY2FjaGVVcmwocGFnZSkge1xuXHRcdFx0cGFnZS51cmwgPSAoMCwgX2hlbHBlcnMubm9ybWFsaXplVXJsKShwYWdlLnVybCk7XG5cdFx0XHRpZiAocGFnZS51cmwgaW4gdGhpcy5wYWdlcyA9PT0gZmFsc2UpIHtcblx0XHRcdFx0dGhpcy5wYWdlc1twYWdlLnVybF0gPSBwYWdlO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5sYXN0ID0gdGhpcy5wYWdlc1twYWdlLnVybF07XG5cdFx0XHR0aGlzLnN3dXAubG9nKCdDYWNoZSAoJyArIE9iamVjdC5rZXlzKHRoaXMucGFnZXMpLmxlbmd0aCArICcpJywgdGhpcy5wYWdlcyk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0UGFnZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFBhZ2UodXJsKSB7XG5cdFx0XHR1cmwgPSAoMCwgX2hlbHBlcnMubm9ybWFsaXplVXJsKSh1cmwpO1xuXHRcdFx0cmV0dXJuIHRoaXMucGFnZXNbdXJsXTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdnZXRDdXJyZW50UGFnZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRQYWdlKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UGFnZSgoMCwgX2hlbHBlcnMuZ2V0Q3VycmVudFVybCkoKSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZXhpc3RzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZXhpc3RzKHVybCkge1xuXHRcdFx0dXJsID0gKDAsIF9oZWxwZXJzLm5vcm1hbGl6ZVVybCkodXJsKTtcblx0XHRcdHJldHVybiB1cmwgaW4gdGhpcy5wYWdlcztcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdlbXB0eScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGVtcHR5KCkge1xuXHRcdFx0dGhpcy5wYWdlcyA9IHt9O1xuXHRcdFx0dGhpcy5sYXN0ID0gbnVsbDtcblx0XHRcdHRoaXMuc3d1cC5sb2coJ0NhY2hlIGNsZWFyZWQnKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdyZW1vdmUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZW1vdmUodXJsKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5wYWdlc1t1cmxdO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBDYWNoZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ2FjaGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/Cache.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/getAnchorElement.js":
/*!***********************************************************!*\
  !*** ./node_modules/swup/lib/modules/getAnchorElement.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/swup/lib/utils/index.js\");\n\nvar getAnchorElement = function getAnchorElement(hash) {\n\tif (!hash) {\n\t\treturn null;\n\t}\n\n\tif (hash.charAt(0) === '#') {\n\t\thash = hash.substring(1);\n\t}\n\n\thash = decodeURIComponent(hash);\n\thash = (0, _utils.escapeCssIdentifier)(hash);\n\n\t// https://html.spec.whatwg.org/#find-a-potential-indicated-element\n\treturn (0, _utils.query)('#' + hash) || (0, _utils.query)('a[name=\\'' + hash + '\\']');\n};\n\nexports[\"default\"] = getAnchorElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9nZXRBbmNob3JFbGVtZW50LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQzs7QUFFRixhQUFhLG1CQUFPLENBQUMsd0RBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL21vZHVsZXMvZ2V0QW5jaG9yRWxlbWVudC5qcz9jZDVjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBnZXRBbmNob3JFbGVtZW50ID0gZnVuY3Rpb24gZ2V0QW5jaG9yRWxlbWVudChoYXNoKSB7XG5cdGlmICghaGFzaCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0aWYgKGhhc2guY2hhckF0KDApID09PSAnIycpIHtcblx0XHRoYXNoID0gaGFzaC5zdWJzdHJpbmcoMSk7XG5cdH1cblxuXHRoYXNoID0gZGVjb2RlVVJJQ29tcG9uZW50KGhhc2gpO1xuXHRoYXNoID0gKDAsIF91dGlscy5lc2NhcGVDc3NJZGVudGlmaWVyKShoYXNoKTtcblxuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNmaW5kLWEtcG90ZW50aWFsLWluZGljYXRlZC1lbGVtZW50XG5cdHJldHVybiAoMCwgX3V0aWxzLnF1ZXJ5KSgnIycgKyBoYXNoKSB8fCAoMCwgX3V0aWxzLnF1ZXJ5KSgnYVtuYW1lPVxcJycgKyBoYXNoICsgJ1xcJ10nKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdldEFuY2hvckVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/getAnchorElement.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/getAnimationPromises.js":
/*!***************************************************************!*\
  !*** ./node_modules/swup/lib/modules/getAnimationPromises.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/swup/lib/utils/index.js\");\n\nvar _helpers = __webpack_require__(/*! ../helpers */ \"./node_modules/swup/lib/helpers/index.js\");\n\nvar getAnimationPromises = function getAnimationPromises() {\n\tvar selector = this.options.animationSelector;\n\tvar durationProperty = (0, _helpers.transitionProperty)() + 'Duration';\n\tvar promises = [];\n\tvar animatedElements = (0, _utils.queryAll)(selector, document.body);\n\n\tif (!animatedElements.length) {\n\t\tconsole.warn('[swup] No animated elements found by selector ' + selector);\n\t\treturn [Promise.resolve()];\n\t}\n\n\tanimatedElements.forEach(function (element) {\n\t\tvar transitionDuration = window.getComputedStyle(element)[durationProperty];\n\t\t// Resolve immediately if no transition defined\n\t\tif (!transitionDuration || transitionDuration == '0s') {\n\t\t\tconsole.warn('[swup] No CSS transition duration defined for element of selector ' + selector);\n\t\t\tpromises.push(Promise.resolve());\n\t\t\treturn;\n\t\t}\n\t\tvar promise = new Promise(function (resolve) {\n\t\t\telement.addEventListener((0, _helpers.transitionEnd)(), function (event) {\n\t\t\t\tif (element == event.target) {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tpromises.push(promise);\n\t});\n\n\treturn promises;\n};\n\nexports[\"default\"] = getAnimationPromises;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9nZXRBbmltYXRpb25Qcm9taXNlcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7O0FBRUYsYUFBYSxtQkFBTyxDQUFDLHdEQUFVOztBQUUvQixlQUFlLG1CQUFPLENBQUMsNERBQVk7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9nZXRBbmltYXRpb25Qcm9taXNlcy5qcz8xYjFlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMnKTtcblxudmFyIGdldEFuaW1hdGlvblByb21pc2VzID0gZnVuY3Rpb24gZ2V0QW5pbWF0aW9uUHJvbWlzZXMoKSB7XG5cdHZhciBzZWxlY3RvciA9IHRoaXMub3B0aW9ucy5hbmltYXRpb25TZWxlY3Rvcjtcblx0dmFyIGR1cmF0aW9uUHJvcGVydHkgPSAoMCwgX2hlbHBlcnMudHJhbnNpdGlvblByb3BlcnR5KSgpICsgJ0R1cmF0aW9uJztcblx0dmFyIHByb21pc2VzID0gW107XG5cdHZhciBhbmltYXRlZEVsZW1lbnRzID0gKDAsIF91dGlscy5xdWVyeUFsbCkoc2VsZWN0b3IsIGRvY3VtZW50LmJvZHkpO1xuXG5cdGlmICghYW5pbWF0ZWRFbGVtZW50cy5sZW5ndGgpIHtcblx0XHRjb25zb2xlLndhcm4oJ1tzd3VwXSBObyBhbmltYXRlZCBlbGVtZW50cyBmb3VuZCBieSBzZWxlY3RvciAnICsgc2VsZWN0b3IpO1xuXHRcdHJldHVybiBbUHJvbWlzZS5yZXNvbHZlKCldO1xuXHR9XG5cblx0YW5pbWF0ZWRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0dmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW2R1cmF0aW9uUHJvcGVydHldO1xuXHRcdC8vIFJlc29sdmUgaW1tZWRpYXRlbHkgaWYgbm8gdHJhbnNpdGlvbiBkZWZpbmVkXG5cdFx0aWYgKCF0cmFuc2l0aW9uRHVyYXRpb24gfHwgdHJhbnNpdGlvbkR1cmF0aW9uID09ICcwcycpIHtcblx0XHRcdGNvbnNvbGUud2FybignW3N3dXBdIE5vIENTUyB0cmFuc2l0aW9uIGR1cmF0aW9uIGRlZmluZWQgZm9yIGVsZW1lbnQgb2Ygc2VsZWN0b3IgJyArIHNlbGVjdG9yKTtcblx0XHRcdHByb21pc2VzLnB1c2goUHJvbWlzZS5yZXNvbHZlKCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoKDAsIF9oZWxwZXJzLnRyYW5zaXRpb25FbmQpKCksIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0XHRpZiAoZWxlbWVudCA9PSBldmVudC50YXJnZXQpIHtcblx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cdH0pO1xuXG5cdHJldHVybiBwcm9taXNlcztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdldEFuaW1hdGlvblByb21pc2VzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/getAnimationPromises.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/getPageData.js":
/*!******************************************************!*\
  !*** ./node_modules/swup/lib/modules/getPageData.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _helpers = __webpack_require__(/*! ../helpers */ \"./node_modules/swup/lib/helpers/index.js\");\n\nvar getPageData = function getPageData(request) {\n\t// this method can be replaced in case other content than html is expected to be received from server\n\t// this function should always return {title, pageClass, originalContent, blocks, responseURL}\n\t// in case page has invalid structure - return null\n\tvar html = request.responseText;\n\tvar pageObject = (0, _helpers.getDataFromHtml)(html, this.options.containers);\n\n\tif (pageObject) {\n\t\tpageObject.responseURL = request.responseURL ? request.responseURL : window.location.href;\n\t} else {\n\t\tconsole.warn('[swup] Received page is invalid.');\n\t\treturn null;\n\t}\n\n\treturn pageObject;\n};\n\nexports[\"default\"] = getPageData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9nZXRQYWdlRGF0YS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7O0FBRUYsZUFBZSxtQkFBTyxDQUFDLDREQUFZOztBQUVuQztBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9nZXRQYWdlRGF0YS5qcz80ZTQxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycycpO1xuXG52YXIgZ2V0UGFnZURhdGEgPSBmdW5jdGlvbiBnZXRQYWdlRGF0YShyZXF1ZXN0KSB7XG5cdC8vIHRoaXMgbWV0aG9kIGNhbiBiZSByZXBsYWNlZCBpbiBjYXNlIG90aGVyIGNvbnRlbnQgdGhhbiBodG1sIGlzIGV4cGVjdGVkIHRvIGJlIHJlY2VpdmVkIGZyb20gc2VydmVyXG5cdC8vIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGFsd2F5cyByZXR1cm4ge3RpdGxlLCBwYWdlQ2xhc3MsIG9yaWdpbmFsQ29udGVudCwgYmxvY2tzLCByZXNwb25zZVVSTH1cblx0Ly8gaW4gY2FzZSBwYWdlIGhhcyBpbnZhbGlkIHN0cnVjdHVyZSAtIHJldHVybiBudWxsXG5cdHZhciBodG1sID0gcmVxdWVzdC5yZXNwb25zZVRleHQ7XG5cdHZhciBwYWdlT2JqZWN0ID0gKDAsIF9oZWxwZXJzLmdldERhdGFGcm9tSHRtbCkoaHRtbCwgdGhpcy5vcHRpb25zLmNvbnRhaW5lcnMpO1xuXG5cdGlmIChwYWdlT2JqZWN0KSB7XG5cdFx0cGFnZU9iamVjdC5yZXNwb25zZVVSTCA9IHJlcXVlc3QucmVzcG9uc2VVUkwgPyByZXF1ZXN0LnJlc3BvbnNlVVJMIDogd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS53YXJuKCdbc3d1cF0gUmVjZWl2ZWQgcGFnZSBpcyBpbnZhbGlkLicpO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIHBhZ2VPYmplY3Q7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBnZXRQYWdlRGF0YTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/getPageData.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/loadPage.js":
/*!***************************************************!*\
  !*** ./node_modules/swup/lib/modules/loadPage.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _helpers = __webpack_require__(/*! ../helpers */ \"./node_modules/swup/lib/helpers/index.js\");\n\nvar loadPage = function loadPage(data, popstate) {\n\tvar _this = this;\n\n\t// create array for storing animation promises\n\tvar animationPromises = [],\n\t    xhrPromise = void 0;\n\tvar animateOut = function animateOut() {\n\t\t_this.triggerEvent('animationOutStart');\n\n\t\t// handle classes\n\t\tdocument.documentElement.classList.add('is-changing');\n\t\tdocument.documentElement.classList.add('is-leaving');\n\t\tdocument.documentElement.classList.add('is-animating');\n\t\tif (popstate) {\n\t\t\tdocument.documentElement.classList.add('is-popstate');\n\t\t}\n\t\tdocument.documentElement.classList.add('to-' + (0, _helpers.classify)(data.url));\n\n\t\t// animation promise stuff\n\t\tanimationPromises = _this.getAnimationPromises('out');\n\t\tPromise.all(animationPromises).then(function () {\n\t\t\t_this.triggerEvent('animationOutDone');\n\t\t});\n\n\t\t// create history record if this is not a popstate call\n\t\tif (!popstate) {\n\t\t\t// create pop element with or without anchor\n\t\t\tvar state = void 0;\n\t\t\tif (_this.scrollToElement != null) {\n\t\t\t\tstate = data.url + _this.scrollToElement;\n\t\t\t} else {\n\t\t\t\tstate = data.url;\n\t\t\t}\n\n\t\t\t(0, _helpers.createHistoryRecord)(state);\n\t\t}\n\t};\n\n\tthis.triggerEvent('transitionStart', popstate);\n\n\t// set transition object\n\tif (data.customTransition != null) {\n\t\tthis.updateTransition(window.location.pathname, data.url, data.customTransition);\n\t\tdocument.documentElement.classList.add('to-' + (0, _helpers.classify)(data.customTransition));\n\t} else {\n\t\tthis.updateTransition(window.location.pathname, data.url);\n\t}\n\n\t// start/skip animation\n\tif (!popstate || this.options.animateHistoryBrowsing) {\n\t\tanimateOut();\n\t} else {\n\t\tthis.triggerEvent('animationSkipped');\n\t}\n\n\t// start/skip loading of page\n\tif (this.cache.exists(data.url)) {\n\t\txhrPromise = new Promise(function (resolve) {\n\t\t\tresolve(_this.cache.getPage(data.url));\n\t\t});\n\t\tthis.triggerEvent('pageRetrievedFromCache');\n\t} else {\n\t\tif (!this.preloadPromise || this.preloadPromise.route != data.url) {\n\t\t\txhrPromise = new Promise(function (resolve, reject) {\n\t\t\t\t(0, _helpers.fetch)(_extends({}, data, { headers: _this.options.requestHeaders }), function (response) {\n\t\t\t\t\tif (response.status === 500) {\n\t\t\t\t\t\t_this.triggerEvent('serverError');\n\t\t\t\t\t\treject(data.url);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// get json data\n\t\t\t\t\t\tvar page = _this.getPageData(response);\n\t\t\t\t\t\tif (page != null && page.blocks.length > 0) {\n\t\t\t\t\t\t\tpage.url = data.url;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(data.url);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// render page\n\t\t\t\t\t\t_this.cache.cacheUrl(page);\n\t\t\t\t\t\t_this.triggerEvent('pageLoaded');\n\t\t\t\t\t\tresolve(page);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\txhrPromise = this.preloadPromise;\n\t\t}\n\t}\n\n\t// when everything is ready, handle the outcome\n\tPromise.all([xhrPromise].concat(animationPromises)).then(function (_ref) {\n\t\tvar _ref2 = _slicedToArray(_ref, 1),\n\t\t    pageData = _ref2[0];\n\n\t\t// render page\n\t\t_this.renderPage(pageData, popstate);\n\t\t_this.preloadPromise = null;\n\t}).catch(function (errorUrl) {\n\t\t// rewrite the skipPopStateHandling function to redirect manually when the history.go is processed\n\t\t_this.options.skipPopStateHandling = function () {\n\t\t\twindow.location = errorUrl;\n\t\t\treturn true;\n\t\t};\n\n\t\t// go back to the actual page were still at\n\t\twindow.history.go(-1);\n\t});\n};\n\nexports[\"default\"] = loadPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9sb2FkUGFnZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7O0FBRUYsbUNBQW1DLGlDQUFpQyxlQUFlLGVBQWUsZ0JBQWdCLG9CQUFvQixNQUFNLDBDQUEwQywrQkFBK0IsYUFBYSxxQkFBcUIsdUNBQXVDLGNBQWMsV0FBVyxZQUFZLFVBQVUsTUFBTSwyQ0FBMkMsVUFBVSxzQkFBc0IsZUFBZSwyQkFBMkIsMEJBQTBCLGNBQWMsMkNBQTJDLGdDQUFnQyxPQUFPLG1GQUFtRjs7QUFFcnBCLG9EQUFvRCxnQkFBZ0Isc0JBQXNCLE9BQU8sMkJBQTJCLDBCQUEwQix5REFBeUQsaUNBQWlDOztBQUVoUCxlQUFlLG1CQUFPLENBQUMsNERBQVk7O0FBRW5DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsbUNBQW1DLFVBQVUsdUNBQXVDO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL21vZHVsZXMvbG9hZFBhZ2UuanM/ODIzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycycpO1xuXG52YXIgbG9hZFBhZ2UgPSBmdW5jdGlvbiBsb2FkUGFnZShkYXRhLCBwb3BzdGF0ZSkge1xuXHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdC8vIGNyZWF0ZSBhcnJheSBmb3Igc3RvcmluZyBhbmltYXRpb24gcHJvbWlzZXNcblx0dmFyIGFuaW1hdGlvblByb21pc2VzID0gW10sXG5cdCAgICB4aHJQcm9taXNlID0gdm9pZCAwO1xuXHR2YXIgYW5pbWF0ZU91dCA9IGZ1bmN0aW9uIGFuaW1hdGVPdXQoKSB7XG5cdFx0X3RoaXMudHJpZ2dlckV2ZW50KCdhbmltYXRpb25PdXRTdGFydCcpO1xuXG5cdFx0Ly8gaGFuZGxlIGNsYXNzZXNcblx0XHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtY2hhbmdpbmcnKTtcblx0XHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtbGVhdmluZycpO1xuXHRcdGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1hbmltYXRpbmcnKTtcblx0XHRpZiAocG9wc3RhdGUpIHtcblx0XHRcdGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1wb3BzdGF0ZScpO1xuXHRcdH1cblx0XHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndG8tJyArICgwLCBfaGVscGVycy5jbGFzc2lmeSkoZGF0YS51cmwpKTtcblxuXHRcdC8vIGFuaW1hdGlvbiBwcm9taXNlIHN0dWZmXG5cdFx0YW5pbWF0aW9uUHJvbWlzZXMgPSBfdGhpcy5nZXRBbmltYXRpb25Qcm9taXNlcygnb3V0Jyk7XG5cdFx0UHJvbWlzZS5hbGwoYW5pbWF0aW9uUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0X3RoaXMudHJpZ2dlckV2ZW50KCdhbmltYXRpb25PdXREb25lJyk7XG5cdFx0fSk7XG5cblx0XHQvLyBjcmVhdGUgaGlzdG9yeSByZWNvcmQgaWYgdGhpcyBpcyBub3QgYSBwb3BzdGF0ZSBjYWxsXG5cdFx0aWYgKCFwb3BzdGF0ZSkge1xuXHRcdFx0Ly8gY3JlYXRlIHBvcCBlbGVtZW50IHdpdGggb3Igd2l0aG91dCBhbmNob3Jcblx0XHRcdHZhciBzdGF0ZSA9IHZvaWQgMDtcblx0XHRcdGlmIChfdGhpcy5zY3JvbGxUb0VsZW1lbnQgIT0gbnVsbCkge1xuXHRcdFx0XHRzdGF0ZSA9IGRhdGEudXJsICsgX3RoaXMuc2Nyb2xsVG9FbGVtZW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3RhdGUgPSBkYXRhLnVybDtcblx0XHRcdH1cblxuXHRcdFx0KDAsIF9oZWxwZXJzLmNyZWF0ZUhpc3RvcnlSZWNvcmQpKHN0YXRlKTtcblx0XHR9XG5cdH07XG5cblx0dGhpcy50cmlnZ2VyRXZlbnQoJ3RyYW5zaXRpb25TdGFydCcsIHBvcHN0YXRlKTtcblxuXHQvLyBzZXQgdHJhbnNpdGlvbiBvYmplY3Rcblx0aWYgKGRhdGEuY3VzdG9tVHJhbnNpdGlvbiAhPSBudWxsKSB7XG5cdFx0dGhpcy51cGRhdGVUcmFuc2l0aW9uKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSwgZGF0YS51cmwsIGRhdGEuY3VzdG9tVHJhbnNpdGlvbik7XG5cdFx0ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3RvLScgKyAoMCwgX2hlbHBlcnMuY2xhc3NpZnkpKGRhdGEuY3VzdG9tVHJhbnNpdGlvbikpO1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMudXBkYXRlVHJhbnNpdGlvbih3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIGRhdGEudXJsKTtcblx0fVxuXG5cdC8vIHN0YXJ0L3NraXAgYW5pbWF0aW9uXG5cdGlmICghcG9wc3RhdGUgfHwgdGhpcy5vcHRpb25zLmFuaW1hdGVIaXN0b3J5QnJvd3NpbmcpIHtcblx0XHRhbmltYXRlT3V0KCk7XG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50cmlnZ2VyRXZlbnQoJ2FuaW1hdGlvblNraXBwZWQnKTtcblx0fVxuXG5cdC8vIHN0YXJ0L3NraXAgbG9hZGluZyBvZiBwYWdlXG5cdGlmICh0aGlzLmNhY2hlLmV4aXN0cyhkYXRhLnVybCkpIHtcblx0XHR4aHJQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRcdHJlc29sdmUoX3RoaXMuY2FjaGUuZ2V0UGFnZShkYXRhLnVybCkpO1xuXHRcdH0pO1xuXHRcdHRoaXMudHJpZ2dlckV2ZW50KCdwYWdlUmV0cmlldmVkRnJvbUNhY2hlJyk7XG5cdH0gZWxzZSB7XG5cdFx0aWYgKCF0aGlzLnByZWxvYWRQcm9taXNlIHx8IHRoaXMucHJlbG9hZFByb21pc2Uucm91dGUgIT0gZGF0YS51cmwpIHtcblx0XHRcdHhoclByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcdCgwLCBfaGVscGVycy5mZXRjaCkoX2V4dGVuZHMoe30sIGRhdGEsIHsgaGVhZGVyczogX3RoaXMub3B0aW9ucy5yZXF1ZXN0SGVhZGVycyB9KSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFx0aWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XG5cdFx0XHRcdFx0XHRfdGhpcy50cmlnZ2VyRXZlbnQoJ3NlcnZlckVycm9yJyk7XG5cdFx0XHRcdFx0XHRyZWplY3QoZGF0YS51cmwpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvLyBnZXQganNvbiBkYXRhXG5cdFx0XHRcdFx0XHR2YXIgcGFnZSA9IF90aGlzLmdldFBhZ2VEYXRhKHJlc3BvbnNlKTtcblx0XHRcdFx0XHRcdGlmIChwYWdlICE9IG51bGwgJiYgcGFnZS5ibG9ja3MubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRwYWdlLnVybCA9IGRhdGEudXJsO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KGRhdGEudXJsKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gcmVuZGVyIHBhZ2Vcblx0XHRcdFx0XHRcdF90aGlzLmNhY2hlLmNhY2hlVXJsKHBhZ2UpO1xuXHRcdFx0XHRcdFx0X3RoaXMudHJpZ2dlckV2ZW50KCdwYWdlTG9hZGVkJyk7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKHBhZ2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0eGhyUHJvbWlzZSA9IHRoaXMucHJlbG9hZFByb21pc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly8gd2hlbiBldmVyeXRoaW5nIGlzIHJlYWR5LCBoYW5kbGUgdGhlIG91dGNvbWVcblx0UHJvbWlzZS5hbGwoW3hoclByb21pc2VdLmNvbmNhdChhbmltYXRpb25Qcm9taXNlcykpLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcblx0XHR2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAxKSxcblx0XHQgICAgcGFnZURhdGEgPSBfcmVmMlswXTtcblxuXHRcdC8vIHJlbmRlciBwYWdlXG5cdFx0X3RoaXMucmVuZGVyUGFnZShwYWdlRGF0YSwgcG9wc3RhdGUpO1xuXHRcdF90aGlzLnByZWxvYWRQcm9taXNlID0gbnVsbDtcblx0fSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yVXJsKSB7XG5cdFx0Ly8gcmV3cml0ZSB0aGUgc2tpcFBvcFN0YXRlSGFuZGxpbmcgZnVuY3Rpb24gdG8gcmVkaXJlY3QgbWFudWFsbHkgd2hlbiB0aGUgaGlzdG9yeS5nbyBpcyBwcm9jZXNzZWRcblx0XHRfdGhpcy5vcHRpb25zLnNraXBQb3BTdGF0ZUhhbmRsaW5nID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0d2luZG93LmxvY2F0aW9uID0gZXJyb3JVcmw7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9O1xuXG5cdFx0Ly8gZ28gYmFjayB0byB0aGUgYWN0dWFsIHBhZ2Ugd2VyZSBzdGlsbCBhdFxuXHRcdHdpbmRvdy5oaXN0b3J5LmdvKC0xKTtcblx0fSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBsb2FkUGFnZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/loadPage.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/off.js":
/*!**********************************************!*\
  !*** ./node_modules/swup/lib/modules/off.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar off = function off(event, handler) {\n\tvar _this = this;\n\n\tif (event != null) {\n\t\tif (handler != null) {\n\t\t\tif (this._handlers[event] && this._handlers[event].filter(function (savedHandler) {\n\t\t\t\treturn savedHandler === handler;\n\t\t\t}).length) {\n\t\t\t\tvar toRemove = this._handlers[event].filter(function (savedHandler) {\n\t\t\t\t\treturn savedHandler === handler;\n\t\t\t\t})[0];\n\t\t\t\tvar index = this._handlers[event].indexOf(toRemove);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis._handlers[event].splice(index, 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Handler for event '\" + event + \"' no found.\");\n\t\t\t}\n\t\t} else {\n\t\t\tthis._handlers[event] = [];\n\t\t}\n\t} else {\n\t\tObject.keys(this._handlers).forEach(function (keys) {\n\t\t\t_this._handlers[keys] = [];\n\t\t});\n\t}\n};\n\nexports[\"default\"] = off;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9vZmYuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9zd3VwL2xpYi9tb2R1bGVzL29mZi5qcz9mOTg4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xudmFyIG9mZiA9IGZ1bmN0aW9uIG9mZihldmVudCwgaGFuZGxlcikge1xuXHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdGlmIChldmVudCAhPSBudWxsKSB7XG5cdFx0aWYgKGhhbmRsZXIgIT0gbnVsbCkge1xuXHRcdFx0aWYgKHRoaXMuX2hhbmRsZXJzW2V2ZW50XSAmJiB0aGlzLl9oYW5kbGVyc1tldmVudF0uZmlsdGVyKGZ1bmN0aW9uIChzYXZlZEhhbmRsZXIpIHtcblx0XHRcdFx0cmV0dXJuIHNhdmVkSGFuZGxlciA9PT0gaGFuZGxlcjtcblx0XHRcdH0pLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgdG9SZW1vdmUgPSB0aGlzLl9oYW5kbGVyc1tldmVudF0uZmlsdGVyKGZ1bmN0aW9uIChzYXZlZEhhbmRsZXIpIHtcblx0XHRcdFx0XHRyZXR1cm4gc2F2ZWRIYW5kbGVyID09PSBoYW5kbGVyO1xuXHRcdFx0XHR9KVswXTtcblx0XHRcdFx0dmFyIGluZGV4ID0gdGhpcy5faGFuZGxlcnNbZXZlbnRdLmluZGV4T2YodG9SZW1vdmUpO1xuXHRcdFx0XHRpZiAoaW5kZXggPiAtMSkge1xuXHRcdFx0XHRcdHRoaXMuX2hhbmRsZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJIYW5kbGVyIGZvciBldmVudCAnXCIgKyBldmVudCArIFwiJyBubyBmb3VuZC5cIik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2hhbmRsZXJzW2V2ZW50XSA9IFtdO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRPYmplY3Qua2V5cyh0aGlzLl9oYW5kbGVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5cykge1xuXHRcdFx0X3RoaXMuX2hhbmRsZXJzW2tleXNdID0gW107XG5cdFx0fSk7XG5cdH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG9mZjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/off.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/on.js":
/*!*********************************************!*\
  !*** ./node_modules/swup/lib/modules/on.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar on = function on(event, handler) {\n\tif (this._handlers[event]) {\n\t\tthis._handlers[event].push(handler);\n\t} else {\n\t\tconsole.warn(\"Unsupported event \" + event + \".\");\n\t}\n};\n\nexports[\"default\"] = on;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9vbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9vbi5qcz85NjI3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xudmFyIG9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGhhbmRsZXIpIHtcblx0aWYgKHRoaXMuX2hhbmRsZXJzW2V2ZW50XSkge1xuXHRcdHRoaXMuX2hhbmRsZXJzW2V2ZW50XS5wdXNoKGhhbmRsZXIpO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUud2FybihcIlVuc3VwcG9ydGVkIGV2ZW50IFwiICsgZXZlbnQgKyBcIi5cIik7XG5cdH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG9uOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/on.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/plugins.js":
/*!**************************************************!*\
  !*** ./node_modules/swup/lib/modules/plugins.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar use = exports.use = function use(plugin) {\n\tif (!plugin.isSwupPlugin) {\n\t\tconsole.warn('Not swup plugin instance ' + plugin + '.');\n\t\treturn;\n\t}\n\n\tthis.plugins.push(plugin);\n\tplugin.swup = this;\n\tif (typeof plugin._beforeMount === 'function') {\n\t\tplugin._beforeMount();\n\t}\n\tplugin.mount();\n\n\treturn this.plugins;\n};\n\nvar unuse = exports.unuse = function unuse(plugin) {\n\tvar pluginReference = void 0;\n\n\tif (typeof plugin === 'string') {\n\t\tpluginReference = this.plugins.find(function (p) {\n\t\t\treturn plugin === p.name;\n\t\t});\n\t} else {\n\t\tpluginReference = plugin;\n\t}\n\n\tif (!pluginReference) {\n\t\tconsole.warn('No such plugin.');\n\t\treturn;\n\t}\n\n\tpluginReference.unmount();\n\n\tif (typeof pluginReference._afterUnmount === 'function') {\n\t\tpluginReference._afterUnmount();\n\t}\n\n\tvar index = this.plugins.indexOf(pluginReference);\n\tthis.plugins.splice(index, 1);\n\n\treturn this.plugins;\n};\n\nvar findPlugin = exports.findPlugin = function findPlugin(pluginName) {\n\treturn this.plugins.find(function (p) {\n\t\treturn pluginName === p.name;\n\t});\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9wbHVnaW5zLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLFVBQVUsV0FBVztBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxZQUFZLGFBQWE7QUFDekI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0EsRUFBRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9wbHVnaW5zLmpzP2VmYTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xudmFyIHVzZSA9IGV4cG9ydHMudXNlID0gZnVuY3Rpb24gdXNlKHBsdWdpbikge1xuXHRpZiAoIXBsdWdpbi5pc1N3dXBQbHVnaW4pIHtcblx0XHRjb25zb2xlLndhcm4oJ05vdCBzd3VwIHBsdWdpbiBpbnN0YW5jZSAnICsgcGx1Z2luICsgJy4nKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR0aGlzLnBsdWdpbnMucHVzaChwbHVnaW4pO1xuXHRwbHVnaW4uc3d1cCA9IHRoaXM7XG5cdGlmICh0eXBlb2YgcGx1Z2luLl9iZWZvcmVNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHBsdWdpbi5fYmVmb3JlTW91bnQoKTtcblx0fVxuXHRwbHVnaW4ubW91bnQoKTtcblxuXHRyZXR1cm4gdGhpcy5wbHVnaW5zO1xufTtcblxudmFyIHVudXNlID0gZXhwb3J0cy51bnVzZSA9IGZ1bmN0aW9uIHVudXNlKHBsdWdpbikge1xuXHR2YXIgcGx1Z2luUmVmZXJlbmNlID0gdm9pZCAwO1xuXG5cdGlmICh0eXBlb2YgcGx1Z2luID09PSAnc3RyaW5nJykge1xuXHRcdHBsdWdpblJlZmVyZW5jZSA9IHRoaXMucGx1Z2lucy5maW5kKGZ1bmN0aW9uIChwKSB7XG5cdFx0XHRyZXR1cm4gcGx1Z2luID09PSBwLm5hbWU7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0cGx1Z2luUmVmZXJlbmNlID0gcGx1Z2luO1xuXHR9XG5cblx0aWYgKCFwbHVnaW5SZWZlcmVuY2UpIHtcblx0XHRjb25zb2xlLndhcm4oJ05vIHN1Y2ggcGx1Z2luLicpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHBsdWdpblJlZmVyZW5jZS51bm1vdW50KCk7XG5cblx0aWYgKHR5cGVvZiBwbHVnaW5SZWZlcmVuY2UuX2FmdGVyVW5tb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHBsdWdpblJlZmVyZW5jZS5fYWZ0ZXJVbm1vdW50KCk7XG5cdH1cblxuXHR2YXIgaW5kZXggPSB0aGlzLnBsdWdpbnMuaW5kZXhPZihwbHVnaW5SZWZlcmVuY2UpO1xuXHR0aGlzLnBsdWdpbnMuc3BsaWNlKGluZGV4LCAxKTtcblxuXHRyZXR1cm4gdGhpcy5wbHVnaW5zO1xufTtcblxudmFyIGZpbmRQbHVnaW4gPSBleHBvcnRzLmZpbmRQbHVnaW4gPSBmdW5jdGlvbiBmaW5kUGx1Z2luKHBsdWdpbk5hbWUpIHtcblx0cmV0dXJuIHRoaXMucGx1Z2lucy5maW5kKGZ1bmN0aW9uIChwKSB7XG5cdFx0cmV0dXJuIHBsdWdpbk5hbWUgPT09IHAubmFtZTtcblx0fSk7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/plugins.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/renderPage.js":
/*!*****************************************************!*\
  !*** ./node_modules/swup/lib/modules/renderPage.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _helpers = __webpack_require__(/*! ../helpers */ \"./node_modules/swup/lib/helpers/index.js\");\n\nvar renderPage = function renderPage(page, popstate) {\n\tvar _this = this;\n\n\tdocument.documentElement.classList.remove('is-leaving');\n\n\tvar isCurrentPage = this.getCurrentUrl() === page.url;\n\tif (!isCurrentPage) return;\n\n\t// replace state in case the url was redirected\n\tvar url = new _helpers.Link(page.responseURL).getPath();\n\tif (window.location.pathname !== url) {\n\t\twindow.history.replaceState({\n\t\t\turl: url,\n\t\t\trandom: Math.random(),\n\t\t\tsource: 'swup'\n\t\t}, document.title, url);\n\n\t\t// save new record for redirected url\n\t\tthis.cache.cacheUrl(_extends({}, page, { url: url }));\n\t}\n\n\t// only add for non-popstate transitions\n\tif (!popstate || this.options.animateHistoryBrowsing) {\n\t\tdocument.documentElement.classList.add('is-rendering');\n\t}\n\n\tthis.triggerEvent('willReplaceContent', popstate);\n\t// replace blocks\n\tfor (var i = 0; i < page.blocks.length; i++) {\n\t\tdocument.body.querySelector('[data-swup=\"' + i + '\"]').outerHTML = page.blocks[i];\n\t}\n\t// set title\n\tdocument.title = page.title;\n\tthis.triggerEvent('contentReplaced', popstate);\n\tthis.triggerEvent('pageView', popstate);\n\n\t// empty cache if it's disabled (because pages could be preloaded and stuff)\n\tif (!this.options.cache) {\n\t\tthis.cache.empty();\n\t}\n\n\t// start animation IN\n\tsetTimeout(function () {\n\t\tif (!popstate || _this.options.animateHistoryBrowsing) {\n\t\t\t_this.triggerEvent('animationInStart');\n\t\t\tdocument.documentElement.classList.remove('is-animating');\n\t\t}\n\t}, 10);\n\n\t// handle end of animation\n\tif (!popstate || this.options.animateHistoryBrowsing) {\n\t\tvar animationPromises = this.getAnimationPromises('in');\n\t\tPromise.all(animationPromises).then(function () {\n\t\t\t_this.triggerEvent('animationInDone');\n\t\t\t_this.triggerEvent('transitionEnd', popstate);\n\t\t\t_this.cleanupAnimationClasses();\n\t\t});\n\t} else {\n\t\tthis.triggerEvent('transitionEnd', popstate);\n\t}\n\n\t// reset scroll-to element\n\tthis.scrollToElement = null;\n};\n\nexports[\"default\"] = renderPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy9yZW5kZXJQYWdlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQzs7QUFFRixvREFBb0QsZ0JBQWdCLHNCQUFzQixPQUFPLDJCQUEyQiwwQkFBMEIseURBQXlELGlDQUFpQzs7QUFFaFAsZUFBZSxtQkFBTyxDQUFDLDREQUFZOztBQUVuQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsaUNBQWlDLFVBQVUsVUFBVTtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLHdCQUF3QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9zd3VwL2xpYi9tb2R1bGVzL3JlbmRlclBhZ2UuanM/YTFmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMnKTtcblxudmFyIHJlbmRlclBhZ2UgPSBmdW5jdGlvbiByZW5kZXJQYWdlKHBhZ2UsIHBvcHN0YXRlKSB7XG5cdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWxlYXZpbmcnKTtcblxuXHR2YXIgaXNDdXJyZW50UGFnZSA9IHRoaXMuZ2V0Q3VycmVudFVybCgpID09PSBwYWdlLnVybDtcblx0aWYgKCFpc0N1cnJlbnRQYWdlKSByZXR1cm47XG5cblx0Ly8gcmVwbGFjZSBzdGF0ZSBpbiBjYXNlIHRoZSB1cmwgd2FzIHJlZGlyZWN0ZWRcblx0dmFyIHVybCA9IG5ldyBfaGVscGVycy5MaW5rKHBhZ2UucmVzcG9uc2VVUkwpLmdldFBhdGgoKTtcblx0aWYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSAhPT0gdXJsKSB7XG5cdFx0d2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0cmFuZG9tOiBNYXRoLnJhbmRvbSgpLFxuXHRcdFx0c291cmNlOiAnc3d1cCdcblx0XHR9LCBkb2N1bWVudC50aXRsZSwgdXJsKTtcblxuXHRcdC8vIHNhdmUgbmV3IHJlY29yZCBmb3IgcmVkaXJlY3RlZCB1cmxcblx0XHR0aGlzLmNhY2hlLmNhY2hlVXJsKF9leHRlbmRzKHt9LCBwYWdlLCB7IHVybDogdXJsIH0pKTtcblx0fVxuXG5cdC8vIG9ubHkgYWRkIGZvciBub24tcG9wc3RhdGUgdHJhbnNpdGlvbnNcblx0aWYgKCFwb3BzdGF0ZSB8fCB0aGlzLm9wdGlvbnMuYW5pbWF0ZUhpc3RvcnlCcm93c2luZykge1xuXHRcdGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1yZW5kZXJpbmcnKTtcblx0fVxuXG5cdHRoaXMudHJpZ2dlckV2ZW50KCd3aWxsUmVwbGFjZUNvbnRlbnQnLCBwb3BzdGF0ZSk7XG5cdC8vIHJlcGxhY2UgYmxvY2tzXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcGFnZS5ibG9ja3MubGVuZ3RoOyBpKyspIHtcblx0XHRkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXN3dXA9XCInICsgaSArICdcIl0nKS5vdXRlckhUTUwgPSBwYWdlLmJsb2Nrc1tpXTtcblx0fVxuXHQvLyBzZXQgdGl0bGVcblx0ZG9jdW1lbnQudGl0bGUgPSBwYWdlLnRpdGxlO1xuXHR0aGlzLnRyaWdnZXJFdmVudCgnY29udGVudFJlcGxhY2VkJywgcG9wc3RhdGUpO1xuXHR0aGlzLnRyaWdnZXJFdmVudCgncGFnZVZpZXcnLCBwb3BzdGF0ZSk7XG5cblx0Ly8gZW1wdHkgY2FjaGUgaWYgaXQncyBkaXNhYmxlZCAoYmVjYXVzZSBwYWdlcyBjb3VsZCBiZSBwcmVsb2FkZWQgYW5kIHN0dWZmKVxuXHRpZiAoIXRoaXMub3B0aW9ucy5jYWNoZSkge1xuXHRcdHRoaXMuY2FjaGUuZW1wdHkoKTtcblx0fVxuXG5cdC8vIHN0YXJ0IGFuaW1hdGlvbiBJTlxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIXBvcHN0YXRlIHx8IF90aGlzLm9wdGlvbnMuYW5pbWF0ZUhpc3RvcnlCcm93c2luZykge1xuXHRcdFx0X3RoaXMudHJpZ2dlckV2ZW50KCdhbmltYXRpb25JblN0YXJ0Jyk7XG5cdFx0XHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYW5pbWF0aW5nJyk7XG5cdFx0fVxuXHR9LCAxMCk7XG5cblx0Ly8gaGFuZGxlIGVuZCBvZiBhbmltYXRpb25cblx0aWYgKCFwb3BzdGF0ZSB8fCB0aGlzLm9wdGlvbnMuYW5pbWF0ZUhpc3RvcnlCcm93c2luZykge1xuXHRcdHZhciBhbmltYXRpb25Qcm9taXNlcyA9IHRoaXMuZ2V0QW5pbWF0aW9uUHJvbWlzZXMoJ2luJyk7XG5cdFx0UHJvbWlzZS5hbGwoYW5pbWF0aW9uUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0X3RoaXMudHJpZ2dlckV2ZW50KCdhbmltYXRpb25JbkRvbmUnKTtcblx0XHRcdF90aGlzLnRyaWdnZXJFdmVudCgndHJhbnNpdGlvbkVuZCcsIHBvcHN0YXRlKTtcblx0XHRcdF90aGlzLmNsZWFudXBBbmltYXRpb25DbGFzc2VzKCk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50cmlnZ2VyRXZlbnQoJ3RyYW5zaXRpb25FbmQnLCBwb3BzdGF0ZSk7XG5cdH1cblxuXHQvLyByZXNldCBzY3JvbGwtdG8gZWxlbWVudFxuXHR0aGlzLnNjcm9sbFRvRWxlbWVudCA9IG51bGw7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSByZW5kZXJQYWdlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/renderPage.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/triggerEvent.js":
/*!*******************************************************!*\
  !*** ./node_modules/swup/lib/modules/triggerEvent.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar triggerEvent = function triggerEvent(eventName, originalEvent) {\n\t// call saved handlers with \"on\" method and pass originalEvent object if available\n\tthis._handlers[eventName].forEach(function (handler) {\n\t\ttry {\n\t\t\thandler(originalEvent);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t});\n\n\t// trigger event on document with prefix \"swup:\"\n\tvar event = new CustomEvent('swup:' + eventName, { detail: eventName });\n\tdocument.dispatchEvent(event);\n};\n\nexports[\"default\"] = triggerEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy90cmlnZ2VyRXZlbnQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBLG9EQUFvRCxtQkFBbUI7QUFDdkU7QUFDQTs7QUFFQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vbm9kZV9tb2R1bGVzL3N3dXAvbGliL21vZHVsZXMvdHJpZ2dlckV2ZW50LmpzPzdkOTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xudmFyIHRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudE5hbWUsIG9yaWdpbmFsRXZlbnQpIHtcblx0Ly8gY2FsbCBzYXZlZCBoYW5kbGVycyB3aXRoIFwib25cIiBtZXRob2QgYW5kIHBhc3Mgb3JpZ2luYWxFdmVudCBvYmplY3QgaWYgYXZhaWxhYmxlXG5cdHRoaXMuX2hhbmRsZXJzW2V2ZW50TmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdHRyeSB7XG5cdFx0XHRoYW5kbGVyKG9yaWdpbmFsRXZlbnQpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIHRyaWdnZXIgZXZlbnQgb24gZG9jdW1lbnQgd2l0aCBwcmVmaXggXCJzd3VwOlwiXG5cdHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnc3d1cDonICsgZXZlbnROYW1lLCB7IGRldGFpbDogZXZlbnROYW1lIH0pO1xuXHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHRyaWdnZXJFdmVudDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/triggerEvent.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/modules/updateTransition.js":
/*!***********************************************************!*\
  !*** ./node_modules/swup/lib/modules/updateTransition.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar updateTransition = function updateTransition(from, to, custom) {\n\t// transition routes\n\tthis.transition = {\n\t\tfrom: from,\n\t\tto: to,\n\t\tcustom: custom\n\t};\n};\n\nexports[\"default\"] = updateTransition;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvbW9kdWxlcy91cGRhdGVUcmFuc2l0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9zd3VwL2xpYi9tb2R1bGVzL3VwZGF0ZVRyYW5zaXRpb24uanM/NDI4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcbnZhciB1cGRhdGVUcmFuc2l0aW9uID0gZnVuY3Rpb24gdXBkYXRlVHJhbnNpdGlvbihmcm9tLCB0bywgY3VzdG9tKSB7XG5cdC8vIHRyYW5zaXRpb24gcm91dGVzXG5cdHRoaXMudHJhbnNpdGlvbiA9IHtcblx0XHRmcm9tOiBmcm9tLFxuXHRcdHRvOiB0byxcblx0XHRjdXN0b206IGN1c3RvbVxuXHR9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gdXBkYXRlVHJhbnNpdGlvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/modules/updateTransition.js\n");

/***/ }),

/***/ "./node_modules/swup/lib/utils/index.js":
/*!**********************************************!*\
  !*** ./node_modules/swup/lib/utils/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n\tvalue: true\n}));\nvar query = exports.query = function query(selector) {\n\tvar context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n\tif (typeof selector !== 'string') {\n\t\treturn selector;\n\t}\n\n\treturn context.querySelector(selector);\n};\n\nvar queryAll = exports.queryAll = function queryAll(selector) {\n\tvar context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n\tif (typeof selector !== 'string') {\n\t\treturn selector;\n\t}\n\n\treturn Array.prototype.slice.call(context.querySelectorAll(selector));\n};\n\nvar escapeCssIdentifier = exports.escapeCssIdentifier = function escapeCssIdentifier(ident) {\n\tif (window.CSS && window.CSS.escape) {\n\t\treturn CSS.escape(ident);\n\t} else {\n\t\treturn ident;\n\t}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3d1cC9saWIvdXRpbHMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsWUFBWSxhQUFhO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGVBQWUsZ0JBQWdCO0FBQy9COztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDBCQUEwQiwyQkFBMkI7QUFDckQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9zd3VwL2xpYi91dGlscy9pbmRleC5qcz9iZjY4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcbnZhciBxdWVyeSA9IGV4cG9ydHMucXVlcnkgPSBmdW5jdGlvbiBxdWVyeShzZWxlY3Rvcikge1xuXHR2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZG9jdW1lbnQ7XG5cblx0aWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gc2VsZWN0b3I7XG5cdH1cblxuXHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbn07XG5cbnZhciBxdWVyeUFsbCA9IGV4cG9ydHMucXVlcnlBbGwgPSBmdW5jdGlvbiBxdWVyeUFsbChzZWxlY3Rvcikge1xuXHR2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZG9jdW1lbnQ7XG5cblx0aWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gc2VsZWN0b3I7XG5cdH1cblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG59O1xuXG52YXIgZXNjYXBlQ3NzSWRlbnRpZmllciA9IGV4cG9ydHMuZXNjYXBlQ3NzSWRlbnRpZmllciA9IGZ1bmN0aW9uIGVzY2FwZUNzc0lkZW50aWZpZXIoaWRlbnQpIHtcblx0aWYgKHdpbmRvdy5DU1MgJiYgd2luZG93LkNTUy5lc2NhcGUpIHtcblx0XHRyZXR1cm4gQ1NTLmVzY2FwZShpZGVudCk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGlkZW50O1xuXHR9XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swup/lib/utils/index.js\n");

/***/ }),

/***/ "./wp-content/themes/blank/src/js/app.js":
/*!***********************************************!*\
  !*** ./wp-content/themes/blank/src/js/app.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _interactions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactions.js */ \"./wp-content/themes/blank/src/js/interactions.js\");\n/* harmony import */ var _gsapAnimations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gsapAnimations.js */ \"./wp-content/themes/blank/src/js/gsapAnimations.js\");\n/* harmony import */ var _swupTrans_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./swupTrans.js */ \"./wp-content/themes/blank/src/js/swupTrans.js\");\n\n\n\n\n//imports all js files to minimize network requests//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93cC1jb250ZW50L3RoZW1lcy9ibGFuay9zcmMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBNkM7QUFDSTtBQUNWOztBQUV2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rLy4vd3AtY29udGVudC90aGVtZXMvYmxhbmsvc3JjL2pzL2FwcC5qcz9lYWVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbnRlcmFjdGlvbnMgZnJvbSAnLi9pbnRlcmFjdGlvbnMuanMnO1xuaW1wb3J0IGdzYXBBbmltYXRpb25zIGZyb20gJy4vZ3NhcEFuaW1hdGlvbnMuanMnO1xuaW1wb3J0IHN3dXBUcmFucyBmcm9tICcuL3N3dXBUcmFucy5qcyc7XG5cbi8vaW1wb3J0cyBhbGwganMgZmlsZXMgdG8gbWluaW1pemUgbmV0d29yayByZXF1ZXN0cyBcbiJdLCJuYW1lcyI6WyJpbnRlcmFjdGlvbnMiLCJnc2FwQW5pbWF0aW9ucyIsInN3dXBUcmFucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./wp-content/themes/blank/src/js/app.js\n");

/***/ }),

/***/ "./wp-content/themes/blank/src/js/gsapAnimations.js":
/*!**********************************************************!*\
  !*** ./wp-content/themes/blank/src/js/gsapAnimations.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gsap_dist_gsap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gsap/dist/gsap.js */ \"./node_modules/gsap/dist/gsap.js\");\n/* harmony import */ var gsap_ScrollTrigger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap/ScrollTrigger.js */ \"./node_modules/gsap/ScrollTrigger.js\");\n/* harmony import */ var gsap_Flip_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap/Flip.js */ \"./node_modules/gsap/Flip.js\");\n/* harmony import */ var gsap_Draggable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/Draggable.js */ \"./node_modules/gsap/Draggable.js\");\n\n\n\n\ngsap_dist_gsap_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(gsap_Flip_js__WEBPACK_IMPORTED_MODULE_1__.Flip, gsap_ScrollTrigger_js__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger, gsap_Draggable_js__WEBPACK_IMPORTED_MODULE_3__.Draggable, gsap_Flip_js__WEBPACK_IMPORTED_MODULE_1__.Flip);\nvar menuBtn = document.querySelector(\".menuBtn\");\nvar exitBtn = document.querySelector(\".exit\");\nvar t1 = gsap_dist_gsap_js__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline({\n  paused: true\n});\nt1.to(\".menu\", {\n  opacity: 1,\n  duration: .5,\n  top: 0,\n  ease: \"power1.out\"\n});\nt1.to(\".nav__main-item\", {\n  opacity: 1,\n  duration: .7,\n  stagger: 0.051,\n  marginTop: 0,\n  ease: \"power1.out\"\n}, \">-0.5\");\nmenuBtn.addEventListener(\"click\", function () {\n  /* eslint-disable */;\n  oo_oo(), console.log('click test', \"e14b8876_0\");\n  t1.play().timeScale(1);\n});\nexitBtn.addEventListener(\"click\", function () {\n  t1.timeScale(3);\n  t1.reverse();\n});\n\n//error\n\n/* eslint-disable */\n;\nfunction oo_oo() {\n  eval(\"'use strict';function _0xd71a(_0x2897ce,_0x3ffa6a){var _0x5b01eb=_0x5b01();return _0xd71a=function(_0xd71ad9,_0x7bd8a0){_0xd71ad9=_0xd71ad9-0x10c;var _0x1132ed=_0x5b01eb[_0xd71ad9];return _0x1132ed;},_0xd71a(_0x2897ce,_0x3ffa6a);}var _0x42a5cc=_0xd71a;(function(_0x590f11,_0x5d9c16){var _0x36f5be=_0xd71a,_0x487c6c=_0x590f11();while(!![]){try{var _0x3a01af=parseInt(_0x36f5be(0x119))/0x1+-parseInt(_0x36f5be(0x1b4))/0x2*(parseInt(_0x36f5be(0x11e))/0x3)+parseInt(_0x36f5be(0x131))/0x4*(parseInt(_0x36f5be(0x19d))/0x5)+parseInt(_0x36f5be(0x174))/0x6+-parseInt(_0x36f5be(0x183))/0x7*(parseInt(_0x36f5be(0x132))/0x8)+-parseInt(_0x36f5be(0x11f))/0x9*(parseInt(_0x36f5be(0x1c9))/0xa)+-parseInt(_0x36f5be(0x13c))/0xb*(-parseInt(_0x36f5be(0x1b6))/0xc);if(_0x3a01af===_0x5d9c16)break;else _0x487c6c['push'](_0x487c6c['shift']());}catch(_0x505250){_0x487c6c['push'](_0x487c6c['shift']());}}}(_0x5b01,0xd46e9));var re=Object['create'],Y=Object[_0x42a5cc(0x1b9)],ne=Object[_0x42a5cc(0x17c)],ae=Object[_0x42a5cc(0x1d1)],ie=Object[_0x42a5cc(0x127)],se=Object['prototype'][_0x42a5cc(0x1b1)],oe=(_0x5ec7bc,_0x3ba0d1,_0xd90cd5,_0x237411)=>{var _0x8b0c51=_0x42a5cc;if(_0x3ba0d1&&typeof _0x3ba0d1==_0x8b0c51(0x156)||typeof _0x3ba0d1==_0x8b0c51(0x18f)){for(let _0x36c6c4 of ae(_0x3ba0d1))!se['call'](_0x5ec7bc,_0x36c6c4)&&_0x36c6c4!==_0xd90cd5&&Y(_0x5ec7bc,_0x36c6c4,{'get':()=>_0x3ba0d1[_0x36c6c4],'enumerable':!(_0x237411=ne(_0x3ba0d1,_0x36c6c4))||_0x237411['enumerable']});}return _0x5ec7bc;},Q=(_0x409e36,_0x33509d,_0x142ecc)=>(_0x142ecc=_0x409e36!=null?re(ie(_0x409e36)):{},oe(_0x33509d||!_0x409e36||!_0x409e36['__es'+'Module']?Y(_0x142ecc,_0x42a5cc(0x191),{'value':_0x409e36,'enumerable':!0x0}):_0x142ecc,_0x409e36)),b=class{constructor(_0x1237ea,_0x74d9b1,_0x58072a,_0x22fb80){var _0x3af427=_0x42a5cc;this[_0x3af427(0x120)]=_0x1237ea,this[_0x3af427(0x123)]=_0x74d9b1,this[_0x3af427(0x11c)]=_0x58072a,this['nodeModules']=_0x22fb80,this[_0x3af427(0x19a)]=!0x0,this[_0x3af427(0x162)]=!0x0,this[_0x3af427(0x121)]=!0x1,this[_0x3af427(0x1d3)]=!0x1,this[_0x3af427(0x17e)]=!!this[_0x3af427(0x120)][_0x3af427(0x161)],this['_WebSocketClass']=null,this[_0x3af427(0x1b3)]=this['_inBrowser']?'failed\\\\x20to\\\\x20send\\\\x20logs,\\\\x20refreshing\\\\x20the\\\\x20page\\\\x20may\\\\x20help':'failed\\\\x20to\\\\x20send\\\\x20logs,\\\\x20restarting\\\\x20the\\\\x20process\\\\x20may\\\\x20help';}async[_0x42a5cc(0x1b0)](){var _0x3a626e=_0x42a5cc;if(this[_0x3a626e(0x14c)])return this['_WebSocketClass'];let _0x3a3168;if(this[_0x3a626e(0x17e)])_0x3a3168=this['global'][_0x3a626e(0x161)];else try{_0x3a3168=require(require('path')[_0x3a626e(0x16f)](this[_0x3a626e(0x19c)],'ws'));}catch{try{let _0xd5cfc1=await import(_0x3a626e(0x193));_0x3a3168=(await import((await import(_0x3a626e(0x197)))[_0x3a626e(0x182)](_0xd5cfc1[_0x3a626e(0x16f)](this[_0x3a626e(0x19c)],_0x3a626e(0x168)))[_0x3a626e(0x114)]()))['default'];}catch{throw new Error(_0x3a626e(0x149));}}return this[_0x3a626e(0x14c)]=_0x3a3168,_0x3a3168;}[_0x42a5cc(0x10d)](){var _0x12644f=_0x42a5cc;this[_0x12644f(0x1d3)]||this[_0x12644f(0x121)]||(this[_0x12644f(0x162)]=!0x1,this[_0x12644f(0x1d3)]=!0x0,this[_0x12644f(0x144)]=new Promise((_0x402cd7,_0x50bd27)=>{var _0x4f202b=_0x12644f;this['getWebSocketClass']()[_0x4f202b(0x148)](_0x275951=>{var _0x209d07=_0x4f202b;let _0x49e856=new _0x275951(_0x209d07(0x150)+this['host']+':'+this[_0x209d07(0x11c)]);_0x49e856[_0x209d07(0x185)]=()=>{var _0x486250=_0x209d07;this['_connected']=!0x1,this['_connecting']=!0x1,this[_0x486250(0x19a)]=!0x1,this[_0x486250(0x1b7)](),_0x50bd27(new Error(_0x486250(0x166)));},_0x49e856[_0x209d07(0x1bc)]=()=>{var _0x4451bc=_0x209d07;this[_0x4451bc(0x17e)]||_0x49e856['_socket']&&_0x49e856[_0x4451bc(0x13b)][_0x4451bc(0x13e)]&&_0x49e856[_0x4451bc(0x13b)][_0x4451bc(0x13e)](),_0x402cd7(_0x49e856);},_0x49e856[_0x209d07(0x14f)]=()=>{var _0x298e91=_0x209d07;this[_0x298e91(0x121)]=!0x1,this['_connecting']=!0x1,this[_0x298e91(0x162)]=!0x0,this[_0x298e91(0x1b7)]();},_0x49e856[_0x209d07(0x15a)]=_0x230257=>{var _0x27c67b=_0x209d07;try{_0x230257&&_0x230257[_0x27c67b(0x189)]&&this[_0x27c67b(0x17e)]&&JSON[_0x27c67b(0x13f)](_0x230257[_0x27c67b(0x189)])[_0x27c67b(0x1c2)]===_0x27c67b(0x1da)&&this['global'][_0x27c67b(0x154)][_0x27c67b(0x1da)]();}catch{}};})[_0x4f202b(0x148)](_0x54f448=>(this[_0x4f202b(0x121)]=!0x0,this[_0x4f202b(0x1d3)]=!0x1,this[_0x4f202b(0x162)]=!0x1,this[_0x4f202b(0x19a)]=!0x0,_0x54f448))['catch'](_0x32ce21=>(this['_connected']=!0x1,this[_0x4f202b(0x1d3)]=!0x1,_0x50bd27(new Error(_0x4f202b(0x187)+_0x32ce21&&_0x32ce21[_0x4f202b(0x1af)]))));}));}[_0x42a5cc(0x1b7)](){var _0x3a58bf=_0x42a5cc;clearTimeout(this[_0x3a58bf(0x1dd)]),this[_0x3a58bf(0x1dd)]=setTimeout(()=>{var _0x5014b1=_0x3a58bf;this[_0x5014b1(0x121)]||this[_0x5014b1(0x1d3)]||(this[_0x5014b1(0x10d)](),this[_0x5014b1(0x144)]?.[_0x5014b1(0x1ab)](()=>this[_0x5014b1(0x1b7)]()));},0x1f4);}async[_0x42a5cc(0x125)](_0x262914){var _0x490612=_0x42a5cc;try{if(!this['_allowedToSend'])return;this[_0x490612(0x162)]&&this[_0x490612(0x10d)](),(await this[_0x490612(0x144)])[_0x490612(0x125)](JSON[_0x490612(0x178)](_0x262914));}catch(_0x2af045){console['warn'](this['_sendErrorMessage']+':\\\\x20'+_0x2af045&&_0x2af045[_0x490612(0x1af)]),this[_0x490612(0x19a)]=!0x1,this[_0x490612(0x1b7)]();}}};function $(_0x429c5d,_0x51fcc0,_0x33d792,_0x122e4f,_0x423b0f){var _0x43d40d=_0x42a5cc;let _0x35df58=_0x33d792['split'](',')[_0x43d40d(0x118)](_0x25c079=>{var _0x4d8371=_0x43d40d;try{_0x429c5d[_0x4d8371(0x133)]||(_0x423b0f===_0x4d8371(0x113)&&(_0x423b0f+=_0x429c5d['process']?.[_0x4d8371(0x1aa)]?.[_0x4d8371(0x129)]?_0x4d8371(0x175):_0x4d8371(0x1ae)),_0x429c5d[_0x4d8371(0x133)]={'id':+new Date(),'tool':_0x423b0f});let _0x347d14=new b(_0x429c5d,_0x51fcc0,_0x25c079,_0x122e4f);return _0x347d14[_0x4d8371(0x125)][_0x4d8371(0x1c8)](_0x347d14);}catch(_0x502602){return console[_0x4d8371(0x1c4)](_0x4d8371(0x153),_0x502602&&_0x502602[_0x4d8371(0x1af)]),()=>{};}});return _0xddc9c1=>_0x35df58[_0x43d40d(0x1d0)](_0x4c13fd=>_0x4c13fd(_0xddc9c1));}function _0x5b01(){var _0x20d756=['send','_dateToString','getPrototypeOf','prototype','node','autoExpand','autoExpandMaxDepth','constructor','bigint','_undefined','isExpressionToEvaluate','_propertyAccessor','4qOObzs','1944728qvOYKD','_console_ninja_session','root_exp_id','props','error','String','cappedProps','current','_additionalMetadata','_socket','970057tMkXHU','_Symbol','unref','parse','_addObjectProperty','autoExpandPreviousObjects','_addFunctionsNode','hits','_ws','HTMLAllCollection','resolveGetters','autoExpandPropertyCount','then','failed\\\\x20to\\\\x20find\\\\x20WebSocket','_isPrimitiveType','49752','_WebSocketClass','sortProps','_setNodeExpandableState','onclose','ws://','substr','sort','logger\\\\x20failed\\\\x20to\\\\x20connect\\\\x20to\\\\x20host','location','_isSet','object','_setNodeId','rootExpression','elements','onmessage','_isArray','test','_capIfString','console','root_exp','log','WebSocket','_allowedToConnectOnSend','_setNodeQueryPath','hostname','null','logger\\\\x20websocket\\\\x20error','_type','ws/index.js','unshift','NEGATIVE_INFINITY','[object\\\\x20Map]','RegExp','strLength','_setNodeExpressionPath','join','_HTMLAllCollection','[object\\\\x20Date]','length','number','4947672SldNoX','\\\\x20server','expressionsToEvaluate','count','stringify','_blacklistedProperty','getter','_addProperty','getOwnPropertyDescriptor','_setNodePermissions','_inBrowser','level','expId','cappedElements','pathToFileURL','14hFIUWy','_p_length','onerror','call','failed\\\\x20to\\\\x20connect\\\\x20to\\\\x20host:\\\\x20','_cleanNode','data','slice','_isUndefined','index','Map','Number','function','nan','default','capped','path','_replacedLog','replace','reduceLimits','url','_regExpToString','name','_allowedToSend','allStrLength','nodeModules','2127305uZCxnx','_processTreeNodeResult','unknown','setter','_consoleNinjaAllowedToStart','disabledLog','process','set','Set','totalStrLength','concat','127.0.0.1',[\\\"localhost\\\",\\\"127.0.0.1\\\",\\\"example.cypress.io\\\",\\\"Jays-MacBook-Pro-2.local\\\",\\\"192.168.0.13\\\"],'versions','catch','_isNegativeZero','_numberRegExp','\\\\x20browser','message','getWebSocketClass','hasOwnProperty','_treeNodePropertiesBeforeFullValue','_sendErrorMessage','1509130PjZmWn','_p_','120mIXDFE','_attemptToReconnect','Symbol','defineProperty','Buffer','_isPrimitiveWrapperType','onopen','_sortProps','performance','value','pop','_getOwnPropertyNames','method','_propertyName','warn','autoExpandLimit','negativeInfinity','funcName','bind','12039260vyeeSs',\\\"/Users/Jay/.vscode/extensions/wallabyjs.console-ninja-0.0.43/node_modules\\\",'toLowerCase','webpack','_property','_p_name','_setNodeLabel','forEach','getOwnPropertyNames','string','_connecting','undefined','valueOf','match','symbol','_getOwnPropertySymbols','now','reload','parent','depth','_reconnectTimeout','array','time','date','_connectToHost','[object\\\\x20Array]','type','noFunctions','_objectToString','_treeNodePropertiesAfterFullValue','next.js','toString','_getOwnPropertyDescriptor','_hasSymbolPropertyOnItsPath','serialize','map','1182851BPmcXq','includes','_keyStrRegExp','port','_addLoadNode','3KlnUWf','9lheKgc','global','_connected','_isMap','host','push'];_0x5b01=function(){return _0x20d756;};return _0x5b01();}function Z(_0x51e131,_0x13d1e9){var _0x274bc2=_0x42a5cc;return _0x51e131[_0x274bc2(0x1a1)]!==void 0x0||(_0x51e131[_0x274bc2(0x1a1)]=_0x51e131[_0x274bc2(0x1a3)]?.[_0x274bc2(0x1aa)]?.['node']||!_0x13d1e9||_0x51e131[_0x274bc2(0x154)]?.['hostname']&&_0x13d1e9[_0x274bc2(0x11a)](_0x51e131['location'][_0x274bc2(0x164)])),_0x51e131[_0x274bc2(0x1a1)];}((_0x27eca5,_0x3542e0,_0x5a4d2f,_0x1faae6,_0x49dd46,_0x55943b,_0x4ffdb6,_0x298147)=>{var _0x408eb4=_0x42a5cc;if(!Z(_0x27eca5,_0x298147))return;if(_0x27eca5['_replacedLog']){_0x27eca5[_0x408eb4(0x15e)][_0x408eb4(0x160)]=_0x27eca5[_0x408eb4(0x194)](_0x27eca5['console'][_0x408eb4(0x160)]);return;}let _0x7a88d3={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x1ab8a2={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2},_0x345aee={'hits':{}};_0x27eca5[_0x408eb4(0x194)]=_0x1e9cf1=>(..._0x3b7f66)=>{var _0x655be7=_0x408eb4;try{if(_0x1e9cf1[_0x655be7(0x199)]===_0x655be7(0x1a2))return;let _0xf33d26=Date['now'](),_0x464915=_0x3b7f66[_0x655be7(0x1c0)](),_0x3e1bcb=_0x3b7f66;return _0x1e9cf1(..._0x3e1bcb),_0x108640(_0x36da8e(_0x464915,_0xf33d26,_0x20477b,_0x3e1bcb)),_0x3e1bcb;}finally{_0x27eca5[_0x655be7(0x15e)]['log']=_0x1e9cf1;}},_0x27eca5['console']['log']=_0x27eca5['_replacedLog'](_0x27eca5[_0x408eb4(0x15e)]['log']);let _0x108640=$(_0x27eca5,_0x3542e0,_0x5a4d2f,_0x1faae6,_0x49dd46),_0x5dfaf7=_0x1006fd(),_0x20477b=_0x27eca5[_0x408eb4(0x133)];class _0x5993dd{constructor(){var _0x128816=_0x408eb4;this[_0x128816(0x11b)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\\\xA0-\\\\uFFFF][_$a-zA-Z0-9\\\\xA0-\\\\uFFFF]*$/,this[_0x128816(0x1ad)]=/^(0|[1-9][0-9]*)$/,this['_quotedRegExp']=/'([^\\\\\\\\']|\\\\\\\\')*'/,this[_0x128816(0x12e)]=_0x27eca5[_0x128816(0x1d4)],this['_HTMLAllCollection']=_0x27eca5[_0x128816(0x145)],this[_0x128816(0x115)]=Object[_0x128816(0x17c)],this[_0x128816(0x1c1)]=Object[_0x128816(0x1d1)],this['_Symbol']=_0x27eca5[_0x128816(0x1b8)],this['_regExpToString']=RegExp[_0x128816(0x128)][_0x128816(0x114)],this[_0x128816(0x126)]=Date[_0x128816(0x128)][_0x128816(0x114)];}[_0x408eb4(0x117)](_0x2fb843,_0x3bc4db,_0xeddedd,_0x31bdad){var _0x24725f=_0x408eb4,_0x5259ff=this,_0x5e5631=_0xeddedd[_0x24725f(0x12a)];function _0x4a405c(_0x4a976a,_0x98583b,_0x32f0b9){var _0x2acb73=_0x24725f;_0x98583b['type']='unknown',_0x98583b[_0x2acb73(0x136)]=_0x4a976a[_0x2acb73(0x1af)],_0x565008=_0x32f0b9[_0x2acb73(0x129)]['current'],_0x32f0b9[_0x2acb73(0x129)][_0x2acb73(0x139)]=_0x98583b,_0x5259ff['_treeNodePropertiesBeforeFullValue'](_0x98583b,_0x32f0b9);}if(_0x3bc4db&&_0x3bc4db['argumentResolutionError'])_0x4a405c(_0x3bc4db,_0x2fb843,_0xeddedd);else try{_0xeddedd[_0x24725f(0x17f)]++,_0xeddedd[_0x24725f(0x12a)]&&_0xeddedd[_0x24725f(0x141)]['push'](_0x3bc4db);var _0x4ddf87,_0x2757a7,_0x1365fc,_0x4b0fd3,_0x390e85=[],_0x2a57a8=[],_0x221cc6,_0x5e7b07=this[_0x24725f(0x167)](_0x3bc4db),_0x4c2464=_0x5e7b07==='array',_0x540602=!0x1,_0x59cd81=_0x5e7b07===_0x24725f(0x18f),_0x42021d=this[_0x24725f(0x14a)](_0x5e7b07),_0x44f622=this[_0x24725f(0x1bb)](_0x5e7b07),_0x50d676=_0x42021d||_0x44f622,_0x1ed1ca={},_0x570ea2=0x0,_0x1d6ee2=!0x1,_0x565008,_0x165737=/^(([1-9]{1}[0-9]*)|0)$/;if(_0xeddedd[_0x24725f(0x1dc)]){if(_0x4c2464){if(_0x2757a7=_0x3bc4db[_0x24725f(0x172)],_0x2757a7>_0xeddedd[_0x24725f(0x159)]){for(_0x1365fc=0x0,_0x4b0fd3=_0xeddedd['elements'],_0x4ddf87=_0x1365fc;_0x4ddf87<_0x4b0fd3;_0x4ddf87++)_0x2a57a8[_0x24725f(0x124)](_0x5259ff[_0x24725f(0x17b)](_0x390e85,_0x3bc4db,_0x5e7b07,_0x4ddf87,_0xeddedd));_0x2fb843[_0x24725f(0x181)]=!0x0;}else{for(_0x1365fc=0x0,_0x4b0fd3=_0x2757a7,_0x4ddf87=_0x1365fc;_0x4ddf87<_0x4b0fd3;_0x4ddf87++)_0x2a57a8[_0x24725f(0x124)](_0x5259ff[_0x24725f(0x17b)](_0x390e85,_0x3bc4db,_0x5e7b07,_0x4ddf87,_0xeddedd));}_0xeddedd[_0x24725f(0x147)]+=_0x2a57a8[_0x24725f(0x172)];}if(!(_0x5e7b07===_0x24725f(0x165)||_0x5e7b07===_0x24725f(0x1d4))&&!_0x42021d&&_0x5e7b07!==_0x24725f(0x137)&&_0x5e7b07!==_0x24725f(0x1ba)&&_0x5e7b07!==_0x24725f(0x12d)){var _0x3e087f=_0x31bdad[_0x24725f(0x135)]||_0xeddedd[_0x24725f(0x135)];if(this[_0x24725f(0x155)](_0x3bc4db)?(_0x4ddf87=0x0,_0x3bc4db[_0x24725f(0x1d0)](function(_0x243532){var _0x41af8b=_0x24725f;if(_0x570ea2++,_0xeddedd[_0x41af8b(0x147)]++,_0x570ea2>_0x3e087f){_0x1d6ee2=!0x0;return;}if(!_0xeddedd[_0x41af8b(0x12f)]&&_0xeddedd[_0x41af8b(0x12a)]&&_0xeddedd[_0x41af8b(0x147)]>_0xeddedd[_0x41af8b(0x1c5)]){_0x1d6ee2=!0x0;return;}_0x2a57a8[_0x41af8b(0x124)](_0x5259ff[_0x41af8b(0x17b)](_0x390e85,_0x3bc4db,'Set',_0x4ddf87++,_0xeddedd,function(_0xffea90){return function(){return _0xffea90;};}(_0x243532)));})):this['_isMap'](_0x3bc4db)&&_0x3bc4db[_0x24725f(0x1d0)](function(_0x1b0926,_0x86ee58){var _0x5d9668=_0x24725f;if(_0x570ea2++,_0xeddedd['autoExpandPropertyCount']++,_0x570ea2>_0x3e087f){_0x1d6ee2=!0x0;return;}if(!_0xeddedd[_0x5d9668(0x12f)]&&_0xeddedd[_0x5d9668(0x12a)]&&_0xeddedd[_0x5d9668(0x147)]>_0xeddedd[_0x5d9668(0x1c5)]){_0x1d6ee2=!0x0;return;}var _0x171af7=_0x86ee58[_0x5d9668(0x114)]();_0x171af7[_0x5d9668(0x172)]>0x64&&(_0x171af7=_0x171af7[_0x5d9668(0x18a)](0x0,0x64)+'...'),_0x2a57a8[_0x5d9668(0x124)](_0x5259ff['_addProperty'](_0x390e85,_0x3bc4db,_0x5d9668(0x18d),_0x171af7,_0xeddedd,function(_0x53e24a){return function(){return _0x53e24a;};}(_0x1b0926)));}),!_0x540602){try{for(_0x221cc6 in _0x3bc4db)if(!(_0x4c2464&&_0x165737['test'](_0x221cc6))&&!this[_0x24725f(0x179)](_0x3bc4db,_0x221cc6,_0xeddedd)){if(_0x570ea2++,_0xeddedd['autoExpandPropertyCount']++,_0x570ea2>_0x3e087f){_0x1d6ee2=!0x0;break;}if(!_0xeddedd[_0x24725f(0x12f)]&&_0xeddedd['autoExpand']&&_0xeddedd[_0x24725f(0x147)]>_0xeddedd[_0x24725f(0x1c5)]){_0x1d6ee2=!0x0;break;}_0x2a57a8[_0x24725f(0x124)](_0x5259ff[_0x24725f(0x140)](_0x390e85,_0x1ed1ca,_0x3bc4db,_0x5e7b07,_0x221cc6,_0xeddedd));}}catch{}if(_0x1ed1ca[_0x24725f(0x184)]=!0x0,_0x59cd81&&(_0x1ed1ca[_0x24725f(0x1ce)]=!0x0),!_0x1d6ee2){var _0x214596=[][_0x24725f(0x1a7)](this[_0x24725f(0x1c1)](_0x3bc4db))['concat'](this[_0x24725f(0x1d8)](_0x3bc4db));for(_0x4ddf87=0x0,_0x2757a7=_0x214596['length'];_0x4ddf87<_0x2757a7;_0x4ddf87++)if(_0x221cc6=_0x214596[_0x4ddf87],!(_0x4c2464&&_0x165737[_0x24725f(0x15c)](_0x221cc6[_0x24725f(0x114)]()))&&!this[_0x24725f(0x179)](_0x3bc4db,_0x221cc6,_0xeddedd)&&!_0x1ed1ca[_0x24725f(0x1b5)+_0x221cc6[_0x24725f(0x114)]()]){if(_0x570ea2++,_0xeddedd['autoExpandPropertyCount']++,_0x570ea2>_0x3e087f){_0x1d6ee2=!0x0;break;}if(!_0xeddedd[_0x24725f(0x12f)]&&_0xeddedd[_0x24725f(0x12a)]&&_0xeddedd['autoExpandPropertyCount']>_0xeddedd[_0x24725f(0x1c5)]){_0x1d6ee2=!0x0;break;}_0x2a57a8[_0x24725f(0x124)](_0x5259ff[_0x24725f(0x140)](_0x390e85,_0x1ed1ca,_0x3bc4db,_0x5e7b07,_0x221cc6,_0xeddedd));}}}}}if(_0x2fb843['type']=_0x5e7b07,_0x50d676?(_0x2fb843[_0x24725f(0x1bf)]=_0x3bc4db[_0x24725f(0x1d5)](),this[_0x24725f(0x15d)](_0x5e7b07,_0x2fb843,_0xeddedd,_0x31bdad)):_0x5e7b07===_0x24725f(0x10c)?_0x2fb843['value']=this['_dateToString'][_0x24725f(0x186)](_0x3bc4db):_0x5e7b07===_0x24725f(0x16c)?_0x2fb843['value']=this[_0x24725f(0x198)]['call'](_0x3bc4db):_0x5e7b07==='symbol'&&this[_0x24725f(0x13d)]?_0x2fb843[_0x24725f(0x1bf)]=this[_0x24725f(0x13d)][_0x24725f(0x128)][_0x24725f(0x114)][_0x24725f(0x186)](_0x3bc4db):!_0xeddedd['depth']&&!(_0x5e7b07==='null'||_0x5e7b07===_0x24725f(0x1d4))&&(delete _0x2fb843[_0x24725f(0x1bf)],_0x2fb843['capped']=!0x0),_0x1d6ee2&&(_0x2fb843[_0x24725f(0x138)]=!0x0),_0x565008=_0xeddedd[_0x24725f(0x129)][_0x24725f(0x139)],_0xeddedd[_0x24725f(0x129)][_0x24725f(0x139)]=_0x2fb843,this[_0x24725f(0x1b2)](_0x2fb843,_0xeddedd),_0x2a57a8[_0x24725f(0x172)]){for(_0x4ddf87=0x0,_0x2757a7=_0x2a57a8['length'];_0x4ddf87<_0x2757a7;_0x4ddf87++)_0x2a57a8[_0x4ddf87](_0x4ddf87);}_0x390e85[_0x24725f(0x172)]&&(_0x2fb843['props']=_0x390e85);}catch(_0x3aa978){_0x4a405c(_0x3aa978,_0x2fb843,_0xeddedd);}return this[_0x24725f(0x13a)](_0x3bc4db,_0x2fb843),this[_0x24725f(0x112)](_0x2fb843,_0xeddedd),_0xeddedd[_0x24725f(0x129)][_0x24725f(0x139)]=_0x565008,_0xeddedd[_0x24725f(0x17f)]--,_0xeddedd[_0x24725f(0x12a)]=_0x5e5631,_0xeddedd['autoExpand']&&_0xeddedd['autoExpandPreviousObjects']['pop'](),_0x2fb843;}[_0x408eb4(0x1d8)](_0x21efc7){return Object['getOwnPropertySymbols']?Object['getOwnPropertySymbols'](_0x21efc7):[];}[_0x408eb4(0x155)](_0x217948){var _0x1f4fdd=_0x408eb4;return!!(_0x217948&&_0x27eca5[_0x1f4fdd(0x1a5)]&&this[_0x1f4fdd(0x111)](_0x217948)==='[object\\\\x20Set]'&&_0x217948[_0x1f4fdd(0x1d0)]);}[_0x408eb4(0x179)](_0x40e305,_0x1e9100,_0x148862){var _0x3d753c=_0x408eb4;return _0x148862[_0x3d753c(0x110)]?typeof _0x40e305[_0x1e9100]==_0x3d753c(0x18f):!0x1;}[_0x408eb4(0x167)](_0x5462ea){var _0x1ed16b=_0x408eb4,_0x106b74='';return _0x106b74=typeof _0x5462ea,_0x106b74===_0x1ed16b(0x156)?this[_0x1ed16b(0x111)](_0x5462ea)===_0x1ed16b(0x10e)?_0x106b74='array':this[_0x1ed16b(0x111)](_0x5462ea)===_0x1ed16b(0x171)?_0x106b74=_0x1ed16b(0x10c):_0x5462ea===null?_0x106b74=_0x1ed16b(0x165):_0x5462ea[_0x1ed16b(0x12c)]&&(_0x106b74=_0x5462ea['constructor'][_0x1ed16b(0x199)]||_0x106b74):_0x106b74===_0x1ed16b(0x1d4)&&this[_0x1ed16b(0x170)]&&_0x5462ea instanceof this[_0x1ed16b(0x170)]&&(_0x106b74=_0x1ed16b(0x145)),_0x106b74;}['_objectToString'](_0x2ced97){var _0x1304c1=_0x408eb4;return Object['prototype'][_0x1304c1(0x114)]['call'](_0x2ced97);}[_0x408eb4(0x14a)](_0x153309){var _0x2a408a=_0x408eb4;return _0x153309==='boolean'||_0x153309===_0x2a408a(0x1d2)||_0x153309==='number';}[_0x408eb4(0x1bb)](_0x139bed){var _0x340b63=_0x408eb4;return _0x139bed==='Boolean'||_0x139bed===_0x340b63(0x137)||_0x139bed===_0x340b63(0x18e);}[_0x408eb4(0x17b)](_0x5dbabb,_0x3734f8,_0x295311,_0x5895ff,_0x211023,_0x45b925){var _0x3ce1e6=this;return function(_0x4813a2){var _0x49b905=_0xd71a,_0x4b122c=_0x211023[_0x49b905(0x129)][_0x49b905(0x139)],_0x167206=_0x211023['node'][_0x49b905(0x18c)],_0x41bb32=_0x211023[_0x49b905(0x129)][_0x49b905(0x1db)];_0x211023[_0x49b905(0x129)][_0x49b905(0x1db)]=_0x4b122c,_0x211023['node'][_0x49b905(0x18c)]=typeof _0x5895ff==_0x49b905(0x173)?_0x5895ff:_0x4813a2,_0x5dbabb[_0x49b905(0x124)](_0x3ce1e6[_0x49b905(0x1cd)](_0x3734f8,_0x295311,_0x5895ff,_0x211023,_0x45b925)),_0x211023[_0x49b905(0x129)]['parent']=_0x41bb32,_0x211023[_0x49b905(0x129)][_0x49b905(0x18c)]=_0x167206;};}[_0x408eb4(0x140)](_0x5ea960,_0x205140,_0x2c6a73,_0x5066db,_0x29575b,_0xe16bec,_0x3c0b76){var _0x479e00=_0x408eb4,_0xd259cc=this;return _0x205140[_0x479e00(0x1b5)+_0x29575b[_0x479e00(0x114)]()]=!0x0,function(_0x57fa9e){var _0x385c24=_0x479e00,_0x41b614=_0xe16bec[_0x385c24(0x129)]['current'],_0x4d15e1=_0xe16bec[_0x385c24(0x129)][_0x385c24(0x18c)],_0x410105=_0xe16bec['node'][_0x385c24(0x1db)];_0xe16bec['node']['parent']=_0x41b614,_0xe16bec[_0x385c24(0x129)]['index']=_0x57fa9e,_0x5ea960[_0x385c24(0x124)](_0xd259cc['_property'](_0x2c6a73,_0x5066db,_0x29575b,_0xe16bec,_0x3c0b76)),_0xe16bec[_0x385c24(0x129)][_0x385c24(0x1db)]=_0x410105,_0xe16bec[_0x385c24(0x129)][_0x385c24(0x18c)]=_0x4d15e1;};}[_0x408eb4(0x1cd)](_0x15b62b,_0x765bfb,_0x355128,_0x5e42fe,_0x2e73dc){var _0xca3292=_0x408eb4,_0x4e1bba=this;_0x2e73dc||(_0x2e73dc=function(_0x3a3c1d,_0x2302ef){return _0x3a3c1d[_0x2302ef];});var _0x1667a6=_0x355128[_0xca3292(0x114)](),_0x4fa13b=_0x5e42fe[_0xca3292(0x176)]||{},_0x3d0de4=_0x5e42fe[_0xca3292(0x1dc)],_0x1a88cc=_0x5e42fe['isExpressionToEvaluate'];try{var _0x2956ae=this['_isMap'](_0x15b62b),_0x2ccd7d=_0x1667a6;_0x2956ae&&_0x2ccd7d[0x0]==='\\\\x27'&&(_0x2ccd7d=_0x2ccd7d[_0xca3292(0x151)](0x1,_0x2ccd7d[_0xca3292(0x172)]-0x2));var _0x1cb69b=_0x5e42fe[_0xca3292(0x176)]=_0x4fa13b[_0xca3292(0x1b5)+_0x2ccd7d];_0x1cb69b&&(_0x5e42fe[_0xca3292(0x1dc)]=_0x5e42fe[_0xca3292(0x1dc)]+0x1),_0x5e42fe[_0xca3292(0x12f)]=!!_0x1cb69b;var _0x3bfd8c=typeof _0x355128==_0xca3292(0x1d7),_0x388358={'name':_0x3bfd8c||_0x2956ae?_0x1667a6:this[_0xca3292(0x1c3)](_0x1667a6)};if(_0x3bfd8c&&(_0x388358[_0xca3292(0x1d7)]=!0x0),!(_0x765bfb===_0xca3292(0x1de)||_0x765bfb==='Error')){var _0x2673a3=this[_0xca3292(0x115)](_0x15b62b,_0x355128);if(_0x2673a3&&(_0x2673a3[_0xca3292(0x1a4)]&&(_0x388358[_0xca3292(0x1a0)]=!0x0),_0x2673a3['get']&&!_0x1cb69b&&!_0x5e42fe[_0xca3292(0x146)]))return _0x388358[_0xca3292(0x17a)]=!0x0,this['_processTreeNodeResult'](_0x388358,_0x5e42fe),_0x388358;}var _0x15e4dd;try{_0x15e4dd=_0x2e73dc(_0x15b62b,_0x355128);}catch(_0xe9072f){return _0x388358={'name':_0x1667a6,'type':_0xca3292(0x19f),'error':_0xe9072f['message']},this[_0xca3292(0x19e)](_0x388358,_0x5e42fe),_0x388358;}var _0x50ed1b=this[_0xca3292(0x167)](_0x15e4dd),_0x2ae5af=this[_0xca3292(0x14a)](_0x50ed1b);if(_0x388358['type']=_0x50ed1b,_0x2ae5af)this[_0xca3292(0x19e)](_0x388358,_0x5e42fe,_0x15e4dd,function(){var _0x1e0d50=_0xca3292;_0x388358[_0x1e0d50(0x1bf)]=_0x15e4dd[_0x1e0d50(0x1d5)](),!_0x1cb69b&&_0x4e1bba[_0x1e0d50(0x15d)](_0x50ed1b,_0x388358,_0x5e42fe,{});});else{var _0x3b5d28=_0x5e42fe[_0xca3292(0x12a)]&&_0x5e42fe[_0xca3292(0x17f)]<_0x5e42fe[_0xca3292(0x12b)]&&_0x5e42fe[_0xca3292(0x141)]['indexOf'](_0x15e4dd)<0x0&&_0x50ed1b!=='function'&&_0x5e42fe[_0xca3292(0x147)]<_0x5e42fe[_0xca3292(0x1c5)];_0x3b5d28||_0x5e42fe['level']<_0x3d0de4||_0x1cb69b?(this['serialize'](_0x388358,_0x15e4dd,_0x5e42fe,_0x1cb69b||{}),this[_0xca3292(0x13a)](_0x15e4dd,_0x388358)):this[_0xca3292(0x19e)](_0x388358,_0x5e42fe,_0x15e4dd,function(){var _0x5ed54e=_0xca3292;_0x50ed1b===_0x5ed54e(0x165)||_0x50ed1b===_0x5ed54e(0x1d4)||(delete _0x388358[_0x5ed54e(0x1bf)],_0x388358[_0x5ed54e(0x192)]=!0x0);});}return _0x388358;}finally{_0x5e42fe[_0xca3292(0x176)]=_0x4fa13b,_0x5e42fe[_0xca3292(0x1dc)]=_0x3d0de4,_0x5e42fe[_0xca3292(0x12f)]=_0x1a88cc;}}[_0x408eb4(0x15d)](_0x3fa0d7,_0x594aa6,_0x3fb80f,_0x20238c){var _0xe5684a=_0x408eb4,_0x5de360=_0x20238c[_0xe5684a(0x16d)]||_0x3fb80f[_0xe5684a(0x16d)];if((_0x3fa0d7===_0xe5684a(0x1d2)||_0x3fa0d7==='String')&&_0x594aa6['value']){let _0x4ed201=_0x594aa6[_0xe5684a(0x1bf)][_0xe5684a(0x172)];_0x3fb80f[_0xe5684a(0x19b)]+=_0x4ed201,_0x3fb80f[_0xe5684a(0x19b)]>_0x3fb80f[_0xe5684a(0x1a6)]?(_0x594aa6['capped']='',delete _0x594aa6[_0xe5684a(0x1bf)]):_0x4ed201>_0x5de360&&(_0x594aa6[_0xe5684a(0x192)]=_0x594aa6['value'][_0xe5684a(0x151)](0x0,_0x5de360),delete _0x594aa6[_0xe5684a(0x1bf)]);}}[_0x408eb4(0x122)](_0x42f0fc){var _0x2f3882=_0x408eb4;return!!(_0x42f0fc&&_0x27eca5['Map']&&this[_0x2f3882(0x111)](_0x42f0fc)===_0x2f3882(0x16b)&&_0x42f0fc[_0x2f3882(0x1d0)]);}['_propertyName'](_0x35ebed){var _0x1711e8=_0x408eb4;if(_0x35ebed[_0x1711e8(0x1d6)](/^\\\\d+$/))return _0x35ebed;var _0x333a8d;try{_0x333a8d=JSON[_0x1711e8(0x178)](''+_0x35ebed);}catch{_0x333a8d='\\\\x22'+this['_objectToString'](_0x35ebed)+'\\\\x22';}return _0x333a8d[_0x1711e8(0x1d6)](/^\\\"([a-zA-Z_][a-zA-Z_0-9]*)\\\"$/)?_0x333a8d=_0x333a8d[_0x1711e8(0x151)](0x1,_0x333a8d[_0x1711e8(0x172)]-0x2):_0x333a8d=_0x333a8d[_0x1711e8(0x195)](/'/g,'\\\\x5c\\\\x27')[_0x1711e8(0x195)](/\\\\\\\\\\\"/g,'\\\\x22')[_0x1711e8(0x195)](/(^\\\"|\\\"$)/g,'\\\\x27'),_0x333a8d;}['_processTreeNodeResult'](_0x38467f,_0x3dab17,_0x5ae2d3,_0x5a6d3c){var _0x52333c=_0x408eb4;this[_0x52333c(0x1b2)](_0x38467f,_0x3dab17),_0x5a6d3c&&_0x5a6d3c(),this[_0x52333c(0x13a)](_0x5ae2d3,_0x38467f),this['_treeNodePropertiesAfterFullValue'](_0x38467f,_0x3dab17);}[_0x408eb4(0x1b2)](_0x1f59b2,_0x1fe5cf){var _0x5ce62f=_0x408eb4;this[_0x5ce62f(0x157)](_0x1f59b2,_0x1fe5cf),this[_0x5ce62f(0x163)](_0x1f59b2,_0x1fe5cf),this[_0x5ce62f(0x16e)](_0x1f59b2,_0x1fe5cf),this[_0x5ce62f(0x17d)](_0x1f59b2,_0x1fe5cf);}[_0x408eb4(0x157)](_0x567d12,_0x3b2c1b){}[_0x408eb4(0x163)](_0x4d9866,_0x433814){}[_0x408eb4(0x1cf)](_0x1ccd12,_0x5818b8){}[_0x408eb4(0x18b)](_0x23810c){var _0x5a3660=_0x408eb4;return _0x23810c===this[_0x5a3660(0x12e)];}[_0x408eb4(0x112)](_0x2c2599,_0x324cf1){var _0x4f7f25=_0x408eb4;this[_0x4f7f25(0x1cf)](_0x2c2599,_0x324cf1),this['_setNodeExpandableState'](_0x2c2599),_0x324cf1[_0x4f7f25(0x14d)]&&this['_sortProps'](_0x2c2599),this[_0x4f7f25(0x142)](_0x2c2599,_0x324cf1),this[_0x4f7f25(0x11d)](_0x2c2599,_0x324cf1),this['_cleanNode'](_0x2c2599);}[_0x408eb4(0x13a)](_0x4186bf,_0x11e7e7){var _0xdf03d0=_0x408eb4;try{_0x4186bf&&typeof _0x4186bf['length']==_0xdf03d0(0x173)&&(_0x11e7e7[_0xdf03d0(0x172)]=_0x4186bf[_0xdf03d0(0x172)]);}catch{}if(_0x11e7e7[_0xdf03d0(0x10f)]==='number'||_0x11e7e7[_0xdf03d0(0x10f)]===_0xdf03d0(0x18e)){if(isNaN(_0x11e7e7[_0xdf03d0(0x1bf)]))_0x11e7e7[_0xdf03d0(0x190)]=!0x0,delete _0x11e7e7[_0xdf03d0(0x1bf)];else switch(_0x11e7e7[_0xdf03d0(0x1bf)]){case Number['POSITIVE_INFINITY']:_0x11e7e7['positiveInfinity']=!0x0,delete _0x11e7e7['value'];break;case Number[_0xdf03d0(0x16a)]:_0x11e7e7[_0xdf03d0(0x1c6)]=!0x0,delete _0x11e7e7[_0xdf03d0(0x1bf)];break;case 0x0:this[_0xdf03d0(0x1ac)](_0x11e7e7[_0xdf03d0(0x1bf)])&&(_0x11e7e7['negativeZero']=!0x0);break;}}else _0x11e7e7[_0xdf03d0(0x10f)]===_0xdf03d0(0x18f)&&typeof _0x4186bf[_0xdf03d0(0x199)]=='string'&&_0x4186bf[_0xdf03d0(0x199)]&&_0x11e7e7[_0xdf03d0(0x199)]&&_0x4186bf['name']!==_0x11e7e7[_0xdf03d0(0x199)]&&(_0x11e7e7[_0xdf03d0(0x1c7)]=_0x4186bf[_0xdf03d0(0x199)]);}['_isNegativeZero'](_0x3b25e7){var _0x3f5439=_0x408eb4;return 0x1/_0x3b25e7===Number[_0x3f5439(0x16a)];}[_0x408eb4(0x1bd)](_0xdec06){var _0x480d72=_0x408eb4;!_0xdec06['props']||!_0xdec06[_0x480d72(0x135)]['length']||_0xdec06['type']===_0x480d72(0x1de)||_0xdec06[_0x480d72(0x10f)]==='Map'||_0xdec06[_0x480d72(0x10f)]==='Set'||_0xdec06['props'][_0x480d72(0x152)](function(_0x562e43,_0x5bfe81){var _0xc11eb9=_0x480d72,_0x50c672=_0x562e43['name']['toLowerCase'](),_0x4f8fb8=_0x5bfe81['name'][_0xc11eb9(0x1cb)]();return _0x50c672<_0x4f8fb8?-0x1:_0x50c672>_0x4f8fb8?0x1:0x0;});}[_0x408eb4(0x142)](_0x5831a2,_0x2119f4){var _0x15647a=_0x408eb4;if(!(_0x2119f4[_0x15647a(0x110)]||!_0x5831a2[_0x15647a(0x135)]||!_0x5831a2[_0x15647a(0x135)][_0x15647a(0x172)])){for(var _0x1038bf=[],_0x234a93=[],_0x32a3a3=0x0,_0x819084=_0x5831a2[_0x15647a(0x135)]['length'];_0x32a3a3<_0x819084;_0x32a3a3++){var _0x32b19e=_0x5831a2[_0x15647a(0x135)][_0x32a3a3];_0x32b19e[_0x15647a(0x10f)]===_0x15647a(0x18f)?_0x1038bf[_0x15647a(0x124)](_0x32b19e):_0x234a93[_0x15647a(0x124)](_0x32b19e);}if(!_0x234a93[_0x15647a(0x172)]&&_0x2119f4[_0x15647a(0x12a)]&&(_0x5831a2[_0x15647a(0x192)]=!0x0),!(!_0x234a93[_0x15647a(0x172)]||_0x1038bf[_0x15647a(0x172)]<=0x1)){_0x5831a2[_0x15647a(0x135)]=_0x234a93;var _0x24049a={'functionsNode':!0x0,'props':_0x1038bf};_0x2119f4['autoExpand']&&(_0x24049a[_0x15647a(0x192)]=!0x0),this['_setNodeId'](_0x24049a,_0x2119f4),this['_setNodeLabel'](_0x24049a,_0x2119f4),this[_0x15647a(0x14e)](_0x24049a),this['_setNodePermissions'](_0x24049a,_0x2119f4),_0x24049a['id']+='\\\\x20f',_0x5831a2['props'][_0x15647a(0x169)](_0x24049a);}}}[_0x408eb4(0x11d)](_0x124196,_0x5b7ca5){}[_0x408eb4(0x14e)](_0x65f4a2){}[_0x408eb4(0x15b)](_0x56d1d4){var _0x4340c4=_0x408eb4;return Array['isArray'](_0x56d1d4)||typeof _0x56d1d4==_0x4340c4(0x156)&&this[_0x4340c4(0x111)](_0x56d1d4)===_0x4340c4(0x10e);}[_0x408eb4(0x17d)](_0x3a7f10,_0x536a18){}[_0x408eb4(0x188)](_0x4b0167){var _0x305e22=_0x408eb4;delete _0x4b0167[_0x305e22(0x116)],delete _0x4b0167['_hasSetOnItsPath'],delete _0x4b0167['_hasMapOnItsPath'];}[_0x408eb4(0x16e)](_0x31f18d,_0x295a84){}[_0x408eb4(0x130)](_0x5f4288){var _0x123d8d=_0x408eb4;return _0x5f4288?_0x5f4288[_0x123d8d(0x1d6)](this[_0x123d8d(0x1ad)])?'['+_0x5f4288+']':_0x5f4288[_0x123d8d(0x1d6)](this[_0x123d8d(0x11b)])?'.'+_0x5f4288:_0x5f4288[_0x123d8d(0x1d6)](this['_quotedRegExp'])?'['+_0x5f4288+']':'[\\\\x27'+_0x5f4288+'\\\\x27]':'';}}let _0x47e2d3=new _0x5993dd();function _0x36da8e(_0xd14710,_0x5eaf14,_0x2f1d11,_0x84e0d1){var _0x5211c8=_0x408eb4;let _0x25505b,_0x580b73;try{_0x580b73=_0x5dfaf7(),_0x25505b=_0x345aee[_0xd14710],!_0x25505b||_0x580b73-_0x25505b['ts']>0x1f4&&_0x25505b[_0x5211c8(0x177)]&&_0x25505b[_0x5211c8(0x1df)]/_0x25505b[_0x5211c8(0x177)]<0x64?(_0x345aee[_0xd14710]=_0x25505b={'count':0x0,'time':0x0,'ts':_0x580b73},_0x345aee[_0x5211c8(0x143)]={}):_0x580b73-_0x345aee[_0x5211c8(0x143)]['ts']>0x32&&_0x345aee['hits']['count']&&_0x345aee['hits']['time']/_0x345aee[_0x5211c8(0x143)]['count']<0x64&&(_0x345aee[_0x5211c8(0x143)]={});let _0x1e45d2=[],_0x1ca38c=_0x25505b[_0x5211c8(0x196)]||_0x345aee[_0x5211c8(0x143)]['reduceLimits']?_0x1ab8a2:_0x7a88d3;for(var _0x2a7f8c=0x0;_0x2a7f8c<_0x84e0d1[_0x5211c8(0x172)];_0x2a7f8c++){let _0x255f6b={};_0x255f6b[_0x5211c8(0x135)]=_0x1ca38c[_0x5211c8(0x135)],_0x255f6b[_0x5211c8(0x159)]=_0x1ca38c[_0x5211c8(0x159)],_0x255f6b['strLength']=_0x1ca38c['strLength'],_0x255f6b[_0x5211c8(0x1a6)]=_0x1ca38c['totalStrLength'],_0x255f6b[_0x5211c8(0x1c5)]=_0x1ca38c[_0x5211c8(0x1c5)],_0x255f6b[_0x5211c8(0x12b)]=_0x1ca38c[_0x5211c8(0x12b)],_0x255f6b['sortProps']=!0x1,_0x255f6b['noFunctions']=!0x0,_0x255f6b[_0x5211c8(0x1dc)]=0x1,_0x255f6b[_0x5211c8(0x17f)]=0x0,_0x255f6b[_0x5211c8(0x180)]=_0x5211c8(0x134),_0x255f6b[_0x5211c8(0x158)]=_0x5211c8(0x15f),_0x255f6b[_0x5211c8(0x12a)]=!0x0,_0x255f6b['autoExpandPreviousObjects']=[],_0x255f6b['autoExpandPropertyCount']=0x0,_0x255f6b[_0x5211c8(0x146)]=!0x0,_0x255f6b[_0x5211c8(0x19b)]=0x0,_0x255f6b[_0x5211c8(0x129)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x1e45d2['push'](_0x47e2d3[_0x5211c8(0x117)]({},_0x84e0d1[_0x2a7f8c],_0x255f6b,{}));}return{'method':'log','version':_0x55943b,'args':[{'id':_0xd14710,'ts':_0x5eaf14,'args':_0x1e45d2,'session':_0x2f1d11}]};}catch(_0x2191e2){return{'method':'log','version':_0x55943b,'args':[{'id':_0xd14710,'ts':_0x5eaf14,'args':[{'type':'unknown','error':_0x2191e2&&_0x2191e2[_0x5211c8(0x1af)],'session':_0x2f1d11}]}]};}finally{try{if(_0x25505b&&_0x580b73){let _0x59661a=_0x5dfaf7();_0x25505b['count']++,_0x25505b[_0x5211c8(0x1df)]+=_0x59661a-_0x580b73,_0x25505b['ts']=_0x59661a,_0x345aee['hits'][_0x5211c8(0x177)]++,_0x345aee[_0x5211c8(0x143)]['time']+=_0x59661a-_0x580b73,_0x345aee['hits']['ts']=_0x59661a,(_0x25505b[_0x5211c8(0x177)]>0x32||_0x25505b['time']>0x64)&&(_0x25505b['reduceLimits']=!0x0),(_0x345aee[_0x5211c8(0x143)][_0x5211c8(0x177)]>0x3e8||_0x345aee[_0x5211c8(0x143)][_0x5211c8(0x1df)]>0x12c)&&(_0x345aee[_0x5211c8(0x143)]['reduceLimits']=!0x0);}}catch{}}}function _0x1006fd(){var _0x694354=_0x408eb4;if(_0x27eca5[_0x694354(0x1be)])return()=>_0x27eca5[_0x694354(0x1be)][_0x694354(0x1d9)]();try{let {performance:_0x1cd376}=require('perf_hooks');return()=>_0x1cd376[_0x694354(0x1d9)]();}catch{return()=>Date[_0x694354(0x1d9)]();}}})(globalThis,_0x42a5cc(0x1a8),_0x42a5cc(0x14b),_0x42a5cc(0x1ca),_0x42a5cc(0x1cc),'1.0.0','1671561868335',_0x42a5cc(0x1a9));\");\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./wp-content/themes/blank/src/js/gsapAnimations.js\n");

/***/ }),

/***/ "./wp-content/themes/blank/src/js/interactions.js":
/*!********************************************************!*\
  !*** ./wp-content/themes/blank/src/js/interactions.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./wp-content/themes/blank/src/js/swupTrans.js":
/*!*****************************************************!*\
  !*** ./wp-content/themes/blank/src/js/swupTrans.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var swup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swup */ \"./node_modules/swup/lib/index.js\");\n\nvar swup = new swup__WEBPACK_IMPORTED_MODULE_0__();\nconsole.log('swup-checks');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93cC1jb250ZW50L3RoZW1lcy9ibGFuay9zcmMvanMvc3d1cFRyYW5zLmpzLmpzIiwibWFwcGluZ3MiOiI7O0FBQXdCO0FBRXhCLElBQU1DLElBQUksR0FBRyxJQUFJRCxpQ0FBSTtBQUVyQkUsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmsvLi93cC1jb250ZW50L3RoZW1lcy9ibGFuay9zcmMvanMvc3d1cFRyYW5zLmpzPzkzNjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN3dXAgZnJvbSAnc3d1cCc7XG5cbmNvbnN0IHN3dXAgPSBuZXcgU3d1cDtcblxuY29uc29sZS5sb2coJ3N3dXAtY2hlY2tzJyk7Il0sIm5hbWVzIjpbIlN3dXAiLCJzd3VwIiwiY29uc29sZSIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./wp-content/themes/blank/src/js/swupTrans.js\n");

/***/ }),

/***/ "./node_modules/delegate-it/index.js":
/*!*******************************************!*\
  !*** ./node_modules/delegate-it/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Keeps track of raw listeners added to the base elements to avoid duplication */\nconst ledger = new WeakMap();\nfunction editLedger(wanted, baseElement, callback, setup) {\n    var _a, _b;\n    if (!wanted && !ledger.has(baseElement)) {\n        return false;\n    }\n    const elementMap = (_a = ledger.get(baseElement)) !== null && _a !== void 0 ? _a : new WeakMap();\n    ledger.set(baseElement, elementMap);\n    if (!wanted && !ledger.has(baseElement)) {\n        return false;\n    }\n    const setups = (_b = elementMap.get(callback)) !== null && _b !== void 0 ? _b : new Set();\n    elementMap.set(callback, setups);\n    const existed = setups.has(setup);\n    if (wanted) {\n        setups.add(setup);\n    }\n    else {\n        setups.delete(setup);\n    }\n    return existed && wanted;\n}\nfunction isEventTarget(elements) {\n    return typeof elements.addEventListener === 'function';\n}\nfunction safeClosest(event, selector) {\n    let target = event.target;\n    if (target instanceof Text) {\n        target = target.parentElement;\n    }\n    if (target instanceof Element && event.currentTarget instanceof Element) {\n        // `.closest()` may match ancestors of `currentTarget` but we only need its children\n        const closest = target.closest(selector);\n        if (closest && event.currentTarget.contains(closest)) {\n            return closest;\n        }\n    }\n}\n// This type isn't exported as a declaration, so it needs to be duplicated above\nfunction delegate(base, selector, type, callback, options) {\n    // Handle Selector-based usage\n    if (typeof base === 'string') {\n        base = document.querySelectorAll(base);\n    }\n    // Handle Array-like based usage\n    if (!isEventTarget(base)) {\n        const subscriptions = Array.prototype.map.call(base, (element) => delegate(element, selector, type, callback, options));\n        return {\n            destroy() {\n                for (const subscription of subscriptions) {\n                    subscription.destroy();\n                }\n            },\n        };\n    }\n    // `document` should never be the base, it's just an easy way to define \"global event listeners\"\n    const baseElement = base instanceof Document ? base.documentElement : base;\n    // Handle the regular Element usage\n    const capture = Boolean(typeof options === 'object' ? options.capture : options);\n    const listenerFn = (event) => {\n        const delegateTarget = safeClosest(event, selector);\n        if (delegateTarget) {\n            event.delegateTarget = delegateTarget;\n            callback.call(baseElement, event);\n        }\n    };\n    // Drop unsupported `once` option https://github.com/fregante/delegate-it/pull/28#discussion_r863467939\n    if (typeof options === 'object') {\n        delete options.once;\n    }\n    const setup = JSON.stringify({ selector, type, capture });\n    const isAlreadyListening = editLedger(true, baseElement, callback, setup);\n    const delegateSubscription = {\n        destroy() {\n            baseElement.removeEventListener(type, listenerFn, options);\n            editLedger(false, baseElement, callback, setup);\n        },\n    };\n    if (!isAlreadyListening) {\n        baseElement.addEventListener(type, listenerFn, options);\n    }\n    return delegateSubscription;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (delegate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGVsZWdhdGUtaXQvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx5QkFBeUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFuay8uL25vZGVfbW9kdWxlcy9kZWxlZ2F0ZS1pdC9pbmRleC5qcz9hNGViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBLZWVwcyB0cmFjayBvZiByYXcgbGlzdGVuZXJzIGFkZGVkIHRvIHRoZSBiYXNlIGVsZW1lbnRzIHRvIGF2b2lkIGR1cGxpY2F0aW9uICovXG5jb25zdCBsZWRnZXIgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gZWRpdExlZGdlcih3YW50ZWQsIGJhc2VFbGVtZW50LCBjYWxsYmFjaywgc2V0dXApIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmICghd2FudGVkICYmICFsZWRnZXIuaGFzKGJhc2VFbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnRNYXAgPSAoX2EgPSBsZWRnZXIuZ2V0KGJhc2VFbGVtZW50KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IFdlYWtNYXAoKTtcbiAgICBsZWRnZXIuc2V0KGJhc2VFbGVtZW50LCBlbGVtZW50TWFwKTtcbiAgICBpZiAoIXdhbnRlZCAmJiAhbGVkZ2VyLmhhcyhiYXNlRWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBzZXR1cHMgPSAoX2IgPSBlbGVtZW50TWFwLmdldChjYWxsYmFjaykpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG5ldyBTZXQoKTtcbiAgICBlbGVtZW50TWFwLnNldChjYWxsYmFjaywgc2V0dXBzKTtcbiAgICBjb25zdCBleGlzdGVkID0gc2V0dXBzLmhhcyhzZXR1cCk7XG4gICAgaWYgKHdhbnRlZCkge1xuICAgICAgICBzZXR1cHMuYWRkKHNldHVwKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNldHVwcy5kZWxldGUoc2V0dXApO1xuICAgIH1cbiAgICByZXR1cm4gZXhpc3RlZCAmJiB3YW50ZWQ7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KGVsZW1lbnRzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbGVtZW50cy5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gc2FmZUNsb3Nlc3QoZXZlbnQsIHNlbGVjdG9yKSB7XG4gICAgbGV0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgVGV4dCkge1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgZXZlbnQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgLy8gYC5jbG9zZXN0KClgIG1heSBtYXRjaCBhbmNlc3RvcnMgb2YgYGN1cnJlbnRUYXJnZXRgIGJ1dCB3ZSBvbmx5IG5lZWQgaXRzIGNoaWxkcmVuXG4gICAgICAgIGNvbnN0IGNsb3Nlc3QgPSB0YXJnZXQuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgICAgIGlmIChjbG9zZXN0ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQuY29udGFpbnMoY2xvc2VzdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9zZXN0O1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gVGhpcyB0eXBlIGlzbid0IGV4cG9ydGVkIGFzIGEgZGVjbGFyYXRpb24sIHNvIGl0IG5lZWRzIHRvIGJlIGR1cGxpY2F0ZWQgYWJvdmVcbmZ1bmN0aW9uIGRlbGVnYXRlKGJhc2UsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIC8vIEhhbmRsZSBTZWxlY3Rvci1iYXNlZCB1c2FnZVxuICAgIGlmICh0eXBlb2YgYmFzZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYmFzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYmFzZSk7XG4gICAgfVxuICAgIC8vIEhhbmRsZSBBcnJheS1saWtlIGJhc2VkIHVzYWdlXG4gICAgaWYgKCFpc0V2ZW50VGFyZ2V0KGJhc2UpKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoYmFzZSwgKGVsZW1lbnQpID0+IGRlbGVnYXRlKGVsZW1lbnQsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgb3B0aW9ucykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiBzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gYGRvY3VtZW50YCBzaG91bGQgbmV2ZXIgYmUgdGhlIGJhc2UsIGl0J3MganVzdCBhbiBlYXN5IHdheSB0byBkZWZpbmUgXCJnbG9iYWwgZXZlbnQgbGlzdGVuZXJzXCJcbiAgICBjb25zdCBiYXNlRWxlbWVudCA9IGJhc2UgaW5zdGFuY2VvZiBEb2N1bWVudCA/IGJhc2UuZG9jdW1lbnRFbGVtZW50IDogYmFzZTtcbiAgICAvLyBIYW5kbGUgdGhlIHJlZ3VsYXIgRWxlbWVudCB1c2FnZVxuICAgIGNvbnN0IGNhcHR1cmUgPSBCb29sZWFuKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuY2FwdHVyZSA6IG9wdGlvbnMpO1xuICAgIGNvbnN0IGxpc3RlbmVyRm4gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZGVsZWdhdGVUYXJnZXQgPSBzYWZlQ2xvc2VzdChldmVudCwgc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZGVsZWdhdGVUYXJnZXQpIHtcbiAgICAgICAgICAgIGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gZGVsZWdhdGVUYXJnZXQ7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKGJhc2VFbGVtZW50LCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIERyb3AgdW5zdXBwb3J0ZWQgYG9uY2VgIG9wdGlvbiBodHRwczovL2dpdGh1Yi5jb20vZnJlZ2FudGUvZGVsZWdhdGUtaXQvcHVsbC8yOCNkaXNjdXNzaW9uX3I4NjM0Njc5MzlcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLm9uY2U7XG4gICAgfVxuICAgIGNvbnN0IHNldHVwID0gSlNPTi5zdHJpbmdpZnkoeyBzZWxlY3RvciwgdHlwZSwgY2FwdHVyZSB9KTtcbiAgICBjb25zdCBpc0FscmVhZHlMaXN0ZW5pbmcgPSBlZGl0TGVkZ2VyKHRydWUsIGJhc2VFbGVtZW50LCBjYWxsYmFjaywgc2V0dXApO1xuICAgIGNvbnN0IGRlbGVnYXRlU3Vic2NyaXB0aW9uID0ge1xuICAgICAgICBkZXN0cm95KCkge1xuICAgICAgICAgICAgYmFzZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lckZuLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGVkaXRMZWRnZXIoZmFsc2UsIGJhc2VFbGVtZW50LCBjYWxsYmFjaywgc2V0dXApO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKCFpc0FscmVhZHlMaXN0ZW5pbmcpIHtcbiAgICAgICAgYmFzZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lckZuLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbGVnYXRlU3Vic2NyaXB0aW9uO1xufVxuZXhwb3J0IGRlZmF1bHQgZGVsZWdhdGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/delegate-it/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkblank"] = self["webpackChunkblank"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./wp-content/themes/blank/src/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./wp-content/themes/blank/src/scss/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;